/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.talool.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DealAcquire_t implements org.apache.thrift.TBase<DealAcquire_t, DealAcquire_t._Fields>, java.io.Serializable, Cloneable, Comparable<DealAcquire_t> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DealAcquire_t");

  private static final org.apache.thrift.protocol.TField DEAL_ACQUIRE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealAcquireId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DEAL_FIELD_DESC = new org.apache.thrift.protocol.TField("deal", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REDEEMED_FIELD_DESC = new org.apache.thrift.protocol.TField("redeemed", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("created", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("updated", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField REDEMPTION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("redemptionCode", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField GIFT_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("giftDetail", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DealAcquire_tStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DealAcquire_tTupleSchemeFactory());
  }

  public String dealAcquireId; // optional
  public Deal_t deal; // required
  /**
   * 
   * @see AcquireStatus_t
   */
  public AcquireStatus_t status; // optional
  public long redeemed; // optional
  public long created; // optional
  public long updated; // optional
  public String redemptionCode; // optional
  public GiftDetail_t giftDetail; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEAL_ACQUIRE_ID((short)1, "dealAcquireId"),
    DEAL((short)2, "deal"),
    /**
     * 
     * @see AcquireStatus_t
     */
    STATUS((short)3, "status"),
    REDEEMED((short)5, "redeemed"),
    CREATED((short)6, "created"),
    UPDATED((short)7, "updated"),
    REDEMPTION_CODE((short)8, "redemptionCode"),
    GIFT_DETAIL((short)9, "giftDetail");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEAL_ACQUIRE_ID
          return DEAL_ACQUIRE_ID;
        case 2: // DEAL
          return DEAL;
        case 3: // STATUS
          return STATUS;
        case 5: // REDEEMED
          return REDEEMED;
        case 6: // CREATED
          return CREATED;
        case 7: // UPDATED
          return UPDATED;
        case 8: // REDEMPTION_CODE
          return REDEMPTION_CODE;
        case 9: // GIFT_DETAIL
          return GIFT_DETAIL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REDEEMED_ISSET_ID = 0;
  private static final int __CREATED_ISSET_ID = 1;
  private static final int __UPDATED_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DEAL_ACQUIRE_ID,_Fields.STATUS,_Fields.REDEEMED,_Fields.CREATED,_Fields.UPDATED,_Fields.REDEMPTION_CODE,_Fields.GIFT_DETAIL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEAL_ACQUIRE_ID, new org.apache.thrift.meta_data.FieldMetaData("dealAcquireId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEAL, new org.apache.thrift.meta_data.FieldMetaData("deal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Deal_t.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AcquireStatus_t.class)));
    tmpMap.put(_Fields.REDEEMED, new org.apache.thrift.meta_data.FieldMetaData("redeemed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.CREATED, new org.apache.thrift.meta_data.FieldMetaData("created", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.UPDATED, new org.apache.thrift.meta_data.FieldMetaData("updated", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.REDEMPTION_CODE, new org.apache.thrift.meta_data.FieldMetaData("redemptionCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GIFT_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("giftDetail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GiftDetail_t.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DealAcquire_t.class, metaDataMap);
  }

  public DealAcquire_t() {
  }

  public DealAcquire_t(
    Deal_t deal)
  {
    this();
    this.deal = deal;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DealAcquire_t(DealAcquire_t other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDealAcquireId()) {
      this.dealAcquireId = other.dealAcquireId;
    }
    if (other.isSetDeal()) {
      this.deal = new Deal_t(other.deal);
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.redeemed = other.redeemed;
    this.created = other.created;
    this.updated = other.updated;
    if (other.isSetRedemptionCode()) {
      this.redemptionCode = other.redemptionCode;
    }
    if (other.isSetGiftDetail()) {
      this.giftDetail = new GiftDetail_t(other.giftDetail);
    }
  }

  public DealAcquire_t deepCopy() {
    return new DealAcquire_t(this);
  }

  public void clear() {
    this.dealAcquireId = null;
    this.deal = null;
    this.status = null;
    setRedeemedIsSet(false);
    this.redeemed = 0;
    setCreatedIsSet(false);
    this.created = 0;
    setUpdatedIsSet(false);
    this.updated = 0;
    this.redemptionCode = null;
    this.giftDetail = null;
  }

  public String getDealAcquireId() {
    return this.dealAcquireId;
  }

  public DealAcquire_t setDealAcquireId(String dealAcquireId) {
    this.dealAcquireId = dealAcquireId;
    return this;
  }

  public void unsetDealAcquireId() {
    this.dealAcquireId = null;
  }

  /** Returns true if field dealAcquireId is set (has been assigned a value) and false otherwise */
  public boolean isSetDealAcquireId() {
    return this.dealAcquireId != null;
  }

  public void setDealAcquireIdIsSet(boolean value) {
    if (!value) {
      this.dealAcquireId = null;
    }
  }

  public Deal_t getDeal() {
    return this.deal;
  }

  public DealAcquire_t setDeal(Deal_t deal) {
    this.deal = deal;
    return this;
  }

  public void unsetDeal() {
    this.deal = null;
  }

  /** Returns true if field deal is set (has been assigned a value) and false otherwise */
  public boolean isSetDeal() {
    return this.deal != null;
  }

  public void setDealIsSet(boolean value) {
    if (!value) {
      this.deal = null;
    }
  }

  /**
   * 
   * @see AcquireStatus_t
   */
  public AcquireStatus_t getStatus() {
    return this.status;
  }

  /**
   * 
   * @see AcquireStatus_t
   */
  public DealAcquire_t setStatus(AcquireStatus_t status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public long getRedeemed() {
    return this.redeemed;
  }

  public DealAcquire_t setRedeemed(long redeemed) {
    this.redeemed = redeemed;
    setRedeemedIsSet(true);
    return this;
  }

  public void unsetRedeemed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REDEEMED_ISSET_ID);
  }

  /** Returns true if field redeemed is set (has been assigned a value) and false otherwise */
  public boolean isSetRedeemed() {
    return EncodingUtils.testBit(__isset_bitfield, __REDEEMED_ISSET_ID);
  }

  public void setRedeemedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REDEEMED_ISSET_ID, value);
  }

  public long getCreated() {
    return this.created;
  }

  public DealAcquire_t setCreated(long created) {
    this.created = created;
    setCreatedIsSet(true);
    return this;
  }

  public void unsetCreated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  /** Returns true if field created is set (has been assigned a value) and false otherwise */
  public boolean isSetCreated() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  public void setCreatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATED_ISSET_ID, value);
  }

  public long getUpdated() {
    return this.updated;
  }

  public DealAcquire_t setUpdated(long updated) {
    this.updated = updated;
    setUpdatedIsSet(true);
    return this;
  }

  public void unsetUpdated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATED_ISSET_ID);
  }

  /** Returns true if field updated is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdated() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATED_ISSET_ID);
  }

  public void setUpdatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATED_ISSET_ID, value);
  }

  public String getRedemptionCode() {
    return this.redemptionCode;
  }

  public DealAcquire_t setRedemptionCode(String redemptionCode) {
    this.redemptionCode = redemptionCode;
    return this;
  }

  public void unsetRedemptionCode() {
    this.redemptionCode = null;
  }

  /** Returns true if field redemptionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRedemptionCode() {
    return this.redemptionCode != null;
  }

  public void setRedemptionCodeIsSet(boolean value) {
    if (!value) {
      this.redemptionCode = null;
    }
  }

  public GiftDetail_t getGiftDetail() {
    return this.giftDetail;
  }

  public DealAcquire_t setGiftDetail(GiftDetail_t giftDetail) {
    this.giftDetail = giftDetail;
    return this;
  }

  public void unsetGiftDetail() {
    this.giftDetail = null;
  }

  /** Returns true if field giftDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftDetail() {
    return this.giftDetail != null;
  }

  public void setGiftDetailIsSet(boolean value) {
    if (!value) {
      this.giftDetail = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEAL_ACQUIRE_ID:
      if (value == null) {
        unsetDealAcquireId();
      } else {
        setDealAcquireId((String)value);
      }
      break;

    case DEAL:
      if (value == null) {
        unsetDeal();
      } else {
        setDeal((Deal_t)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((AcquireStatus_t)value);
      }
      break;

    case REDEEMED:
      if (value == null) {
        unsetRedeemed();
      } else {
        setRedeemed((Long)value);
      }
      break;

    case CREATED:
      if (value == null) {
        unsetCreated();
      } else {
        setCreated((Long)value);
      }
      break;

    case UPDATED:
      if (value == null) {
        unsetUpdated();
      } else {
        setUpdated((Long)value);
      }
      break;

    case REDEMPTION_CODE:
      if (value == null) {
        unsetRedemptionCode();
      } else {
        setRedemptionCode((String)value);
      }
      break;

    case GIFT_DETAIL:
      if (value == null) {
        unsetGiftDetail();
      } else {
        setGiftDetail((GiftDetail_t)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEAL_ACQUIRE_ID:
      return getDealAcquireId();

    case DEAL:
      return getDeal();

    case STATUS:
      return getStatus();

    case REDEEMED:
      return Long.valueOf(getRedeemed());

    case CREATED:
      return Long.valueOf(getCreated());

    case UPDATED:
      return Long.valueOf(getUpdated());

    case REDEMPTION_CODE:
      return getRedemptionCode();

    case GIFT_DETAIL:
      return getGiftDetail();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEAL_ACQUIRE_ID:
      return isSetDealAcquireId();
    case DEAL:
      return isSetDeal();
    case STATUS:
      return isSetStatus();
    case REDEEMED:
      return isSetRedeemed();
    case CREATED:
      return isSetCreated();
    case UPDATED:
      return isSetUpdated();
    case REDEMPTION_CODE:
      return isSetRedemptionCode();
    case GIFT_DETAIL:
      return isSetGiftDetail();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DealAcquire_t)
      return this.equals((DealAcquire_t)that);
    return false;
  }

  public boolean equals(DealAcquire_t that) {
    if (that == null)
      return false;

    boolean this_present_dealAcquireId = true && this.isSetDealAcquireId();
    boolean that_present_dealAcquireId = true && that.isSetDealAcquireId();
    if (this_present_dealAcquireId || that_present_dealAcquireId) {
      if (!(this_present_dealAcquireId && that_present_dealAcquireId))
        return false;
      if (!this.dealAcquireId.equals(that.dealAcquireId))
        return false;
    }

    boolean this_present_deal = true && this.isSetDeal();
    boolean that_present_deal = true && that.isSetDeal();
    if (this_present_deal || that_present_deal) {
      if (!(this_present_deal && that_present_deal))
        return false;
      if (!this.deal.equals(that.deal))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_redeemed = true && this.isSetRedeemed();
    boolean that_present_redeemed = true && that.isSetRedeemed();
    if (this_present_redeemed || that_present_redeemed) {
      if (!(this_present_redeemed && that_present_redeemed))
        return false;
      if (this.redeemed != that.redeemed)
        return false;
    }

    boolean this_present_created = true && this.isSetCreated();
    boolean that_present_created = true && that.isSetCreated();
    if (this_present_created || that_present_created) {
      if (!(this_present_created && that_present_created))
        return false;
      if (this.created != that.created)
        return false;
    }

    boolean this_present_updated = true && this.isSetUpdated();
    boolean that_present_updated = true && that.isSetUpdated();
    if (this_present_updated || that_present_updated) {
      if (!(this_present_updated && that_present_updated))
        return false;
      if (this.updated != that.updated)
        return false;
    }

    boolean this_present_redemptionCode = true && this.isSetRedemptionCode();
    boolean that_present_redemptionCode = true && that.isSetRedemptionCode();
    if (this_present_redemptionCode || that_present_redemptionCode) {
      if (!(this_present_redemptionCode && that_present_redemptionCode))
        return false;
      if (!this.redemptionCode.equals(that.redemptionCode))
        return false;
    }

    boolean this_present_giftDetail = true && this.isSetGiftDetail();
    boolean that_present_giftDetail = true && that.isSetGiftDetail();
    if (this_present_giftDetail || that_present_giftDetail) {
      if (!(this_present_giftDetail && that_present_giftDetail))
        return false;
      if (!this.giftDetail.equals(that.giftDetail))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DealAcquire_t other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDealAcquireId()).compareTo(other.isSetDealAcquireId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDealAcquireId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealAcquireId, other.dealAcquireId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeal()).compareTo(other.isSetDeal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deal, other.deal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRedeemed()).compareTo(other.isSetRedeemed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedeemed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redeemed, other.redeemed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreated()).compareTo(other.isSetCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created, other.created);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdated()).compareTo(other.isSetUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updated, other.updated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRedemptionCode()).compareTo(other.isSetRedemptionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedemptionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redemptionCode, other.redemptionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiftDetail()).compareTo(other.isSetGiftDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftDetail, other.giftDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DealAcquire_t(");
    boolean first = true;

    if (isSetDealAcquireId()) {
      sb.append("dealAcquireId:");
      if (this.dealAcquireId == null) {
        sb.append("null");
      } else {
        sb.append(this.dealAcquireId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("deal:");
    if (this.deal == null) {
      sb.append("null");
    } else {
      sb.append(this.deal);
    }
    first = false;
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetRedeemed()) {
      if (!first) sb.append(", ");
      sb.append("redeemed:");
      sb.append(this.redeemed);
      first = false;
    }
    if (isSetCreated()) {
      if (!first) sb.append(", ");
      sb.append("created:");
      sb.append(this.created);
      first = false;
    }
    if (isSetUpdated()) {
      if (!first) sb.append(", ");
      sb.append("updated:");
      sb.append(this.updated);
      first = false;
    }
    if (isSetRedemptionCode()) {
      if (!first) sb.append(", ");
      sb.append("redemptionCode:");
      if (this.redemptionCode == null) {
        sb.append("null");
      } else {
        sb.append(this.redemptionCode);
      }
      first = false;
    }
    if (isSetGiftDetail()) {
      if (!first) sb.append(", ");
      sb.append("giftDetail:");
      if (this.giftDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.giftDetail);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (deal == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deal' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (deal != null) {
      deal.validate();
    }
    if (giftDetail != null) {
      giftDetail.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class DealAcquire_tStandardSchemeFactory implements SchemeFactory {
    public DealAcquire_tStandardScheme getScheme() {
      return new DealAcquire_tStandardScheme();
    }
  }

  private static class DealAcquire_tStandardScheme extends StandardScheme<DealAcquire_t> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DealAcquire_t struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEAL_ACQUIRE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dealAcquireId = iprot.readString();
              struct.setDealAcquireIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deal = new Deal_t();
              struct.deal.read(iprot);
              struct.setDealIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = AcquireStatus_t.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REDEEMED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.redeemed = iprot.readI64();
              struct.setRedeemedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.created = iprot.readI64();
              struct.setCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updated = iprot.readI64();
              struct.setUpdatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REDEMPTION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.redemptionCode = iprot.readString();
              struct.setRedemptionCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GIFT_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.giftDetail = new GiftDetail_t();
              struct.giftDetail.read(iprot);
              struct.setGiftDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DealAcquire_t struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dealAcquireId != null) {
        if (struct.isSetDealAcquireId()) {
          oprot.writeFieldBegin(DEAL_ACQUIRE_ID_FIELD_DESC);
          oprot.writeString(struct.dealAcquireId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deal != null) {
        oprot.writeFieldBegin(DEAL_FIELD_DESC);
        struct.deal.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRedeemed()) {
        oprot.writeFieldBegin(REDEEMED_FIELD_DESC);
        oprot.writeI64(struct.redeemed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreated()) {
        oprot.writeFieldBegin(CREATED_FIELD_DESC);
        oprot.writeI64(struct.created);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdated()) {
        oprot.writeFieldBegin(UPDATED_FIELD_DESC);
        oprot.writeI64(struct.updated);
        oprot.writeFieldEnd();
      }
      if (struct.redemptionCode != null) {
        if (struct.isSetRedemptionCode()) {
          oprot.writeFieldBegin(REDEMPTION_CODE_FIELD_DESC);
          oprot.writeString(struct.redemptionCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.giftDetail != null) {
        if (struct.isSetGiftDetail()) {
          oprot.writeFieldBegin(GIFT_DETAIL_FIELD_DESC);
          struct.giftDetail.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DealAcquire_tTupleSchemeFactory implements SchemeFactory {
    public DealAcquire_tTupleScheme getScheme() {
      return new DealAcquire_tTupleScheme();
    }
  }

  private static class DealAcquire_tTupleScheme extends TupleScheme<DealAcquire_t> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DealAcquire_t struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.deal.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetDealAcquireId()) {
        optionals.set(0);
      }
      if (struct.isSetStatus()) {
        optionals.set(1);
      }
      if (struct.isSetRedeemed()) {
        optionals.set(2);
      }
      if (struct.isSetCreated()) {
        optionals.set(3);
      }
      if (struct.isSetUpdated()) {
        optionals.set(4);
      }
      if (struct.isSetRedemptionCode()) {
        optionals.set(5);
      }
      if (struct.isSetGiftDetail()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetDealAcquireId()) {
        oprot.writeString(struct.dealAcquireId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetRedeemed()) {
        oprot.writeI64(struct.redeemed);
      }
      if (struct.isSetCreated()) {
        oprot.writeI64(struct.created);
      }
      if (struct.isSetUpdated()) {
        oprot.writeI64(struct.updated);
      }
      if (struct.isSetRedemptionCode()) {
        oprot.writeString(struct.redemptionCode);
      }
      if (struct.isSetGiftDetail()) {
        struct.giftDetail.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DealAcquire_t struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.deal = new Deal_t();
      struct.deal.read(iprot);
      struct.setDealIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.dealAcquireId = iprot.readString();
        struct.setDealAcquireIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.status = AcquireStatus_t.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.redeemed = iprot.readI64();
        struct.setRedeemedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.created = iprot.readI64();
        struct.setCreatedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.updated = iprot.readI64();
        struct.setUpdatedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.redemptionCode = iprot.readString();
        struct.setRedemptionCodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.giftDetail = new GiftDetail_t();
        struct.giftDetail.read(iprot);
        struct.setGiftDetailIsSet(true);
      }
    }
  }

}

