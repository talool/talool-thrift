/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.talool.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Card_t implements org.apache.thrift.TBase<Card_t, Card_t._Fields>, java.io.Serializable, Cloneable, Comparable<Card_t> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Card_t");

  private static final org.apache.thrift.protocol.TField ACCOUNT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("accountNumber", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXPIRATION_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("expirationMonth", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXPIRATION_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("expirationYear", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SECURITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("securityCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ZIP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("zipCode", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new Card_tStandardSchemeFactory());
    schemes.put(TupleScheme.class, new Card_tTupleSchemeFactory());
  }

  public String accountNumber; // required
  public String expirationMonth; // required
  public String expirationYear; // required
  public String securityCode; // optional
  public String zipCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCOUNT_NUMBER((short)1, "accountNumber"),
    EXPIRATION_MONTH((short)2, "expirationMonth"),
    EXPIRATION_YEAR((short)3, "expirationYear"),
    SECURITY_CODE((short)4, "securityCode"),
    ZIP_CODE((short)5, "zipCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCOUNT_NUMBER
          return ACCOUNT_NUMBER;
        case 2: // EXPIRATION_MONTH
          return EXPIRATION_MONTH;
        case 3: // EXPIRATION_YEAR
          return EXPIRATION_YEAR;
        case 4: // SECURITY_CODE
          return SECURITY_CODE;
        case 5: // ZIP_CODE
          return ZIP_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.SECURITY_CODE,_Fields.ZIP_CODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCOUNT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("accountNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRATION_MONTH, new org.apache.thrift.meta_data.FieldMetaData("expirationMonth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRATION_YEAR, new org.apache.thrift.meta_data.FieldMetaData("expirationYear", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECURITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("securityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZIP_CODE, new org.apache.thrift.meta_data.FieldMetaData("zipCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Card_t.class, metaDataMap);
  }

  public Card_t() {
  }

  public Card_t(
    String accountNumber,
    String expirationMonth,
    String expirationYear)
  {
    this();
    this.accountNumber = accountNumber;
    this.expirationMonth = expirationMonth;
    this.expirationYear = expirationYear;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Card_t(Card_t other) {
    if (other.isSetAccountNumber()) {
      this.accountNumber = other.accountNumber;
    }
    if (other.isSetExpirationMonth()) {
      this.expirationMonth = other.expirationMonth;
    }
    if (other.isSetExpirationYear()) {
      this.expirationYear = other.expirationYear;
    }
    if (other.isSetSecurityCode()) {
      this.securityCode = other.securityCode;
    }
    if (other.isSetZipCode()) {
      this.zipCode = other.zipCode;
    }
  }

  public Card_t deepCopy() {
    return new Card_t(this);
  }

  public void clear() {
    this.accountNumber = null;
    this.expirationMonth = null;
    this.expirationYear = null;
    this.securityCode = null;
    this.zipCode = null;
  }

  public String getAccountNumber() {
    return this.accountNumber;
  }

  public Card_t setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  public void unsetAccountNumber() {
    this.accountNumber = null;
  }

  /** Returns true if field accountNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountNumber() {
    return this.accountNumber != null;
  }

  public void setAccountNumberIsSet(boolean value) {
    if (!value) {
      this.accountNumber = null;
    }
  }

  public String getExpirationMonth() {
    return this.expirationMonth;
  }

  public Card_t setExpirationMonth(String expirationMonth) {
    this.expirationMonth = expirationMonth;
    return this;
  }

  public void unsetExpirationMonth() {
    this.expirationMonth = null;
  }

  /** Returns true if field expirationMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetExpirationMonth() {
    return this.expirationMonth != null;
  }

  public void setExpirationMonthIsSet(boolean value) {
    if (!value) {
      this.expirationMonth = null;
    }
  }

  public String getExpirationYear() {
    return this.expirationYear;
  }

  public Card_t setExpirationYear(String expirationYear) {
    this.expirationYear = expirationYear;
    return this;
  }

  public void unsetExpirationYear() {
    this.expirationYear = null;
  }

  /** Returns true if field expirationYear is set (has been assigned a value) and false otherwise */
  public boolean isSetExpirationYear() {
    return this.expirationYear != null;
  }

  public void setExpirationYearIsSet(boolean value) {
    if (!value) {
      this.expirationYear = null;
    }
  }

  public String getSecurityCode() {
    return this.securityCode;
  }

  public Card_t setSecurityCode(String securityCode) {
    this.securityCode = securityCode;
    return this;
  }

  public void unsetSecurityCode() {
    this.securityCode = null;
  }

  /** Returns true if field securityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSecurityCode() {
    return this.securityCode != null;
  }

  public void setSecurityCodeIsSet(boolean value) {
    if (!value) {
      this.securityCode = null;
    }
  }

  public String getZipCode() {
    return this.zipCode;
  }

  public Card_t setZipCode(String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  public void unsetZipCode() {
    this.zipCode = null;
  }

  /** Returns true if field zipCode is set (has been assigned a value) and false otherwise */
  public boolean isSetZipCode() {
    return this.zipCode != null;
  }

  public void setZipCodeIsSet(boolean value) {
    if (!value) {
      this.zipCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCOUNT_NUMBER:
      if (value == null) {
        unsetAccountNumber();
      } else {
        setAccountNumber((String)value);
      }
      break;

    case EXPIRATION_MONTH:
      if (value == null) {
        unsetExpirationMonth();
      } else {
        setExpirationMonth((String)value);
      }
      break;

    case EXPIRATION_YEAR:
      if (value == null) {
        unsetExpirationYear();
      } else {
        setExpirationYear((String)value);
      }
      break;

    case SECURITY_CODE:
      if (value == null) {
        unsetSecurityCode();
      } else {
        setSecurityCode((String)value);
      }
      break;

    case ZIP_CODE:
      if (value == null) {
        unsetZipCode();
      } else {
        setZipCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCOUNT_NUMBER:
      return getAccountNumber();

    case EXPIRATION_MONTH:
      return getExpirationMonth();

    case EXPIRATION_YEAR:
      return getExpirationYear();

    case SECURITY_CODE:
      return getSecurityCode();

    case ZIP_CODE:
      return getZipCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCOUNT_NUMBER:
      return isSetAccountNumber();
    case EXPIRATION_MONTH:
      return isSetExpirationMonth();
    case EXPIRATION_YEAR:
      return isSetExpirationYear();
    case SECURITY_CODE:
      return isSetSecurityCode();
    case ZIP_CODE:
      return isSetZipCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Card_t)
      return this.equals((Card_t)that);
    return false;
  }

  public boolean equals(Card_t that) {
    if (that == null)
      return false;

    boolean this_present_accountNumber = true && this.isSetAccountNumber();
    boolean that_present_accountNumber = true && that.isSetAccountNumber();
    if (this_present_accountNumber || that_present_accountNumber) {
      if (!(this_present_accountNumber && that_present_accountNumber))
        return false;
      if (!this.accountNumber.equals(that.accountNumber))
        return false;
    }

    boolean this_present_expirationMonth = true && this.isSetExpirationMonth();
    boolean that_present_expirationMonth = true && that.isSetExpirationMonth();
    if (this_present_expirationMonth || that_present_expirationMonth) {
      if (!(this_present_expirationMonth && that_present_expirationMonth))
        return false;
      if (!this.expirationMonth.equals(that.expirationMonth))
        return false;
    }

    boolean this_present_expirationYear = true && this.isSetExpirationYear();
    boolean that_present_expirationYear = true && that.isSetExpirationYear();
    if (this_present_expirationYear || that_present_expirationYear) {
      if (!(this_present_expirationYear && that_present_expirationYear))
        return false;
      if (!this.expirationYear.equals(that.expirationYear))
        return false;
    }

    boolean this_present_securityCode = true && this.isSetSecurityCode();
    boolean that_present_securityCode = true && that.isSetSecurityCode();
    if (this_present_securityCode || that_present_securityCode) {
      if (!(this_present_securityCode && that_present_securityCode))
        return false;
      if (!this.securityCode.equals(that.securityCode))
        return false;
    }

    boolean this_present_zipCode = true && this.isSetZipCode();
    boolean that_present_zipCode = true && that.isSetZipCode();
    if (this_present_zipCode || that_present_zipCode) {
      if (!(this_present_zipCode && that_present_zipCode))
        return false;
      if (!this.zipCode.equals(that.zipCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Card_t other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAccountNumber()).compareTo(other.isSetAccountNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountNumber, other.accountNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpirationMonth()).compareTo(other.isSetExpirationMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpirationMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expirationMonth, other.expirationMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpirationYear()).compareTo(other.isSetExpirationYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpirationYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expirationYear, other.expirationYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecurityCode()).compareTo(other.isSetSecurityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecurityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityCode, other.securityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZipCode()).compareTo(other.isSetZipCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZipCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zipCode, other.zipCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Card_t(");
    boolean first = true;

    sb.append("accountNumber:");
    if (this.accountNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.accountNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expirationMonth:");
    if (this.expirationMonth == null) {
      sb.append("null");
    } else {
      sb.append(this.expirationMonth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expirationYear:");
    if (this.expirationYear == null) {
      sb.append("null");
    } else {
      sb.append(this.expirationYear);
    }
    first = false;
    if (isSetSecurityCode()) {
      if (!first) sb.append(", ");
      sb.append("securityCode:");
      if (this.securityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.securityCode);
      }
      first = false;
    }
    if (isSetZipCode()) {
      if (!first) sb.append(", ");
      sb.append("zipCode:");
      if (this.zipCode == null) {
        sb.append("null");
      } else {
        sb.append(this.zipCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (accountNumber == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountNumber' was not present! Struct: " + toString());
    }
    if (expirationMonth == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'expirationMonth' was not present! Struct: " + toString());
    }
    if (expirationYear == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'expirationYear' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class Card_tStandardSchemeFactory implements SchemeFactory {
    public Card_tStandardScheme getScheme() {
      return new Card_tStandardScheme();
    }
  }

  private static class Card_tStandardScheme extends StandardScheme<Card_t> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Card_t struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCOUNT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountNumber = iprot.readString();
              struct.setAccountNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXPIRATION_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expirationMonth = iprot.readString();
              struct.setExpirationMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXPIRATION_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expirationYear = iprot.readString();
              struct.setExpirationYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SECURITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.securityCode = iprot.readString();
              struct.setSecurityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ZIP_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zipCode = iprot.readString();
              struct.setZipCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Card_t struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.accountNumber != null) {
        oprot.writeFieldBegin(ACCOUNT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.accountNumber);
        oprot.writeFieldEnd();
      }
      if (struct.expirationMonth != null) {
        oprot.writeFieldBegin(EXPIRATION_MONTH_FIELD_DESC);
        oprot.writeString(struct.expirationMonth);
        oprot.writeFieldEnd();
      }
      if (struct.expirationYear != null) {
        oprot.writeFieldBegin(EXPIRATION_YEAR_FIELD_DESC);
        oprot.writeString(struct.expirationYear);
        oprot.writeFieldEnd();
      }
      if (struct.securityCode != null) {
        if (struct.isSetSecurityCode()) {
          oprot.writeFieldBegin(SECURITY_CODE_FIELD_DESC);
          oprot.writeString(struct.securityCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.zipCode != null) {
        if (struct.isSetZipCode()) {
          oprot.writeFieldBegin(ZIP_CODE_FIELD_DESC);
          oprot.writeString(struct.zipCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Card_tTupleSchemeFactory implements SchemeFactory {
    public Card_tTupleScheme getScheme() {
      return new Card_tTupleScheme();
    }
  }

  private static class Card_tTupleScheme extends TupleScheme<Card_t> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Card_t struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.accountNumber);
      oprot.writeString(struct.expirationMonth);
      oprot.writeString(struct.expirationYear);
      BitSet optionals = new BitSet();
      if (struct.isSetSecurityCode()) {
        optionals.set(0);
      }
      if (struct.isSetZipCode()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSecurityCode()) {
        oprot.writeString(struct.securityCode);
      }
      if (struct.isSetZipCode()) {
        oprot.writeString(struct.zipCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Card_t struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.accountNumber = iprot.readString();
      struct.setAccountNumberIsSet(true);
      struct.expirationMonth = iprot.readString();
      struct.setExpirationMonthIsSet(true);
      struct.expirationYear = iprot.readString();
      struct.setExpirationYearIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.securityCode = iprot.readString();
        struct.setSecurityCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.zipCode = iprot.readString();
        struct.setZipCodeIsSet(true);
      }
    }
  }

}

