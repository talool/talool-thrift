/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.talool.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EmailBodyResponse_t implements org.apache.thrift.TBase<EmailBodyResponse_t, EmailBodyResponse_t._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EmailBodyResponse_t");

  private static final org.apache.thrift.protocol.TField EMAIL_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("emailBody", org.apache.thrift.protocol.TType.STRING, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EmailBodyResponse_tStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EmailBodyResponse_tTupleSchemeFactory());
  }

  public String emailBody; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EMAIL_BODY((short)1, "emailBody");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EMAIL_BODY
          return EMAIL_BODY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.EMAIL_BODY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EMAIL_BODY, new org.apache.thrift.meta_data.FieldMetaData("emailBody", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EmailBodyResponse_t.class, metaDataMap);
  }

  public EmailBodyResponse_t() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EmailBodyResponse_t(EmailBodyResponse_t other) {
    if (other.isSetEmailBody()) {
      this.emailBody = other.emailBody;
    }
  }

  public EmailBodyResponse_t deepCopy() {
    return new EmailBodyResponse_t(this);
  }

  public void clear() {
    this.emailBody = null;
  }

  public String getEmailBody() {
    return this.emailBody;
  }

  public EmailBodyResponse_t setEmailBody(String emailBody) {
    this.emailBody = emailBody;
    return this;
  }

  public void unsetEmailBody() {
    this.emailBody = null;
  }

  /** Returns true if field emailBody is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailBody() {
    return this.emailBody != null;
  }

  public void setEmailBodyIsSet(boolean value) {
    if (!value) {
      this.emailBody = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EMAIL_BODY:
      if (value == null) {
        unsetEmailBody();
      } else {
        setEmailBody((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EMAIL_BODY:
      return getEmailBody();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EMAIL_BODY:
      return isSetEmailBody();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EmailBodyResponse_t)
      return this.equals((EmailBodyResponse_t)that);
    return false;
  }

  public boolean equals(EmailBodyResponse_t that) {
    if (that == null)
      return false;

    boolean this_present_emailBody = true && this.isSetEmailBody();
    boolean that_present_emailBody = true && that.isSetEmailBody();
    if (this_present_emailBody || that_present_emailBody) {
      if (!(this_present_emailBody && that_present_emailBody))
        return false;
      if (!this.emailBody.equals(that.emailBody))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(EmailBodyResponse_t other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    EmailBodyResponse_t typedOther = (EmailBodyResponse_t)other;

    lastComparison = Boolean.valueOf(isSetEmailBody()).compareTo(typedOther.isSetEmailBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailBody, typedOther.emailBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EmailBodyResponse_t(");
    boolean first = true;

    if (isSetEmailBody()) {
      sb.append("emailBody:");
      if (this.emailBody == null) {
        sb.append("null");
      } else {
        sb.append(this.emailBody);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class EmailBodyResponse_tStandardSchemeFactory implements SchemeFactory {
    public EmailBodyResponse_tStandardScheme getScheme() {
      return new EmailBodyResponse_tStandardScheme();
    }
  }

  private static class EmailBodyResponse_tStandardScheme extends StandardScheme<EmailBodyResponse_t> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EmailBodyResponse_t struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EMAIL_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emailBody = iprot.readString();
              struct.setEmailBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EmailBodyResponse_t struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.emailBody != null) {
        if (struct.isSetEmailBody()) {
          oprot.writeFieldBegin(EMAIL_BODY_FIELD_DESC);
          oprot.writeString(struct.emailBody);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EmailBodyResponse_tTupleSchemeFactory implements SchemeFactory {
    public EmailBodyResponse_tTupleScheme getScheme() {
      return new EmailBodyResponse_tTupleScheme();
    }
  }

  private static class EmailBodyResponse_tTupleScheme extends TupleScheme<EmailBodyResponse_t> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EmailBodyResponse_t struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEmailBody()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetEmailBody()) {
        oprot.writeString(struct.emailBody);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EmailBodyResponse_t struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.emailBody = iprot.readString();
        struct.setEmailBodyIsSet(true);
      }
    }
  }

}

