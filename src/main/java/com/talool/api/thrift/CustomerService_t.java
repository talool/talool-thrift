/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.talool.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CustomerService_t {

  public interface Iface {

    public CTokenAccess_t createAccount(com.talool.api.thrift.Customer_t customer, String password) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public CTokenAccess_t authenticate(String email, String password) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public boolean customerEmailExists(String email) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public void addSocialAccount(com.talool.api.thrift.SocialAccount_t socialAccount) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public void removeSocialAccount(com.talool.api.thrift.SocialNetwork_t socialNetwork) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public List<com.talool.api.thrift.Merchant_t> getMerchantAcquires(com.talool.api.thrift.SearchOptions_t searchOptions) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public List<com.talool.api.thrift.Merchant_t> getMerchantAcquiresWithLocation(com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.Location_t location) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public List<com.talool.api.thrift.Merchant_t> getMerchantAcquiresByCategory(int categoryId, com.talool.api.thrift.SearchOptions_t searchOptions) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public List<com.talool.api.thrift.DealAcquire_t> getDealAcquires(String merchantId, com.talool.api.thrift.SearchOptions_t searchOptions) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public String redeem(String dealAcquireId, com.talool.api.thrift.Location_t location) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public List<com.talool.api.thrift.DealOffer_t> getDealOffers() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public void activateCode(String dealOfferid, String code) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public com.talool.api.thrift.DealOffer_t getDealOffer(String dealOfferId) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public List<com.talool.api.thrift.Deal_t> getDealsByDealOfferId(String dealOfferId, com.talool.api.thrift.SearchOptions_t searchOptions) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public void purchaseDealOffer(String dealOfferId) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public List<com.talool.api.thrift.Merchant_t> getMerchantsWithin(com.talool.api.thrift.Location_t location, int maxMiles, com.talool.api.thrift.SearchOptions_t searchOptions) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public void addFavoriteMerchant(String merchantId) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public void removeFavoriteMerchant(String merchantId) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public List<com.talool.api.thrift.Merchant_t> getFavoriteMerchants(com.talool.api.thrift.SearchOptions_t searchOptions) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public List<com.talool.api.thrift.Category_t> getCategories() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public String giftToFacebook(String dealAcquireId, String facebookId, String receipientName) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public String giftToEmail(String dealAcquireId, String email, String receipientName) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public com.talool.api.thrift.Gift_t getGift(String giftId) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public com.talool.api.thrift.DealAcquire_t acceptGift(String giftId) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public void rejectGift(String giftId) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public List<com.talool.api.thrift.Activity_t> getActivities(com.talool.api.thrift.SearchOptions_t searchOptions) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public List<com.talool.api.thrift.Activity_t> getMessages(com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.Location_t location) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public void activityAction(String activityId) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public void sendResetPasswordEmail(String email) throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException;

    public CTokenAccess_t resetPassword(String customerId, String resetPasswordCode, String newPassword) throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException;

    public com.talool.api.thrift.TransactionResult_t purchaseByCard(String dealOfferId, com.talool.api.thrift.PaymentDetail_t paymentDetail) throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException;

    public com.talool.api.thrift.TransactionResult_t purchaseByCode(String dealOfferId, String paymentCode) throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException;

    public CTokenAccessResponse_t loginFacebook(String facebookId, String facebookAccessToken) throws com.talool.api.thrift.TServiceException_t, org.apache.thrift.TException;

    public DealOfferGeoSummariesResponse_t getDealOfferGeoSummariesWithin(com.talool.api.thrift.Location_t location, int maxMiles, com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.SearchOptions_t fallbackSearchOptions) throws com.talool.api.thrift.TServiceException_t, org.apache.thrift.TException;

    public MerchantsResponse_t getMerchantsByDealOfferId(String dealOfferId, com.talool.api.thrift.SearchOptions_t searchOptions) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException;

    public ValidateCodeResponse_t validateCode(String code, String dealOfferId) throws com.talool.api.thrift.TServiceException_t, org.apache.thrift.TException;

    public com.talool.api.thrift.TransactionResult_t purchaseWithCard(String dealOfferId, com.talool.api.thrift.PaymentDetail_t paymentDetail, Map<String,String> paymentProperties) throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException;

    public com.talool.api.thrift.TransactionResult_t purchaseWithCode(String dealOfferId, String paymentCode, Map<String,String> paymentProperties) throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createAccount(com.talool.api.thrift.Customer_t customer, String password, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createAccount_call> resultHandler) throws org.apache.thrift.TException;

    public void authenticate(String email, String password, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.authenticate_call> resultHandler) throws org.apache.thrift.TException;

    public void customerEmailExists(String email, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.customerEmailExists_call> resultHandler) throws org.apache.thrift.TException;

    public void addSocialAccount(com.talool.api.thrift.SocialAccount_t socialAccount, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addSocialAccount_call> resultHandler) throws org.apache.thrift.TException;

    public void removeSocialAccount(com.talool.api.thrift.SocialNetwork_t socialNetwork, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeSocialAccount_call> resultHandler) throws org.apache.thrift.TException;

    public void getMerchantAcquires(com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMerchantAcquires_call> resultHandler) throws org.apache.thrift.TException;

    public void getMerchantAcquiresWithLocation(com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.Location_t location, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMerchantAcquiresWithLocation_call> resultHandler) throws org.apache.thrift.TException;

    public void getMerchantAcquiresByCategory(int categoryId, com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMerchantAcquiresByCategory_call> resultHandler) throws org.apache.thrift.TException;

    public void getDealAcquires(String merchantId, com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDealAcquires_call> resultHandler) throws org.apache.thrift.TException;

    public void redeem(String dealAcquireId, com.talool.api.thrift.Location_t location, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.redeem_call> resultHandler) throws org.apache.thrift.TException;

    public void getDealOffers(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDealOffers_call> resultHandler) throws org.apache.thrift.TException;

    public void activateCode(String dealOfferid, String code, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.activateCode_call> resultHandler) throws org.apache.thrift.TException;

    public void getDealOffer(String dealOfferId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDealOffer_call> resultHandler) throws org.apache.thrift.TException;

    public void getDealsByDealOfferId(String dealOfferId, com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDealsByDealOfferId_call> resultHandler) throws org.apache.thrift.TException;

    public void purchaseDealOffer(String dealOfferId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.purchaseDealOffer_call> resultHandler) throws org.apache.thrift.TException;

    public void getMerchantsWithin(com.talool.api.thrift.Location_t location, int maxMiles, com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMerchantsWithin_call> resultHandler) throws org.apache.thrift.TException;

    public void addFavoriteMerchant(String merchantId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addFavoriteMerchant_call> resultHandler) throws org.apache.thrift.TException;

    public void removeFavoriteMerchant(String merchantId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeFavoriteMerchant_call> resultHandler) throws org.apache.thrift.TException;

    public void getFavoriteMerchants(com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFavoriteMerchants_call> resultHandler) throws org.apache.thrift.TException;

    public void getCategories(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCategories_call> resultHandler) throws org.apache.thrift.TException;

    public void giftToFacebook(String dealAcquireId, String facebookId, String receipientName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.giftToFacebook_call> resultHandler) throws org.apache.thrift.TException;

    public void giftToEmail(String dealAcquireId, String email, String receipientName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.giftToEmail_call> resultHandler) throws org.apache.thrift.TException;

    public void getGift(String giftId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getGift_call> resultHandler) throws org.apache.thrift.TException;

    public void acceptGift(String giftId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.acceptGift_call> resultHandler) throws org.apache.thrift.TException;

    public void rejectGift(String giftId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.rejectGift_call> resultHandler) throws org.apache.thrift.TException;

    public void getActivities(com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getActivities_call> resultHandler) throws org.apache.thrift.TException;

    public void getMessages(com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.Location_t location, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMessages_call> resultHandler) throws org.apache.thrift.TException;

    public void activityAction(String activityId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.activityAction_call> resultHandler) throws org.apache.thrift.TException;

    public void sendResetPasswordEmail(String email, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.sendResetPasswordEmail_call> resultHandler) throws org.apache.thrift.TException;

    public void resetPassword(String customerId, String resetPasswordCode, String newPassword, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.resetPassword_call> resultHandler) throws org.apache.thrift.TException;

    public void purchaseByCard(String dealOfferId, com.talool.api.thrift.PaymentDetail_t paymentDetail, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.purchaseByCard_call> resultHandler) throws org.apache.thrift.TException;

    public void purchaseByCode(String dealOfferId, String paymentCode, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.purchaseByCode_call> resultHandler) throws org.apache.thrift.TException;

    public void loginFacebook(String facebookId, String facebookAccessToken, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.loginFacebook_call> resultHandler) throws org.apache.thrift.TException;

    public void getDealOfferGeoSummariesWithin(com.talool.api.thrift.Location_t location, int maxMiles, com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.SearchOptions_t fallbackSearchOptions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDealOfferGeoSummariesWithin_call> resultHandler) throws org.apache.thrift.TException;

    public void getMerchantsByDealOfferId(String dealOfferId, com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMerchantsByDealOfferId_call> resultHandler) throws org.apache.thrift.TException;

    public void validateCode(String code, String dealOfferId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.validateCode_call> resultHandler) throws org.apache.thrift.TException;

    public void purchaseWithCard(String dealOfferId, com.talool.api.thrift.PaymentDetail_t paymentDetail, Map<String,String> paymentProperties, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.purchaseWithCard_call> resultHandler) throws org.apache.thrift.TException;

    public void purchaseWithCode(String dealOfferId, String paymentCode, Map<String,String> paymentProperties, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.purchaseWithCode_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public CTokenAccess_t createAccount(com.talool.api.thrift.Customer_t customer, String password) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_createAccount(customer, password);
      return recv_createAccount();
    }

    public void send_createAccount(com.talool.api.thrift.Customer_t customer, String password) throws org.apache.thrift.TException
    {
      createAccount_args args = new createAccount_args();
      args.setCustomer(customer);
      args.setPassword(password);
      sendBase("createAccount", args);
    }

    public CTokenAccess_t recv_createAccount() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      createAccount_result result = new createAccount_result();
      receiveBase(result, "createAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createAccount failed: unknown result");
    }

    public CTokenAccess_t authenticate(String email, String password) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_authenticate(email, password);
      return recv_authenticate();
    }

    public void send_authenticate(String email, String password) throws org.apache.thrift.TException
    {
      authenticate_args args = new authenticate_args();
      args.setEmail(email);
      args.setPassword(password);
      sendBase("authenticate", args);
    }

    public CTokenAccess_t recv_authenticate() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      authenticate_result result = new authenticate_result();
      receiveBase(result, "authenticate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "authenticate failed: unknown result");
    }

    public boolean customerEmailExists(String email) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_customerEmailExists(email);
      return recv_customerEmailExists();
    }

    public void send_customerEmailExists(String email) throws org.apache.thrift.TException
    {
      customerEmailExists_args args = new customerEmailExists_args();
      args.setEmail(email);
      sendBase("customerEmailExists", args);
    }

    public boolean recv_customerEmailExists() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      customerEmailExists_result result = new customerEmailExists_result();
      receiveBase(result, "customerEmailExists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "customerEmailExists failed: unknown result");
    }

    public void addSocialAccount(com.talool.api.thrift.SocialAccount_t socialAccount) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_addSocialAccount(socialAccount);
      recv_addSocialAccount();
    }

    public void send_addSocialAccount(com.talool.api.thrift.SocialAccount_t socialAccount) throws org.apache.thrift.TException
    {
      addSocialAccount_args args = new addSocialAccount_args();
      args.setSocialAccount(socialAccount);
      sendBase("addSocialAccount", args);
    }

    public void recv_addSocialAccount() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      addSocialAccount_result result = new addSocialAccount_result();
      receiveBase(result, "addSocialAccount");
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

    public void removeSocialAccount(com.talool.api.thrift.SocialNetwork_t socialNetwork) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_removeSocialAccount(socialNetwork);
      recv_removeSocialAccount();
    }

    public void send_removeSocialAccount(com.talool.api.thrift.SocialNetwork_t socialNetwork) throws org.apache.thrift.TException
    {
      removeSocialAccount_args args = new removeSocialAccount_args();
      args.setSocialNetwork(socialNetwork);
      sendBase("removeSocialAccount", args);
    }

    public void recv_removeSocialAccount() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      removeSocialAccount_result result = new removeSocialAccount_result();
      receiveBase(result, "removeSocialAccount");
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

    public List<com.talool.api.thrift.Merchant_t> getMerchantAcquires(com.talool.api.thrift.SearchOptions_t searchOptions) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_getMerchantAcquires(searchOptions);
      return recv_getMerchantAcquires();
    }

    public void send_getMerchantAcquires(com.talool.api.thrift.SearchOptions_t searchOptions) throws org.apache.thrift.TException
    {
      getMerchantAcquires_args args = new getMerchantAcquires_args();
      args.setSearchOptions(searchOptions);
      sendBase("getMerchantAcquires", args);
    }

    public List<com.talool.api.thrift.Merchant_t> recv_getMerchantAcquires() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      getMerchantAcquires_result result = new getMerchantAcquires_result();
      receiveBase(result, "getMerchantAcquires");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantAcquires failed: unknown result");
    }

    public List<com.talool.api.thrift.Merchant_t> getMerchantAcquiresWithLocation(com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.Location_t location) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_getMerchantAcquiresWithLocation(searchOptions, location);
      return recv_getMerchantAcquiresWithLocation();
    }

    public void send_getMerchantAcquiresWithLocation(com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.Location_t location) throws org.apache.thrift.TException
    {
      getMerchantAcquiresWithLocation_args args = new getMerchantAcquiresWithLocation_args();
      args.setSearchOptions(searchOptions);
      args.setLocation(location);
      sendBase("getMerchantAcquiresWithLocation", args);
    }

    public List<com.talool.api.thrift.Merchant_t> recv_getMerchantAcquiresWithLocation() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      getMerchantAcquiresWithLocation_result result = new getMerchantAcquiresWithLocation_result();
      receiveBase(result, "getMerchantAcquiresWithLocation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantAcquiresWithLocation failed: unknown result");
    }

    public List<com.talool.api.thrift.Merchant_t> getMerchantAcquiresByCategory(int categoryId, com.talool.api.thrift.SearchOptions_t searchOptions) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_getMerchantAcquiresByCategory(categoryId, searchOptions);
      return recv_getMerchantAcquiresByCategory();
    }

    public void send_getMerchantAcquiresByCategory(int categoryId, com.talool.api.thrift.SearchOptions_t searchOptions) throws org.apache.thrift.TException
    {
      getMerchantAcquiresByCategory_args args = new getMerchantAcquiresByCategory_args();
      args.setCategoryId(categoryId);
      args.setSearchOptions(searchOptions);
      sendBase("getMerchantAcquiresByCategory", args);
    }

    public List<com.talool.api.thrift.Merchant_t> recv_getMerchantAcquiresByCategory() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      getMerchantAcquiresByCategory_result result = new getMerchantAcquiresByCategory_result();
      receiveBase(result, "getMerchantAcquiresByCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantAcquiresByCategory failed: unknown result");
    }

    public List<com.talool.api.thrift.DealAcquire_t> getDealAcquires(String merchantId, com.talool.api.thrift.SearchOptions_t searchOptions) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_getDealAcquires(merchantId, searchOptions);
      return recv_getDealAcquires();
    }

    public void send_getDealAcquires(String merchantId, com.talool.api.thrift.SearchOptions_t searchOptions) throws org.apache.thrift.TException
    {
      getDealAcquires_args args = new getDealAcquires_args();
      args.setMerchantId(merchantId);
      args.setSearchOptions(searchOptions);
      sendBase("getDealAcquires", args);
    }

    public List<com.talool.api.thrift.DealAcquire_t> recv_getDealAcquires() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      getDealAcquires_result result = new getDealAcquires_result();
      receiveBase(result, "getDealAcquires");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDealAcquires failed: unknown result");
    }

    public String redeem(String dealAcquireId, com.talool.api.thrift.Location_t location) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_redeem(dealAcquireId, location);
      return recv_redeem();
    }

    public void send_redeem(String dealAcquireId, com.talool.api.thrift.Location_t location) throws org.apache.thrift.TException
    {
      redeem_args args = new redeem_args();
      args.setDealAcquireId(dealAcquireId);
      args.setLocation(location);
      sendBase("redeem", args);
    }

    public String recv_redeem() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      redeem_result result = new redeem_result();
      receiveBase(result, "redeem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "redeem failed: unknown result");
    }

    public List<com.talool.api.thrift.DealOffer_t> getDealOffers() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_getDealOffers();
      return recv_getDealOffers();
    }

    public void send_getDealOffers() throws org.apache.thrift.TException
    {
      getDealOffers_args args = new getDealOffers_args();
      sendBase("getDealOffers", args);
    }

    public List<com.talool.api.thrift.DealOffer_t> recv_getDealOffers() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      getDealOffers_result result = new getDealOffers_result();
      receiveBase(result, "getDealOffers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDealOffers failed: unknown result");
    }

    public void activateCode(String dealOfferid, String code) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_activateCode(dealOfferid, code);
      recv_activateCode();
    }

    public void send_activateCode(String dealOfferid, String code) throws org.apache.thrift.TException
    {
      activateCode_args args = new activateCode_args();
      args.setDealOfferid(dealOfferid);
      args.setCode(code);
      sendBase("activateCode", args);
    }

    public void recv_activateCode() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      activateCode_result result = new activateCode_result();
      receiveBase(result, "activateCode");
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

    public com.talool.api.thrift.DealOffer_t getDealOffer(String dealOfferId) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_getDealOffer(dealOfferId);
      return recv_getDealOffer();
    }

    public void send_getDealOffer(String dealOfferId) throws org.apache.thrift.TException
    {
      getDealOffer_args args = new getDealOffer_args();
      args.setDealOfferId(dealOfferId);
      sendBase("getDealOffer", args);
    }

    public com.talool.api.thrift.DealOffer_t recv_getDealOffer() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      getDealOffer_result result = new getDealOffer_result();
      receiveBase(result, "getDealOffer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDealOffer failed: unknown result");
    }

    public List<com.talool.api.thrift.Deal_t> getDealsByDealOfferId(String dealOfferId, com.talool.api.thrift.SearchOptions_t searchOptions) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_getDealsByDealOfferId(dealOfferId, searchOptions);
      return recv_getDealsByDealOfferId();
    }

    public void send_getDealsByDealOfferId(String dealOfferId, com.talool.api.thrift.SearchOptions_t searchOptions) throws org.apache.thrift.TException
    {
      getDealsByDealOfferId_args args = new getDealsByDealOfferId_args();
      args.setDealOfferId(dealOfferId);
      args.setSearchOptions(searchOptions);
      sendBase("getDealsByDealOfferId", args);
    }

    public List<com.talool.api.thrift.Deal_t> recv_getDealsByDealOfferId() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      getDealsByDealOfferId_result result = new getDealsByDealOfferId_result();
      receiveBase(result, "getDealsByDealOfferId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDealsByDealOfferId failed: unknown result");
    }

    public void purchaseDealOffer(String dealOfferId) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_purchaseDealOffer(dealOfferId);
      recv_purchaseDealOffer();
    }

    public void send_purchaseDealOffer(String dealOfferId) throws org.apache.thrift.TException
    {
      purchaseDealOffer_args args = new purchaseDealOffer_args();
      args.setDealOfferId(dealOfferId);
      sendBase("purchaseDealOffer", args);
    }

    public void recv_purchaseDealOffer() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      purchaseDealOffer_result result = new purchaseDealOffer_result();
      receiveBase(result, "purchaseDealOffer");
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

    public List<com.talool.api.thrift.Merchant_t> getMerchantsWithin(com.talool.api.thrift.Location_t location, int maxMiles, com.talool.api.thrift.SearchOptions_t searchOptions) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_getMerchantsWithin(location, maxMiles, searchOptions);
      return recv_getMerchantsWithin();
    }

    public void send_getMerchantsWithin(com.talool.api.thrift.Location_t location, int maxMiles, com.talool.api.thrift.SearchOptions_t searchOptions) throws org.apache.thrift.TException
    {
      getMerchantsWithin_args args = new getMerchantsWithin_args();
      args.setLocation(location);
      args.setMaxMiles(maxMiles);
      args.setSearchOptions(searchOptions);
      sendBase("getMerchantsWithin", args);
    }

    public List<com.talool.api.thrift.Merchant_t> recv_getMerchantsWithin() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      getMerchantsWithin_result result = new getMerchantsWithin_result();
      receiveBase(result, "getMerchantsWithin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantsWithin failed: unknown result");
    }

    public void addFavoriteMerchant(String merchantId) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_addFavoriteMerchant(merchantId);
      recv_addFavoriteMerchant();
    }

    public void send_addFavoriteMerchant(String merchantId) throws org.apache.thrift.TException
    {
      addFavoriteMerchant_args args = new addFavoriteMerchant_args();
      args.setMerchantId(merchantId);
      sendBase("addFavoriteMerchant", args);
    }

    public void recv_addFavoriteMerchant() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      addFavoriteMerchant_result result = new addFavoriteMerchant_result();
      receiveBase(result, "addFavoriteMerchant");
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

    public void removeFavoriteMerchant(String merchantId) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_removeFavoriteMerchant(merchantId);
      recv_removeFavoriteMerchant();
    }

    public void send_removeFavoriteMerchant(String merchantId) throws org.apache.thrift.TException
    {
      removeFavoriteMerchant_args args = new removeFavoriteMerchant_args();
      args.setMerchantId(merchantId);
      sendBase("removeFavoriteMerchant", args);
    }

    public void recv_removeFavoriteMerchant() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      removeFavoriteMerchant_result result = new removeFavoriteMerchant_result();
      receiveBase(result, "removeFavoriteMerchant");
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

    public List<com.talool.api.thrift.Merchant_t> getFavoriteMerchants(com.talool.api.thrift.SearchOptions_t searchOptions) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_getFavoriteMerchants(searchOptions);
      return recv_getFavoriteMerchants();
    }

    public void send_getFavoriteMerchants(com.talool.api.thrift.SearchOptions_t searchOptions) throws org.apache.thrift.TException
    {
      getFavoriteMerchants_args args = new getFavoriteMerchants_args();
      args.setSearchOptions(searchOptions);
      sendBase("getFavoriteMerchants", args);
    }

    public List<com.talool.api.thrift.Merchant_t> recv_getFavoriteMerchants() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      getFavoriteMerchants_result result = new getFavoriteMerchants_result();
      receiveBase(result, "getFavoriteMerchants");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFavoriteMerchants failed: unknown result");
    }

    public List<com.talool.api.thrift.Category_t> getCategories() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_getCategories();
      return recv_getCategories();
    }

    public void send_getCategories() throws org.apache.thrift.TException
    {
      getCategories_args args = new getCategories_args();
      sendBase("getCategories", args);
    }

    public List<com.talool.api.thrift.Category_t> recv_getCategories() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      getCategories_result result = new getCategories_result();
      receiveBase(result, "getCategories");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCategories failed: unknown result");
    }

    public String giftToFacebook(String dealAcquireId, String facebookId, String receipientName) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_giftToFacebook(dealAcquireId, facebookId, receipientName);
      return recv_giftToFacebook();
    }

    public void send_giftToFacebook(String dealAcquireId, String facebookId, String receipientName) throws org.apache.thrift.TException
    {
      giftToFacebook_args args = new giftToFacebook_args();
      args.setDealAcquireId(dealAcquireId);
      args.setFacebookId(facebookId);
      args.setReceipientName(receipientName);
      sendBase("giftToFacebook", args);
    }

    public String recv_giftToFacebook() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      giftToFacebook_result result = new giftToFacebook_result();
      receiveBase(result, "giftToFacebook");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "giftToFacebook failed: unknown result");
    }

    public String giftToEmail(String dealAcquireId, String email, String receipientName) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_giftToEmail(dealAcquireId, email, receipientName);
      return recv_giftToEmail();
    }

    public void send_giftToEmail(String dealAcquireId, String email, String receipientName) throws org.apache.thrift.TException
    {
      giftToEmail_args args = new giftToEmail_args();
      args.setDealAcquireId(dealAcquireId);
      args.setEmail(email);
      args.setReceipientName(receipientName);
      sendBase("giftToEmail", args);
    }

    public String recv_giftToEmail() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      giftToEmail_result result = new giftToEmail_result();
      receiveBase(result, "giftToEmail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "giftToEmail failed: unknown result");
    }

    public com.talool.api.thrift.Gift_t getGift(String giftId) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_getGift(giftId);
      return recv_getGift();
    }

    public void send_getGift(String giftId) throws org.apache.thrift.TException
    {
      getGift_args args = new getGift_args();
      args.setGiftId(giftId);
      sendBase("getGift", args);
    }

    public com.talool.api.thrift.Gift_t recv_getGift() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      getGift_result result = new getGift_result();
      receiveBase(result, "getGift");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGift failed: unknown result");
    }

    public com.talool.api.thrift.DealAcquire_t acceptGift(String giftId) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_acceptGift(giftId);
      return recv_acceptGift();
    }

    public void send_acceptGift(String giftId) throws org.apache.thrift.TException
    {
      acceptGift_args args = new acceptGift_args();
      args.setGiftId(giftId);
      sendBase("acceptGift", args);
    }

    public com.talool.api.thrift.DealAcquire_t recv_acceptGift() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      acceptGift_result result = new acceptGift_result();
      receiveBase(result, "acceptGift");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "acceptGift failed: unknown result");
    }

    public void rejectGift(String giftId) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_rejectGift(giftId);
      recv_rejectGift();
    }

    public void send_rejectGift(String giftId) throws org.apache.thrift.TException
    {
      rejectGift_args args = new rejectGift_args();
      args.setGiftId(giftId);
      sendBase("rejectGift", args);
    }

    public void recv_rejectGift() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      rejectGift_result result = new rejectGift_result();
      receiveBase(result, "rejectGift");
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

    public List<com.talool.api.thrift.Activity_t> getActivities(com.talool.api.thrift.SearchOptions_t searchOptions) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_getActivities(searchOptions);
      return recv_getActivities();
    }

    public void send_getActivities(com.talool.api.thrift.SearchOptions_t searchOptions) throws org.apache.thrift.TException
    {
      getActivities_args args = new getActivities_args();
      args.setSearchOptions(searchOptions);
      sendBase("getActivities", args);
    }

    public List<com.talool.api.thrift.Activity_t> recv_getActivities() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      getActivities_result result = new getActivities_result();
      receiveBase(result, "getActivities");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getActivities failed: unknown result");
    }

    public List<com.talool.api.thrift.Activity_t> getMessages(com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.Location_t location) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_getMessages(searchOptions, location);
      return recv_getMessages();
    }

    public void send_getMessages(com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.Location_t location) throws org.apache.thrift.TException
    {
      getMessages_args args = new getMessages_args();
      args.setSearchOptions(searchOptions);
      args.setLocation(location);
      sendBase("getMessages", args);
    }

    public List<com.talool.api.thrift.Activity_t> recv_getMessages() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      getMessages_result result = new getMessages_result();
      receiveBase(result, "getMessages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMessages failed: unknown result");
    }

    public void activityAction(String activityId) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_activityAction(activityId);
      recv_activityAction();
    }

    public void send_activityAction(String activityId) throws org.apache.thrift.TException
    {
      activityAction_args args = new activityAction_args();
      args.setActivityId(activityId);
      sendBase("activityAction", args);
    }

    public void recv_activityAction() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      activityAction_result result = new activityAction_result();
      receiveBase(result, "activityAction");
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

    public void sendResetPasswordEmail(String email) throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException
    {
      send_sendResetPasswordEmail(email);
      recv_sendResetPasswordEmail();
    }

    public void send_sendResetPasswordEmail(String email) throws org.apache.thrift.TException
    {
      sendResetPasswordEmail_args args = new sendResetPasswordEmail_args();
      args.setEmail(email);
      sendBase("sendResetPasswordEmail", args);
    }

    public void recv_sendResetPasswordEmail() throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException
    {
      sendResetPasswordEmail_result result = new sendResetPasswordEmail_result();
      receiveBase(result, "sendResetPasswordEmail");
      if (result.serviceException != null) {
        throw result.serviceException;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      return;
    }

    public CTokenAccess_t resetPassword(String customerId, String resetPasswordCode, String newPassword) throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException
    {
      send_resetPassword(customerId, resetPasswordCode, newPassword);
      return recv_resetPassword();
    }

    public void send_resetPassword(String customerId, String resetPasswordCode, String newPassword) throws org.apache.thrift.TException
    {
      resetPassword_args args = new resetPassword_args();
      args.setCustomerId(customerId);
      args.setResetPasswordCode(resetPasswordCode);
      args.setNewPassword(newPassword);
      sendBase("resetPassword", args);
    }

    public CTokenAccess_t recv_resetPassword() throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException
    {
      resetPassword_result result = new resetPassword_result();
      receiveBase(result, "resetPassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.serviceException != null) {
        throw result.serviceException;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resetPassword failed: unknown result");
    }

    public com.talool.api.thrift.TransactionResult_t purchaseByCard(String dealOfferId, com.talool.api.thrift.PaymentDetail_t paymentDetail) throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException
    {
      send_purchaseByCard(dealOfferId, paymentDetail);
      return recv_purchaseByCard();
    }

    public void send_purchaseByCard(String dealOfferId, com.talool.api.thrift.PaymentDetail_t paymentDetail) throws org.apache.thrift.TException
    {
      purchaseByCard_args args = new purchaseByCard_args();
      args.setDealOfferId(dealOfferId);
      args.setPaymentDetail(paymentDetail);
      sendBase("purchaseByCard", args);
    }

    public com.talool.api.thrift.TransactionResult_t recv_purchaseByCard() throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException
    {
      purchaseByCard_result result = new purchaseByCard_result();
      receiveBase(result, "purchaseByCard");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.serviceException != null) {
        throw result.serviceException;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "purchaseByCard failed: unknown result");
    }

    public com.talool.api.thrift.TransactionResult_t purchaseByCode(String dealOfferId, String paymentCode) throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException
    {
      send_purchaseByCode(dealOfferId, paymentCode);
      return recv_purchaseByCode();
    }

    public void send_purchaseByCode(String dealOfferId, String paymentCode) throws org.apache.thrift.TException
    {
      purchaseByCode_args args = new purchaseByCode_args();
      args.setDealOfferId(dealOfferId);
      args.setPaymentCode(paymentCode);
      sendBase("purchaseByCode", args);
    }

    public com.talool.api.thrift.TransactionResult_t recv_purchaseByCode() throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException
    {
      purchaseByCode_result result = new purchaseByCode_result();
      receiveBase(result, "purchaseByCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.serviceException != null) {
        throw result.serviceException;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "purchaseByCode failed: unknown result");
    }

    public CTokenAccessResponse_t loginFacebook(String facebookId, String facebookAccessToken) throws com.talool.api.thrift.TServiceException_t, org.apache.thrift.TException
    {
      send_loginFacebook(facebookId, facebookAccessToken);
      return recv_loginFacebook();
    }

    public void send_loginFacebook(String facebookId, String facebookAccessToken) throws org.apache.thrift.TException
    {
      loginFacebook_args args = new loginFacebook_args();
      args.setFacebookId(facebookId);
      args.setFacebookAccessToken(facebookAccessToken);
      sendBase("loginFacebook", args);
    }

    public CTokenAccessResponse_t recv_loginFacebook() throws com.talool.api.thrift.TServiceException_t, org.apache.thrift.TException
    {
      loginFacebook_result result = new loginFacebook_result();
      receiveBase(result, "loginFacebook");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loginFacebook failed: unknown result");
    }

    public DealOfferGeoSummariesResponse_t getDealOfferGeoSummariesWithin(com.talool.api.thrift.Location_t location, int maxMiles, com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.SearchOptions_t fallbackSearchOptions) throws com.talool.api.thrift.TServiceException_t, org.apache.thrift.TException
    {
      send_getDealOfferGeoSummariesWithin(location, maxMiles, searchOptions, fallbackSearchOptions);
      return recv_getDealOfferGeoSummariesWithin();
    }

    public void send_getDealOfferGeoSummariesWithin(com.talool.api.thrift.Location_t location, int maxMiles, com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.SearchOptions_t fallbackSearchOptions) throws org.apache.thrift.TException
    {
      getDealOfferGeoSummariesWithin_args args = new getDealOfferGeoSummariesWithin_args();
      args.setLocation(location);
      args.setMaxMiles(maxMiles);
      args.setSearchOptions(searchOptions);
      args.setFallbackSearchOptions(fallbackSearchOptions);
      sendBase("getDealOfferGeoSummariesWithin", args);
    }

    public DealOfferGeoSummariesResponse_t recv_getDealOfferGeoSummariesWithin() throws com.talool.api.thrift.TServiceException_t, org.apache.thrift.TException
    {
      getDealOfferGeoSummariesWithin_result result = new getDealOfferGeoSummariesWithin_result();
      receiveBase(result, "getDealOfferGeoSummariesWithin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDealOfferGeoSummariesWithin failed: unknown result");
    }

    public MerchantsResponse_t getMerchantsByDealOfferId(String dealOfferId, com.talool.api.thrift.SearchOptions_t searchOptions) throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      send_getMerchantsByDealOfferId(dealOfferId, searchOptions);
      return recv_getMerchantsByDealOfferId();
    }

    public void send_getMerchantsByDealOfferId(String dealOfferId, com.talool.api.thrift.SearchOptions_t searchOptions) throws org.apache.thrift.TException
    {
      getMerchantsByDealOfferId_args args = new getMerchantsByDealOfferId_args();
      args.setDealOfferId(dealOfferId);
      args.setSearchOptions(searchOptions);
      sendBase("getMerchantsByDealOfferId", args);
    }

    public MerchantsResponse_t recv_getMerchantsByDealOfferId() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException
    {
      getMerchantsByDealOfferId_result result = new getMerchantsByDealOfferId_result();
      receiveBase(result, "getMerchantsByDealOfferId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantsByDealOfferId failed: unknown result");
    }

    public ValidateCodeResponse_t validateCode(String code, String dealOfferId) throws com.talool.api.thrift.TServiceException_t, org.apache.thrift.TException
    {
      send_validateCode(code, dealOfferId);
      return recv_validateCode();
    }

    public void send_validateCode(String code, String dealOfferId) throws org.apache.thrift.TException
    {
      validateCode_args args = new validateCode_args();
      args.setCode(code);
      args.setDealOfferId(dealOfferId);
      sendBase("validateCode", args);
    }

    public ValidateCodeResponse_t recv_validateCode() throws com.talool.api.thrift.TServiceException_t, org.apache.thrift.TException
    {
      validateCode_result result = new validateCode_result();
      receiveBase(result, "validateCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "validateCode failed: unknown result");
    }

    public com.talool.api.thrift.TransactionResult_t purchaseWithCard(String dealOfferId, com.talool.api.thrift.PaymentDetail_t paymentDetail, Map<String,String> paymentProperties) throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException
    {
      send_purchaseWithCard(dealOfferId, paymentDetail, paymentProperties);
      return recv_purchaseWithCard();
    }

    public void send_purchaseWithCard(String dealOfferId, com.talool.api.thrift.PaymentDetail_t paymentDetail, Map<String,String> paymentProperties) throws org.apache.thrift.TException
    {
      purchaseWithCard_args args = new purchaseWithCard_args();
      args.setDealOfferId(dealOfferId);
      args.setPaymentDetail(paymentDetail);
      args.setPaymentProperties(paymentProperties);
      sendBase("purchaseWithCard", args);
    }

    public com.talool.api.thrift.TransactionResult_t recv_purchaseWithCard() throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException
    {
      purchaseWithCard_result result = new purchaseWithCard_result();
      receiveBase(result, "purchaseWithCard");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.serviceException != null) {
        throw result.serviceException;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "purchaseWithCard failed: unknown result");
    }

    public com.talool.api.thrift.TransactionResult_t purchaseWithCode(String dealOfferId, String paymentCode, Map<String,String> paymentProperties) throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException
    {
      send_purchaseWithCode(dealOfferId, paymentCode, paymentProperties);
      return recv_purchaseWithCode();
    }

    public void send_purchaseWithCode(String dealOfferId, String paymentCode, Map<String,String> paymentProperties) throws org.apache.thrift.TException
    {
      purchaseWithCode_args args = new purchaseWithCode_args();
      args.setDealOfferId(dealOfferId);
      args.setPaymentCode(paymentCode);
      args.setPaymentProperties(paymentProperties);
      sendBase("purchaseWithCode", args);
    }

    public com.talool.api.thrift.TransactionResult_t recv_purchaseWithCode() throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException
    {
      purchaseWithCode_result result = new purchaseWithCode_result();
      receiveBase(result, "purchaseWithCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.serviceException != null) {
        throw result.serviceException;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "purchaseWithCode failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createAccount(com.talool.api.thrift.Customer_t customer, String password, org.apache.thrift.async.AsyncMethodCallback<createAccount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createAccount_call method_call = new createAccount_call(customer, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.talool.api.thrift.Customer_t customer;
      private String password;
      public createAccount_call(com.talool.api.thrift.Customer_t customer, String password, org.apache.thrift.async.AsyncMethodCallback<createAccount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.customer = customer;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createAccount_args args = new createAccount_args();
        args.setCustomer(customer);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CTokenAccess_t getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createAccount();
      }
    }

    public void authenticate(String email, String password, org.apache.thrift.async.AsyncMethodCallback<authenticate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      authenticate_call method_call = new authenticate_call(email, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class authenticate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String email;
      private String password;
      public authenticate_call(String email, String password, org.apache.thrift.async.AsyncMethodCallback<authenticate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.email = email;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("authenticate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        authenticate_args args = new authenticate_args();
        args.setEmail(email);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CTokenAccess_t getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_authenticate();
      }
    }

    public void customerEmailExists(String email, org.apache.thrift.async.AsyncMethodCallback<customerEmailExists_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      customerEmailExists_call method_call = new customerEmailExists_call(email, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class customerEmailExists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String email;
      public customerEmailExists_call(String email, org.apache.thrift.async.AsyncMethodCallback<customerEmailExists_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.email = email;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("customerEmailExists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        customerEmailExists_args args = new customerEmailExists_args();
        args.setEmail(email);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_customerEmailExists();
      }
    }

    public void addSocialAccount(com.talool.api.thrift.SocialAccount_t socialAccount, org.apache.thrift.async.AsyncMethodCallback<addSocialAccount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSocialAccount_call method_call = new addSocialAccount_call(socialAccount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSocialAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.talool.api.thrift.SocialAccount_t socialAccount;
      public addSocialAccount_call(com.talool.api.thrift.SocialAccount_t socialAccount, org.apache.thrift.async.AsyncMethodCallback<addSocialAccount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.socialAccount = socialAccount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSocialAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSocialAccount_args args = new addSocialAccount_args();
        args.setSocialAccount(socialAccount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addSocialAccount();
      }
    }

    public void removeSocialAccount(com.talool.api.thrift.SocialNetwork_t socialNetwork, org.apache.thrift.async.AsyncMethodCallback<removeSocialAccount_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeSocialAccount_call method_call = new removeSocialAccount_call(socialNetwork, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeSocialAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.talool.api.thrift.SocialNetwork_t socialNetwork;
      public removeSocialAccount_call(com.talool.api.thrift.SocialNetwork_t socialNetwork, org.apache.thrift.async.AsyncMethodCallback<removeSocialAccount_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.socialNetwork = socialNetwork;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeSocialAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeSocialAccount_args args = new removeSocialAccount_args();
        args.setSocialNetwork(socialNetwork);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeSocialAccount();
      }
    }

    public void getMerchantAcquires(com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<getMerchantAcquires_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantAcquires_call method_call = new getMerchantAcquires_call(searchOptions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantAcquires_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.talool.api.thrift.SearchOptions_t searchOptions;
      public getMerchantAcquires_call(com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<getMerchantAcquires_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchOptions = searchOptions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantAcquires", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantAcquires_args args = new getMerchantAcquires_args();
        args.setSearchOptions(searchOptions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.talool.api.thrift.Merchant_t> getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantAcquires();
      }
    }

    public void getMerchantAcquiresWithLocation(com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.Location_t location, org.apache.thrift.async.AsyncMethodCallback<getMerchantAcquiresWithLocation_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantAcquiresWithLocation_call method_call = new getMerchantAcquiresWithLocation_call(searchOptions, location, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantAcquiresWithLocation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.talool.api.thrift.SearchOptions_t searchOptions;
      private com.talool.api.thrift.Location_t location;
      public getMerchantAcquiresWithLocation_call(com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.Location_t location, org.apache.thrift.async.AsyncMethodCallback<getMerchantAcquiresWithLocation_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchOptions = searchOptions;
        this.location = location;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantAcquiresWithLocation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantAcquiresWithLocation_args args = new getMerchantAcquiresWithLocation_args();
        args.setSearchOptions(searchOptions);
        args.setLocation(location);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.talool.api.thrift.Merchant_t> getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantAcquiresWithLocation();
      }
    }

    public void getMerchantAcquiresByCategory(int categoryId, com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<getMerchantAcquiresByCategory_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantAcquiresByCategory_call method_call = new getMerchantAcquiresByCategory_call(categoryId, searchOptions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantAcquiresByCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int categoryId;
      private com.talool.api.thrift.SearchOptions_t searchOptions;
      public getMerchantAcquiresByCategory_call(int categoryId, com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<getMerchantAcquiresByCategory_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.categoryId = categoryId;
        this.searchOptions = searchOptions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantAcquiresByCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantAcquiresByCategory_args args = new getMerchantAcquiresByCategory_args();
        args.setCategoryId(categoryId);
        args.setSearchOptions(searchOptions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.talool.api.thrift.Merchant_t> getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantAcquiresByCategory();
      }
    }

    public void getDealAcquires(String merchantId, com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<getDealAcquires_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDealAcquires_call method_call = new getDealAcquires_call(merchantId, searchOptions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDealAcquires_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      private com.talool.api.thrift.SearchOptions_t searchOptions;
      public getDealAcquires_call(String merchantId, com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<getDealAcquires_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
        this.searchOptions = searchOptions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDealAcquires", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDealAcquires_args args = new getDealAcquires_args();
        args.setMerchantId(merchantId);
        args.setSearchOptions(searchOptions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.talool.api.thrift.DealAcquire_t> getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDealAcquires();
      }
    }

    public void redeem(String dealAcquireId, com.talool.api.thrift.Location_t location, org.apache.thrift.async.AsyncMethodCallback<redeem_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      redeem_call method_call = new redeem_call(dealAcquireId, location, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class redeem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dealAcquireId;
      private com.talool.api.thrift.Location_t location;
      public redeem_call(String dealAcquireId, com.talool.api.thrift.Location_t location, org.apache.thrift.async.AsyncMethodCallback<redeem_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dealAcquireId = dealAcquireId;
        this.location = location;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("redeem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        redeem_args args = new redeem_args();
        args.setDealAcquireId(dealAcquireId);
        args.setLocation(location);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_redeem();
      }
    }

    public void getDealOffers(org.apache.thrift.async.AsyncMethodCallback<getDealOffers_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDealOffers_call method_call = new getDealOffers_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDealOffers_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getDealOffers_call(org.apache.thrift.async.AsyncMethodCallback<getDealOffers_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDealOffers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDealOffers_args args = new getDealOffers_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.talool.api.thrift.DealOffer_t> getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDealOffers();
      }
    }

    public void activateCode(String dealOfferid, String code, org.apache.thrift.async.AsyncMethodCallback<activateCode_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      activateCode_call method_call = new activateCode_call(dealOfferid, code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class activateCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dealOfferid;
      private String code;
      public activateCode_call(String dealOfferid, String code, org.apache.thrift.async.AsyncMethodCallback<activateCode_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dealOfferid = dealOfferid;
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("activateCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        activateCode_args args = new activateCode_args();
        args.setDealOfferid(dealOfferid);
        args.setCode(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_activateCode();
      }
    }

    public void getDealOffer(String dealOfferId, org.apache.thrift.async.AsyncMethodCallback<getDealOffer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDealOffer_call method_call = new getDealOffer_call(dealOfferId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDealOffer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dealOfferId;
      public getDealOffer_call(String dealOfferId, org.apache.thrift.async.AsyncMethodCallback<getDealOffer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dealOfferId = dealOfferId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDealOffer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDealOffer_args args = new getDealOffer_args();
        args.setDealOfferId(dealOfferId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.talool.api.thrift.DealOffer_t getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDealOffer();
      }
    }

    public void getDealsByDealOfferId(String dealOfferId, com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<getDealsByDealOfferId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDealsByDealOfferId_call method_call = new getDealsByDealOfferId_call(dealOfferId, searchOptions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDealsByDealOfferId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dealOfferId;
      private com.talool.api.thrift.SearchOptions_t searchOptions;
      public getDealsByDealOfferId_call(String dealOfferId, com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<getDealsByDealOfferId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dealOfferId = dealOfferId;
        this.searchOptions = searchOptions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDealsByDealOfferId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDealsByDealOfferId_args args = new getDealsByDealOfferId_args();
        args.setDealOfferId(dealOfferId);
        args.setSearchOptions(searchOptions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.talool.api.thrift.Deal_t> getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDealsByDealOfferId();
      }
    }

    public void purchaseDealOffer(String dealOfferId, org.apache.thrift.async.AsyncMethodCallback<purchaseDealOffer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      purchaseDealOffer_call method_call = new purchaseDealOffer_call(dealOfferId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class purchaseDealOffer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dealOfferId;
      public purchaseDealOffer_call(String dealOfferId, org.apache.thrift.async.AsyncMethodCallback<purchaseDealOffer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dealOfferId = dealOfferId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("purchaseDealOffer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        purchaseDealOffer_args args = new purchaseDealOffer_args();
        args.setDealOfferId(dealOfferId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_purchaseDealOffer();
      }
    }

    public void getMerchantsWithin(com.talool.api.thrift.Location_t location, int maxMiles, com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<getMerchantsWithin_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantsWithin_call method_call = new getMerchantsWithin_call(location, maxMiles, searchOptions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantsWithin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.talool.api.thrift.Location_t location;
      private int maxMiles;
      private com.talool.api.thrift.SearchOptions_t searchOptions;
      public getMerchantsWithin_call(com.talool.api.thrift.Location_t location, int maxMiles, com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<getMerchantsWithin_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.location = location;
        this.maxMiles = maxMiles;
        this.searchOptions = searchOptions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantsWithin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantsWithin_args args = new getMerchantsWithin_args();
        args.setLocation(location);
        args.setMaxMiles(maxMiles);
        args.setSearchOptions(searchOptions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.talool.api.thrift.Merchant_t> getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantsWithin();
      }
    }

    public void addFavoriteMerchant(String merchantId, org.apache.thrift.async.AsyncMethodCallback<addFavoriteMerchant_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addFavoriteMerchant_call method_call = new addFavoriteMerchant_call(merchantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addFavoriteMerchant_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      public addFavoriteMerchant_call(String merchantId, org.apache.thrift.async.AsyncMethodCallback<addFavoriteMerchant_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addFavoriteMerchant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addFavoriteMerchant_args args = new addFavoriteMerchant_args();
        args.setMerchantId(merchantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addFavoriteMerchant();
      }
    }

    public void removeFavoriteMerchant(String merchantId, org.apache.thrift.async.AsyncMethodCallback<removeFavoriteMerchant_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeFavoriteMerchant_call method_call = new removeFavoriteMerchant_call(merchantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeFavoriteMerchant_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      public removeFavoriteMerchant_call(String merchantId, org.apache.thrift.async.AsyncMethodCallback<removeFavoriteMerchant_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeFavoriteMerchant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeFavoriteMerchant_args args = new removeFavoriteMerchant_args();
        args.setMerchantId(merchantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeFavoriteMerchant();
      }
    }

    public void getFavoriteMerchants(com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<getFavoriteMerchants_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFavoriteMerchants_call method_call = new getFavoriteMerchants_call(searchOptions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFavoriteMerchants_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.talool.api.thrift.SearchOptions_t searchOptions;
      public getFavoriteMerchants_call(com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<getFavoriteMerchants_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchOptions = searchOptions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFavoriteMerchants", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFavoriteMerchants_args args = new getFavoriteMerchants_args();
        args.setSearchOptions(searchOptions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.talool.api.thrift.Merchant_t> getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFavoriteMerchants();
      }
    }

    public void getCategories(org.apache.thrift.async.AsyncMethodCallback<getCategories_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCategories_call method_call = new getCategories_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCategories_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getCategories_call(org.apache.thrift.async.AsyncMethodCallback<getCategories_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCategories", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCategories_args args = new getCategories_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.talool.api.thrift.Category_t> getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCategories();
      }
    }

    public void giftToFacebook(String dealAcquireId, String facebookId, String receipientName, org.apache.thrift.async.AsyncMethodCallback<giftToFacebook_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      giftToFacebook_call method_call = new giftToFacebook_call(dealAcquireId, facebookId, receipientName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class giftToFacebook_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dealAcquireId;
      private String facebookId;
      private String receipientName;
      public giftToFacebook_call(String dealAcquireId, String facebookId, String receipientName, org.apache.thrift.async.AsyncMethodCallback<giftToFacebook_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dealAcquireId = dealAcquireId;
        this.facebookId = facebookId;
        this.receipientName = receipientName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("giftToFacebook", org.apache.thrift.protocol.TMessageType.CALL, 0));
        giftToFacebook_args args = new giftToFacebook_args();
        args.setDealAcquireId(dealAcquireId);
        args.setFacebookId(facebookId);
        args.setReceipientName(receipientName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_giftToFacebook();
      }
    }

    public void giftToEmail(String dealAcquireId, String email, String receipientName, org.apache.thrift.async.AsyncMethodCallback<giftToEmail_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      giftToEmail_call method_call = new giftToEmail_call(dealAcquireId, email, receipientName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class giftToEmail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dealAcquireId;
      private String email;
      private String receipientName;
      public giftToEmail_call(String dealAcquireId, String email, String receipientName, org.apache.thrift.async.AsyncMethodCallback<giftToEmail_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dealAcquireId = dealAcquireId;
        this.email = email;
        this.receipientName = receipientName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("giftToEmail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        giftToEmail_args args = new giftToEmail_args();
        args.setDealAcquireId(dealAcquireId);
        args.setEmail(email);
        args.setReceipientName(receipientName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_giftToEmail();
      }
    }

    public void getGift(String giftId, org.apache.thrift.async.AsyncMethodCallback<getGift_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGift_call method_call = new getGift_call(giftId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGift_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String giftId;
      public getGift_call(String giftId, org.apache.thrift.async.AsyncMethodCallback<getGift_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.giftId = giftId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGift", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGift_args args = new getGift_args();
        args.setGiftId(giftId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.talool.api.thrift.Gift_t getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGift();
      }
    }

    public void acceptGift(String giftId, org.apache.thrift.async.AsyncMethodCallback<acceptGift_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      acceptGift_call method_call = new acceptGift_call(giftId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class acceptGift_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String giftId;
      public acceptGift_call(String giftId, org.apache.thrift.async.AsyncMethodCallback<acceptGift_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.giftId = giftId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("acceptGift", org.apache.thrift.protocol.TMessageType.CALL, 0));
        acceptGift_args args = new acceptGift_args();
        args.setGiftId(giftId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.talool.api.thrift.DealAcquire_t getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_acceptGift();
      }
    }

    public void rejectGift(String giftId, org.apache.thrift.async.AsyncMethodCallback<rejectGift_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rejectGift_call method_call = new rejectGift_call(giftId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rejectGift_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String giftId;
      public rejectGift_call(String giftId, org.apache.thrift.async.AsyncMethodCallback<rejectGift_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.giftId = giftId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rejectGift", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rejectGift_args args = new rejectGift_args();
        args.setGiftId(giftId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_rejectGift();
      }
    }

    public void getActivities(com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<getActivities_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getActivities_call method_call = new getActivities_call(searchOptions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getActivities_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.talool.api.thrift.SearchOptions_t searchOptions;
      public getActivities_call(com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<getActivities_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchOptions = searchOptions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getActivities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getActivities_args args = new getActivities_args();
        args.setSearchOptions(searchOptions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.talool.api.thrift.Activity_t> getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getActivities();
      }
    }

    public void getMessages(com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.Location_t location, org.apache.thrift.async.AsyncMethodCallback<getMessages_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMessages_call method_call = new getMessages_call(searchOptions, location, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMessages_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.talool.api.thrift.SearchOptions_t searchOptions;
      private com.talool.api.thrift.Location_t location;
      public getMessages_call(com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.Location_t location, org.apache.thrift.async.AsyncMethodCallback<getMessages_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchOptions = searchOptions;
        this.location = location;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMessages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMessages_args args = new getMessages_args();
        args.setSearchOptions(searchOptions);
        args.setLocation(location);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.talool.api.thrift.Activity_t> getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMessages();
      }
    }

    public void activityAction(String activityId, org.apache.thrift.async.AsyncMethodCallback<activityAction_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      activityAction_call method_call = new activityAction_call(activityId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class activityAction_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String activityId;
      public activityAction_call(String activityId, org.apache.thrift.async.AsyncMethodCallback<activityAction_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.activityId = activityId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("activityAction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        activityAction_args args = new activityAction_args();
        args.setActivityId(activityId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_activityAction();
      }
    }

    public void sendResetPasswordEmail(String email, org.apache.thrift.async.AsyncMethodCallback<sendResetPasswordEmail_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendResetPasswordEmail_call method_call = new sendResetPasswordEmail_call(email, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendResetPasswordEmail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String email;
      public sendResetPasswordEmail_call(String email, org.apache.thrift.async.AsyncMethodCallback<sendResetPasswordEmail_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.email = email;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendResetPasswordEmail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendResetPasswordEmail_args args = new sendResetPasswordEmail_args();
        args.setEmail(email);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendResetPasswordEmail();
      }
    }

    public void resetPassword(String customerId, String resetPasswordCode, String newPassword, org.apache.thrift.async.AsyncMethodCallback<resetPassword_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resetPassword_call method_call = new resetPassword_call(customerId, resetPasswordCode, newPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resetPassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String customerId;
      private String resetPasswordCode;
      private String newPassword;
      public resetPassword_call(String customerId, String resetPasswordCode, String newPassword, org.apache.thrift.async.AsyncMethodCallback<resetPassword_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.customerId = customerId;
        this.resetPasswordCode = resetPasswordCode;
        this.newPassword = newPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resetPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resetPassword_args args = new resetPassword_args();
        args.setCustomerId(customerId);
        args.setResetPasswordCode(resetPasswordCode);
        args.setNewPassword(newPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CTokenAccess_t getResult() throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resetPassword();
      }
    }

    public void purchaseByCard(String dealOfferId, com.talool.api.thrift.PaymentDetail_t paymentDetail, org.apache.thrift.async.AsyncMethodCallback<purchaseByCard_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      purchaseByCard_call method_call = new purchaseByCard_call(dealOfferId, paymentDetail, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class purchaseByCard_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dealOfferId;
      private com.talool.api.thrift.PaymentDetail_t paymentDetail;
      public purchaseByCard_call(String dealOfferId, com.talool.api.thrift.PaymentDetail_t paymentDetail, org.apache.thrift.async.AsyncMethodCallback<purchaseByCard_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dealOfferId = dealOfferId;
        this.paymentDetail = paymentDetail;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("purchaseByCard", org.apache.thrift.protocol.TMessageType.CALL, 0));
        purchaseByCard_args args = new purchaseByCard_args();
        args.setDealOfferId(dealOfferId);
        args.setPaymentDetail(paymentDetail);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.talool.api.thrift.TransactionResult_t getResult() throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_purchaseByCard();
      }
    }

    public void purchaseByCode(String dealOfferId, String paymentCode, org.apache.thrift.async.AsyncMethodCallback<purchaseByCode_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      purchaseByCode_call method_call = new purchaseByCode_call(dealOfferId, paymentCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class purchaseByCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dealOfferId;
      private String paymentCode;
      public purchaseByCode_call(String dealOfferId, String paymentCode, org.apache.thrift.async.AsyncMethodCallback<purchaseByCode_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dealOfferId = dealOfferId;
        this.paymentCode = paymentCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("purchaseByCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        purchaseByCode_args args = new purchaseByCode_args();
        args.setDealOfferId(dealOfferId);
        args.setPaymentCode(paymentCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.talool.api.thrift.TransactionResult_t getResult() throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_purchaseByCode();
      }
    }

    public void loginFacebook(String facebookId, String facebookAccessToken, org.apache.thrift.async.AsyncMethodCallback<loginFacebook_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loginFacebook_call method_call = new loginFacebook_call(facebookId, facebookAccessToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loginFacebook_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String facebookId;
      private String facebookAccessToken;
      public loginFacebook_call(String facebookId, String facebookAccessToken, org.apache.thrift.async.AsyncMethodCallback<loginFacebook_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.facebookId = facebookId;
        this.facebookAccessToken = facebookAccessToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loginFacebook", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loginFacebook_args args = new loginFacebook_args();
        args.setFacebookId(facebookId);
        args.setFacebookAccessToken(facebookAccessToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CTokenAccessResponse_t getResult() throws com.talool.api.thrift.TServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loginFacebook();
      }
    }

    public void getDealOfferGeoSummariesWithin(com.talool.api.thrift.Location_t location, int maxMiles, com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.SearchOptions_t fallbackSearchOptions, org.apache.thrift.async.AsyncMethodCallback<getDealOfferGeoSummariesWithin_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDealOfferGeoSummariesWithin_call method_call = new getDealOfferGeoSummariesWithin_call(location, maxMiles, searchOptions, fallbackSearchOptions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDealOfferGeoSummariesWithin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.talool.api.thrift.Location_t location;
      private int maxMiles;
      private com.talool.api.thrift.SearchOptions_t searchOptions;
      private com.talool.api.thrift.SearchOptions_t fallbackSearchOptions;
      public getDealOfferGeoSummariesWithin_call(com.talool.api.thrift.Location_t location, int maxMiles, com.talool.api.thrift.SearchOptions_t searchOptions, com.talool.api.thrift.SearchOptions_t fallbackSearchOptions, org.apache.thrift.async.AsyncMethodCallback<getDealOfferGeoSummariesWithin_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.location = location;
        this.maxMiles = maxMiles;
        this.searchOptions = searchOptions;
        this.fallbackSearchOptions = fallbackSearchOptions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDealOfferGeoSummariesWithin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDealOfferGeoSummariesWithin_args args = new getDealOfferGeoSummariesWithin_args();
        args.setLocation(location);
        args.setMaxMiles(maxMiles);
        args.setSearchOptions(searchOptions);
        args.setFallbackSearchOptions(fallbackSearchOptions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DealOfferGeoSummariesResponse_t getResult() throws com.talool.api.thrift.TServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDealOfferGeoSummariesWithin();
      }
    }

    public void getMerchantsByDealOfferId(String dealOfferId, com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<getMerchantsByDealOfferId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantsByDealOfferId_call method_call = new getMerchantsByDealOfferId_call(dealOfferId, searchOptions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantsByDealOfferId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dealOfferId;
      private com.talool.api.thrift.SearchOptions_t searchOptions;
      public getMerchantsByDealOfferId_call(String dealOfferId, com.talool.api.thrift.SearchOptions_t searchOptions, org.apache.thrift.async.AsyncMethodCallback<getMerchantsByDealOfferId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dealOfferId = dealOfferId;
        this.searchOptions = searchOptions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantsByDealOfferId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantsByDealOfferId_args args = new getMerchantsByDealOfferId_args();
        args.setDealOfferId(dealOfferId);
        args.setSearchOptions(searchOptions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MerchantsResponse_t getResult() throws com.talool.api.thrift.ServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantsByDealOfferId();
      }
    }

    public void validateCode(String code, String dealOfferId, org.apache.thrift.async.AsyncMethodCallback<validateCode_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      validateCode_call method_call = new validateCode_call(code, dealOfferId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class validateCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      private String dealOfferId;
      public validateCode_call(String code, String dealOfferId, org.apache.thrift.async.AsyncMethodCallback<validateCode_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
        this.dealOfferId = dealOfferId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("validateCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        validateCode_args args = new validateCode_args();
        args.setCode(code);
        args.setDealOfferId(dealOfferId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ValidateCodeResponse_t getResult() throws com.talool.api.thrift.TServiceException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_validateCode();
      }
    }

    public void purchaseWithCard(String dealOfferId, com.talool.api.thrift.PaymentDetail_t paymentDetail, Map<String,String> paymentProperties, org.apache.thrift.async.AsyncMethodCallback<purchaseWithCard_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      purchaseWithCard_call method_call = new purchaseWithCard_call(dealOfferId, paymentDetail, paymentProperties, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class purchaseWithCard_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dealOfferId;
      private com.talool.api.thrift.PaymentDetail_t paymentDetail;
      private Map<String,String> paymentProperties;
      public purchaseWithCard_call(String dealOfferId, com.talool.api.thrift.PaymentDetail_t paymentDetail, Map<String,String> paymentProperties, org.apache.thrift.async.AsyncMethodCallback<purchaseWithCard_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dealOfferId = dealOfferId;
        this.paymentDetail = paymentDetail;
        this.paymentProperties = paymentProperties;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("purchaseWithCard", org.apache.thrift.protocol.TMessageType.CALL, 0));
        purchaseWithCard_args args = new purchaseWithCard_args();
        args.setDealOfferId(dealOfferId);
        args.setPaymentDetail(paymentDetail);
        args.setPaymentProperties(paymentProperties);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.talool.api.thrift.TransactionResult_t getResult() throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_purchaseWithCard();
      }
    }

    public void purchaseWithCode(String dealOfferId, String paymentCode, Map<String,String> paymentProperties, org.apache.thrift.async.AsyncMethodCallback<purchaseWithCode_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      purchaseWithCode_call method_call = new purchaseWithCode_call(dealOfferId, paymentCode, paymentProperties, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class purchaseWithCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String dealOfferId;
      private String paymentCode;
      private Map<String,String> paymentProperties;
      public purchaseWithCode_call(String dealOfferId, String paymentCode, Map<String,String> paymentProperties, org.apache.thrift.async.AsyncMethodCallback<purchaseWithCode_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dealOfferId = dealOfferId;
        this.paymentCode = paymentCode;
        this.paymentProperties = paymentProperties;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("purchaseWithCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        purchaseWithCode_args args = new purchaseWithCode_args();
        args.setDealOfferId(dealOfferId);
        args.setPaymentCode(paymentCode);
        args.setPaymentProperties(paymentProperties);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.talool.api.thrift.TransactionResult_t getResult() throws com.talool.api.thrift.TServiceException_t, com.talool.api.thrift.TUserException_t, com.talool.api.thrift.TNotFoundException_t, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_purchaseWithCode();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createAccount", new createAccount());
      processMap.put("authenticate", new authenticate());
      processMap.put("customerEmailExists", new customerEmailExists());
      processMap.put("addSocialAccount", new addSocialAccount());
      processMap.put("removeSocialAccount", new removeSocialAccount());
      processMap.put("getMerchantAcquires", new getMerchantAcquires());
      processMap.put("getMerchantAcquiresWithLocation", new getMerchantAcquiresWithLocation());
      processMap.put("getMerchantAcquiresByCategory", new getMerchantAcquiresByCategory());
      processMap.put("getDealAcquires", new getDealAcquires());
      processMap.put("redeem", new redeem());
      processMap.put("getDealOffers", new getDealOffers());
      processMap.put("activateCode", new activateCode());
      processMap.put("getDealOffer", new getDealOffer());
      processMap.put("getDealsByDealOfferId", new getDealsByDealOfferId());
      processMap.put("purchaseDealOffer", new purchaseDealOffer());
      processMap.put("getMerchantsWithin", new getMerchantsWithin());
      processMap.put("addFavoriteMerchant", new addFavoriteMerchant());
      processMap.put("removeFavoriteMerchant", new removeFavoriteMerchant());
      processMap.put("getFavoriteMerchants", new getFavoriteMerchants());
      processMap.put("getCategories", new getCategories());
      processMap.put("giftToFacebook", new giftToFacebook());
      processMap.put("giftToEmail", new giftToEmail());
      processMap.put("getGift", new getGift());
      processMap.put("acceptGift", new acceptGift());
      processMap.put("rejectGift", new rejectGift());
      processMap.put("getActivities", new getActivities());
      processMap.put("getMessages", new getMessages());
      processMap.put("activityAction", new activityAction());
      processMap.put("sendResetPasswordEmail", new sendResetPasswordEmail());
      processMap.put("resetPassword", new resetPassword());
      processMap.put("purchaseByCard", new purchaseByCard());
      processMap.put("purchaseByCode", new purchaseByCode());
      processMap.put("loginFacebook", new loginFacebook());
      processMap.put("getDealOfferGeoSummariesWithin", new getDealOfferGeoSummariesWithin());
      processMap.put("getMerchantsByDealOfferId", new getMerchantsByDealOfferId());
      processMap.put("validateCode", new validateCode());
      processMap.put("purchaseWithCard", new purchaseWithCard());
      processMap.put("purchaseWithCode", new purchaseWithCode());
      return processMap;
    }

    public static class createAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createAccount_args> {
      public createAccount() {
        super("createAccount");
      }

      public createAccount_args getEmptyArgsInstance() {
        return new createAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createAccount_result getResult(I iface, createAccount_args args) throws org.apache.thrift.TException {
        createAccount_result result = new createAccount_result();
        try {
          result.success = iface.createAccount(args.customer, args.password);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class authenticate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, authenticate_args> {
      public authenticate() {
        super("authenticate");
      }

      public authenticate_args getEmptyArgsInstance() {
        return new authenticate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public authenticate_result getResult(I iface, authenticate_args args) throws org.apache.thrift.TException {
        authenticate_result result = new authenticate_result();
        try {
          result.success = iface.authenticate(args.email, args.password);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class customerEmailExists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, customerEmailExists_args> {
      public customerEmailExists() {
        super("customerEmailExists");
      }

      public customerEmailExists_args getEmptyArgsInstance() {
        return new customerEmailExists_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public customerEmailExists_result getResult(I iface, customerEmailExists_args args) throws org.apache.thrift.TException {
        customerEmailExists_result result = new customerEmailExists_result();
        try {
          result.success = iface.customerEmailExists(args.email);
          result.setSuccessIsSet(true);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class addSocialAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSocialAccount_args> {
      public addSocialAccount() {
        super("addSocialAccount");
      }

      public addSocialAccount_args getEmptyArgsInstance() {
        return new addSocialAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSocialAccount_result getResult(I iface, addSocialAccount_args args) throws org.apache.thrift.TException {
        addSocialAccount_result result = new addSocialAccount_result();
        try {
          iface.addSocialAccount(args.socialAccount);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class removeSocialAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeSocialAccount_args> {
      public removeSocialAccount() {
        super("removeSocialAccount");
      }

      public removeSocialAccount_args getEmptyArgsInstance() {
        return new removeSocialAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeSocialAccount_result getResult(I iface, removeSocialAccount_args args) throws org.apache.thrift.TException {
        removeSocialAccount_result result = new removeSocialAccount_result();
        try {
          iface.removeSocialAccount(args.socialNetwork);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getMerchantAcquires<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantAcquires_args> {
      public getMerchantAcquires() {
        super("getMerchantAcquires");
      }

      public getMerchantAcquires_args getEmptyArgsInstance() {
        return new getMerchantAcquires_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantAcquires_result getResult(I iface, getMerchantAcquires_args args) throws org.apache.thrift.TException {
        getMerchantAcquires_result result = new getMerchantAcquires_result();
        try {
          result.success = iface.getMerchantAcquires(args.searchOptions);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getMerchantAcquiresWithLocation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantAcquiresWithLocation_args> {
      public getMerchantAcquiresWithLocation() {
        super("getMerchantAcquiresWithLocation");
      }

      public getMerchantAcquiresWithLocation_args getEmptyArgsInstance() {
        return new getMerchantAcquiresWithLocation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantAcquiresWithLocation_result getResult(I iface, getMerchantAcquiresWithLocation_args args) throws org.apache.thrift.TException {
        getMerchantAcquiresWithLocation_result result = new getMerchantAcquiresWithLocation_result();
        try {
          result.success = iface.getMerchantAcquiresWithLocation(args.searchOptions, args.location);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getMerchantAcquiresByCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantAcquiresByCategory_args> {
      public getMerchantAcquiresByCategory() {
        super("getMerchantAcquiresByCategory");
      }

      public getMerchantAcquiresByCategory_args getEmptyArgsInstance() {
        return new getMerchantAcquiresByCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantAcquiresByCategory_result getResult(I iface, getMerchantAcquiresByCategory_args args) throws org.apache.thrift.TException {
        getMerchantAcquiresByCategory_result result = new getMerchantAcquiresByCategory_result();
        try {
          result.success = iface.getMerchantAcquiresByCategory(args.categoryId, args.searchOptions);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getDealAcquires<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDealAcquires_args> {
      public getDealAcquires() {
        super("getDealAcquires");
      }

      public getDealAcquires_args getEmptyArgsInstance() {
        return new getDealAcquires_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDealAcquires_result getResult(I iface, getDealAcquires_args args) throws org.apache.thrift.TException {
        getDealAcquires_result result = new getDealAcquires_result();
        try {
          result.success = iface.getDealAcquires(args.merchantId, args.searchOptions);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class redeem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, redeem_args> {
      public redeem() {
        super("redeem");
      }

      public redeem_args getEmptyArgsInstance() {
        return new redeem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public redeem_result getResult(I iface, redeem_args args) throws org.apache.thrift.TException {
        redeem_result result = new redeem_result();
        try {
          result.success = iface.redeem(args.dealAcquireId, args.location);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getDealOffers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDealOffers_args> {
      public getDealOffers() {
        super("getDealOffers");
      }

      public getDealOffers_args getEmptyArgsInstance() {
        return new getDealOffers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDealOffers_result getResult(I iface, getDealOffers_args args) throws org.apache.thrift.TException {
        getDealOffers_result result = new getDealOffers_result();
        try {
          result.success = iface.getDealOffers();
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class activateCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, activateCode_args> {
      public activateCode() {
        super("activateCode");
      }

      public activateCode_args getEmptyArgsInstance() {
        return new activateCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public activateCode_result getResult(I iface, activateCode_args args) throws org.apache.thrift.TException {
        activateCode_result result = new activateCode_result();
        try {
          iface.activateCode(args.dealOfferid, args.code);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getDealOffer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDealOffer_args> {
      public getDealOffer() {
        super("getDealOffer");
      }

      public getDealOffer_args getEmptyArgsInstance() {
        return new getDealOffer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDealOffer_result getResult(I iface, getDealOffer_args args) throws org.apache.thrift.TException {
        getDealOffer_result result = new getDealOffer_result();
        try {
          result.success = iface.getDealOffer(args.dealOfferId);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getDealsByDealOfferId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDealsByDealOfferId_args> {
      public getDealsByDealOfferId() {
        super("getDealsByDealOfferId");
      }

      public getDealsByDealOfferId_args getEmptyArgsInstance() {
        return new getDealsByDealOfferId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDealsByDealOfferId_result getResult(I iface, getDealsByDealOfferId_args args) throws org.apache.thrift.TException {
        getDealsByDealOfferId_result result = new getDealsByDealOfferId_result();
        try {
          result.success = iface.getDealsByDealOfferId(args.dealOfferId, args.searchOptions);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class purchaseDealOffer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, purchaseDealOffer_args> {
      public purchaseDealOffer() {
        super("purchaseDealOffer");
      }

      public purchaseDealOffer_args getEmptyArgsInstance() {
        return new purchaseDealOffer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public purchaseDealOffer_result getResult(I iface, purchaseDealOffer_args args) throws org.apache.thrift.TException {
        purchaseDealOffer_result result = new purchaseDealOffer_result();
        try {
          iface.purchaseDealOffer(args.dealOfferId);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getMerchantsWithin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantsWithin_args> {
      public getMerchantsWithin() {
        super("getMerchantsWithin");
      }

      public getMerchantsWithin_args getEmptyArgsInstance() {
        return new getMerchantsWithin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantsWithin_result getResult(I iface, getMerchantsWithin_args args) throws org.apache.thrift.TException {
        getMerchantsWithin_result result = new getMerchantsWithin_result();
        try {
          result.success = iface.getMerchantsWithin(args.location, args.maxMiles, args.searchOptions);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class addFavoriteMerchant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addFavoriteMerchant_args> {
      public addFavoriteMerchant() {
        super("addFavoriteMerchant");
      }

      public addFavoriteMerchant_args getEmptyArgsInstance() {
        return new addFavoriteMerchant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addFavoriteMerchant_result getResult(I iface, addFavoriteMerchant_args args) throws org.apache.thrift.TException {
        addFavoriteMerchant_result result = new addFavoriteMerchant_result();
        try {
          iface.addFavoriteMerchant(args.merchantId);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class removeFavoriteMerchant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeFavoriteMerchant_args> {
      public removeFavoriteMerchant() {
        super("removeFavoriteMerchant");
      }

      public removeFavoriteMerchant_args getEmptyArgsInstance() {
        return new removeFavoriteMerchant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeFavoriteMerchant_result getResult(I iface, removeFavoriteMerchant_args args) throws org.apache.thrift.TException {
        removeFavoriteMerchant_result result = new removeFavoriteMerchant_result();
        try {
          iface.removeFavoriteMerchant(args.merchantId);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getFavoriteMerchants<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFavoriteMerchants_args> {
      public getFavoriteMerchants() {
        super("getFavoriteMerchants");
      }

      public getFavoriteMerchants_args getEmptyArgsInstance() {
        return new getFavoriteMerchants_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFavoriteMerchants_result getResult(I iface, getFavoriteMerchants_args args) throws org.apache.thrift.TException {
        getFavoriteMerchants_result result = new getFavoriteMerchants_result();
        try {
          result.success = iface.getFavoriteMerchants(args.searchOptions);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getCategories<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCategories_args> {
      public getCategories() {
        super("getCategories");
      }

      public getCategories_args getEmptyArgsInstance() {
        return new getCategories_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCategories_result getResult(I iface, getCategories_args args) throws org.apache.thrift.TException {
        getCategories_result result = new getCategories_result();
        try {
          result.success = iface.getCategories();
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class giftToFacebook<I extends Iface> extends org.apache.thrift.ProcessFunction<I, giftToFacebook_args> {
      public giftToFacebook() {
        super("giftToFacebook");
      }

      public giftToFacebook_args getEmptyArgsInstance() {
        return new giftToFacebook_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public giftToFacebook_result getResult(I iface, giftToFacebook_args args) throws org.apache.thrift.TException {
        giftToFacebook_result result = new giftToFacebook_result();
        try {
          result.success = iface.giftToFacebook(args.dealAcquireId, args.facebookId, args.receipientName);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class giftToEmail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, giftToEmail_args> {
      public giftToEmail() {
        super("giftToEmail");
      }

      public giftToEmail_args getEmptyArgsInstance() {
        return new giftToEmail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public giftToEmail_result getResult(I iface, giftToEmail_args args) throws org.apache.thrift.TException {
        giftToEmail_result result = new giftToEmail_result();
        try {
          result.success = iface.giftToEmail(args.dealAcquireId, args.email, args.receipientName);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getGift<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGift_args> {
      public getGift() {
        super("getGift");
      }

      public getGift_args getEmptyArgsInstance() {
        return new getGift_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getGift_result getResult(I iface, getGift_args args) throws org.apache.thrift.TException {
        getGift_result result = new getGift_result();
        try {
          result.success = iface.getGift(args.giftId);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class acceptGift<I extends Iface> extends org.apache.thrift.ProcessFunction<I, acceptGift_args> {
      public acceptGift() {
        super("acceptGift");
      }

      public acceptGift_args getEmptyArgsInstance() {
        return new acceptGift_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public acceptGift_result getResult(I iface, acceptGift_args args) throws org.apache.thrift.TException {
        acceptGift_result result = new acceptGift_result();
        try {
          result.success = iface.acceptGift(args.giftId);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class rejectGift<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rejectGift_args> {
      public rejectGift() {
        super("rejectGift");
      }

      public rejectGift_args getEmptyArgsInstance() {
        return new rejectGift_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rejectGift_result getResult(I iface, rejectGift_args args) throws org.apache.thrift.TException {
        rejectGift_result result = new rejectGift_result();
        try {
          iface.rejectGift(args.giftId);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getActivities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getActivities_args> {
      public getActivities() {
        super("getActivities");
      }

      public getActivities_args getEmptyArgsInstance() {
        return new getActivities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getActivities_result getResult(I iface, getActivities_args args) throws org.apache.thrift.TException {
        getActivities_result result = new getActivities_result();
        try {
          result.success = iface.getActivities(args.searchOptions);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getMessages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMessages_args> {
      public getMessages() {
        super("getMessages");
      }

      public getMessages_args getEmptyArgsInstance() {
        return new getMessages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMessages_result getResult(I iface, getMessages_args args) throws org.apache.thrift.TException {
        getMessages_result result = new getMessages_result();
        try {
          result.success = iface.getMessages(args.searchOptions, args.location);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class activityAction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, activityAction_args> {
      public activityAction() {
        super("activityAction");
      }

      public activityAction_args getEmptyArgsInstance() {
        return new activityAction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public activityAction_result getResult(I iface, activityAction_args args) throws org.apache.thrift.TException {
        activityAction_result result = new activityAction_result();
        try {
          iface.activityAction(args.activityId);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class sendResetPasswordEmail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendResetPasswordEmail_args> {
      public sendResetPasswordEmail() {
        super("sendResetPasswordEmail");
      }

      public sendResetPasswordEmail_args getEmptyArgsInstance() {
        return new sendResetPasswordEmail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendResetPasswordEmail_result getResult(I iface, sendResetPasswordEmail_args args) throws org.apache.thrift.TException {
        sendResetPasswordEmail_result result = new sendResetPasswordEmail_result();
        try {
          iface.sendResetPasswordEmail(args.email);
        } catch (com.talool.api.thrift.TServiceException_t serviceException) {
          result.serviceException = serviceException;
        } catch (com.talool.api.thrift.TUserException_t userException) {
          result.userException = userException;
        } catch (com.talool.api.thrift.TNotFoundException_t notFoundException) {
          result.notFoundException = notFoundException;
        }
        return result;
      }
    }

    public static class resetPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resetPassword_args> {
      public resetPassword() {
        super("resetPassword");
      }

      public resetPassword_args getEmptyArgsInstance() {
        return new resetPassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resetPassword_result getResult(I iface, resetPassword_args args) throws org.apache.thrift.TException {
        resetPassword_result result = new resetPassword_result();
        try {
          result.success = iface.resetPassword(args.customerId, args.resetPasswordCode, args.newPassword);
        } catch (com.talool.api.thrift.TServiceException_t serviceException) {
          result.serviceException = serviceException;
        } catch (com.talool.api.thrift.TUserException_t userException) {
          result.userException = userException;
        } catch (com.talool.api.thrift.TNotFoundException_t notFoundException) {
          result.notFoundException = notFoundException;
        }
        return result;
      }
    }

    public static class purchaseByCard<I extends Iface> extends org.apache.thrift.ProcessFunction<I, purchaseByCard_args> {
      public purchaseByCard() {
        super("purchaseByCard");
      }

      public purchaseByCard_args getEmptyArgsInstance() {
        return new purchaseByCard_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public purchaseByCard_result getResult(I iface, purchaseByCard_args args) throws org.apache.thrift.TException {
        purchaseByCard_result result = new purchaseByCard_result();
        try {
          result.success = iface.purchaseByCard(args.dealOfferId, args.paymentDetail);
        } catch (com.talool.api.thrift.TServiceException_t serviceException) {
          result.serviceException = serviceException;
        } catch (com.talool.api.thrift.TUserException_t userException) {
          result.userException = userException;
        } catch (com.talool.api.thrift.TNotFoundException_t notFoundException) {
          result.notFoundException = notFoundException;
        }
        return result;
      }
    }

    public static class purchaseByCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, purchaseByCode_args> {
      public purchaseByCode() {
        super("purchaseByCode");
      }

      public purchaseByCode_args getEmptyArgsInstance() {
        return new purchaseByCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public purchaseByCode_result getResult(I iface, purchaseByCode_args args) throws org.apache.thrift.TException {
        purchaseByCode_result result = new purchaseByCode_result();
        try {
          result.success = iface.purchaseByCode(args.dealOfferId, args.paymentCode);
        } catch (com.talool.api.thrift.TServiceException_t serviceException) {
          result.serviceException = serviceException;
        } catch (com.talool.api.thrift.TUserException_t userException) {
          result.userException = userException;
        } catch (com.talool.api.thrift.TNotFoundException_t notFoundException) {
          result.notFoundException = notFoundException;
        }
        return result;
      }
    }

    public static class loginFacebook<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loginFacebook_args> {
      public loginFacebook() {
        super("loginFacebook");
      }

      public loginFacebook_args getEmptyArgsInstance() {
        return new loginFacebook_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loginFacebook_result getResult(I iface, loginFacebook_args args) throws org.apache.thrift.TException {
        loginFacebook_result result = new loginFacebook_result();
        try {
          result.success = iface.loginFacebook(args.facebookId, args.facebookAccessToken);
        } catch (com.talool.api.thrift.TServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getDealOfferGeoSummariesWithin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDealOfferGeoSummariesWithin_args> {
      public getDealOfferGeoSummariesWithin() {
        super("getDealOfferGeoSummariesWithin");
      }

      public getDealOfferGeoSummariesWithin_args getEmptyArgsInstance() {
        return new getDealOfferGeoSummariesWithin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDealOfferGeoSummariesWithin_result getResult(I iface, getDealOfferGeoSummariesWithin_args args) throws org.apache.thrift.TException {
        getDealOfferGeoSummariesWithin_result result = new getDealOfferGeoSummariesWithin_result();
        try {
          result.success = iface.getDealOfferGeoSummariesWithin(args.location, args.maxMiles, args.searchOptions, args.fallbackSearchOptions);
        } catch (com.talool.api.thrift.TServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class getMerchantsByDealOfferId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantsByDealOfferId_args> {
      public getMerchantsByDealOfferId() {
        super("getMerchantsByDealOfferId");
      }

      public getMerchantsByDealOfferId_args getEmptyArgsInstance() {
        return new getMerchantsByDealOfferId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantsByDealOfferId_result getResult(I iface, getMerchantsByDealOfferId_args args) throws org.apache.thrift.TException {
        getMerchantsByDealOfferId_result result = new getMerchantsByDealOfferId_result();
        try {
          result.success = iface.getMerchantsByDealOfferId(args.dealOfferId, args.searchOptions);
        } catch (com.talool.api.thrift.ServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class validateCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, validateCode_args> {
      public validateCode() {
        super("validateCode");
      }

      public validateCode_args getEmptyArgsInstance() {
        return new validateCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public validateCode_result getResult(I iface, validateCode_args args) throws org.apache.thrift.TException {
        validateCode_result result = new validateCode_result();
        try {
          result.success = iface.validateCode(args.code, args.dealOfferId);
        } catch (com.talool.api.thrift.TServiceException_t error) {
          result.error = error;
        }
        return result;
      }
    }

    public static class purchaseWithCard<I extends Iface> extends org.apache.thrift.ProcessFunction<I, purchaseWithCard_args> {
      public purchaseWithCard() {
        super("purchaseWithCard");
      }

      public purchaseWithCard_args getEmptyArgsInstance() {
        return new purchaseWithCard_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public purchaseWithCard_result getResult(I iface, purchaseWithCard_args args) throws org.apache.thrift.TException {
        purchaseWithCard_result result = new purchaseWithCard_result();
        try {
          result.success = iface.purchaseWithCard(args.dealOfferId, args.paymentDetail, args.paymentProperties);
        } catch (com.talool.api.thrift.TServiceException_t serviceException) {
          result.serviceException = serviceException;
        } catch (com.talool.api.thrift.TUserException_t userException) {
          result.userException = userException;
        } catch (com.talool.api.thrift.TNotFoundException_t notFoundException) {
          result.notFoundException = notFoundException;
        }
        return result;
      }
    }

    public static class purchaseWithCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, purchaseWithCode_args> {
      public purchaseWithCode() {
        super("purchaseWithCode");
      }

      public purchaseWithCode_args getEmptyArgsInstance() {
        return new purchaseWithCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public purchaseWithCode_result getResult(I iface, purchaseWithCode_args args) throws org.apache.thrift.TException {
        purchaseWithCode_result result = new purchaseWithCode_result();
        try {
          result.success = iface.purchaseWithCode(args.dealOfferId, args.paymentCode, args.paymentProperties);
        } catch (com.talool.api.thrift.TServiceException_t serviceException) {
          result.serviceException = serviceException;
        } catch (com.talool.api.thrift.TUserException_t userException) {
          result.userException = userException;
        } catch (com.talool.api.thrift.TNotFoundException_t notFoundException) {
          result.notFoundException = notFoundException;
        }
        return result;
      }
    }

  }

  public static class createAccount_args implements org.apache.thrift.TBase<createAccount_args, createAccount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAccount_args");

    private static final org.apache.thrift.protocol.TField CUSTOMER_FIELD_DESC = new org.apache.thrift.protocol.TField("customer", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createAccount_argsTupleSchemeFactory());
    }

    public com.talool.api.thrift.Customer_t customer; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CUSTOMER((short)1, "customer"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CUSTOMER
            return CUSTOMER;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CUSTOMER, new org.apache.thrift.meta_data.FieldMetaData("customer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.Customer_t.class)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAccount_args.class, metaDataMap);
    }

    public createAccount_args() {
    }

    public createAccount_args(
      com.talool.api.thrift.Customer_t customer,
      String password)
    {
      this();
      this.customer = customer;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAccount_args(createAccount_args other) {
      if (other.isSetCustomer()) {
        this.customer = new com.talool.api.thrift.Customer_t(other.customer);
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public createAccount_args deepCopy() {
      return new createAccount_args(this);
    }

    public void clear() {
      this.customer = null;
      this.password = null;
    }

    public com.talool.api.thrift.Customer_t getCustomer() {
      return this.customer;
    }

    public createAccount_args setCustomer(com.talool.api.thrift.Customer_t customer) {
      this.customer = customer;
      return this;
    }

    public void unsetCustomer() {
      this.customer = null;
    }

    /** Returns true if field customer is set (has been assigned a value) and false otherwise */
    public boolean isSetCustomer() {
      return this.customer != null;
    }

    public void setCustomerIsSet(boolean value) {
      if (!value) {
        this.customer = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public createAccount_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CUSTOMER:
        if (value == null) {
          unsetCustomer();
        } else {
          setCustomer((com.talool.api.thrift.Customer_t)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CUSTOMER:
        return getCustomer();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CUSTOMER:
        return isSetCustomer();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createAccount_args)
        return this.equals((createAccount_args)that);
      return false;
    }

    public boolean equals(createAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_customer = true && this.isSetCustomer();
      boolean that_present_customer = true && that.isSetCustomer();
      if (this_present_customer || that_present_customer) {
        if (!(this_present_customer && that_present_customer))
          return false;
        if (!this.customer.equals(that.customer))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createAccount_args typedOther = (createAccount_args)other;

      lastComparison = Boolean.valueOf(isSetCustomer()).compareTo(typedOther.isSetCustomer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCustomer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customer, typedOther.customer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createAccount_args(");
      boolean first = true;

      sb.append("customer:");
      if (this.customer == null) {
        sb.append("null");
      } else {
        sb.append(this.customer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (customer != null) {
        customer.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class createAccount_argsStandardSchemeFactory implements SchemeFactory {
      public createAccount_argsStandardScheme getScheme() {
        return new createAccount_argsStandardScheme();
      }
    }

    private static class createAccount_argsStandardScheme extends StandardScheme<createAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CUSTOMER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.customer = new com.talool.api.thrift.Customer_t();
                struct.customer.read(iprot);
                struct.setCustomerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.customer != null) {
          oprot.writeFieldBegin(CUSTOMER_FIELD_DESC);
          struct.customer.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAccount_argsTupleSchemeFactory implements SchemeFactory {
      public createAccount_argsTupleScheme getScheme() {
        return new createAccount_argsTupleScheme();
      }
    }

    private static class createAccount_argsTupleScheme extends TupleScheme<createAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCustomer()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCustomer()) {
          struct.customer.write(oprot);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.customer = new com.talool.api.thrift.Customer_t();
          struct.customer.read(iprot);
          struct.setCustomerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class createAccount_result implements org.apache.thrift.TBase<createAccount_result, createAccount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createAccount_resultTupleSchemeFactory());
    }

    public CTokenAccess_t success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CTokenAccess_t.class)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAccount_result.class, metaDataMap);
    }

    public createAccount_result() {
    }

    public createAccount_result(
      CTokenAccess_t success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAccount_result(createAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new CTokenAccess_t(other.success);
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public createAccount_result deepCopy() {
      return new createAccount_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public CTokenAccess_t getSuccess() {
      return this.success;
    }

    public createAccount_result setSuccess(CTokenAccess_t success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public createAccount_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CTokenAccess_t)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createAccount_result)
        return this.equals((createAccount_result)that);
      return false;
    }

    public boolean equals(createAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createAccount_result typedOther = (createAccount_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class createAccount_resultStandardSchemeFactory implements SchemeFactory {
      public createAccount_resultStandardScheme getScheme() {
        return new createAccount_resultStandardScheme();
      }
    }

    private static class createAccount_resultStandardScheme extends StandardScheme<createAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CTokenAccess_t();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAccount_resultTupleSchemeFactory implements SchemeFactory {
      public createAccount_resultTupleScheme getScheme() {
        return new createAccount_resultTupleScheme();
      }
    }

    private static class createAccount_resultTupleScheme extends TupleScheme<createAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CTokenAccess_t();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class authenticate_args implements org.apache.thrift.TBase<authenticate_args, authenticate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticate_args");

    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticate_argsTupleSchemeFactory());
    }

    public String email; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL((short)1, "email"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL
            return EMAIL;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticate_args.class, metaDataMap);
    }

    public authenticate_args() {
    }

    public authenticate_args(
      String email,
      String password)
    {
      this();
      this.email = email;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticate_args(authenticate_args other) {
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public authenticate_args deepCopy() {
      return new authenticate_args(this);
    }

    public void clear() {
      this.email = null;
      this.password = null;
    }

    public String getEmail() {
      return this.email;
    }

    public authenticate_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public authenticate_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL:
        return getEmail();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL:
        return isSetEmail();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticate_args)
        return this.equals((authenticate_args)that);
      return false;
    }

    public boolean equals(authenticate_args that) {
      if (that == null)
        return false;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(authenticate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      authenticate_args typedOther = (authenticate_args)other;

      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticate_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class authenticate_argsStandardSchemeFactory implements SchemeFactory {
      public authenticate_argsStandardScheme getScheme() {
        return new authenticate_argsStandardScheme();
      }
    }

    private static class authenticate_argsStandardScheme extends StandardScheme<authenticate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticate_argsTupleSchemeFactory implements SchemeFactory {
      public authenticate_argsTupleScheme getScheme() {
        return new authenticate_argsTupleScheme();
      }
    }

    private static class authenticate_argsTupleScheme extends TupleScheme<authenticate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmail()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class authenticate_result implements org.apache.thrift.TBase<authenticate_result, authenticate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticate_resultTupleSchemeFactory());
    }

    public CTokenAccess_t success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CTokenAccess_t.class)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticate_result.class, metaDataMap);
    }

    public authenticate_result() {
    }

    public authenticate_result(
      CTokenAccess_t success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticate_result(authenticate_result other) {
      if (other.isSetSuccess()) {
        this.success = new CTokenAccess_t(other.success);
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public authenticate_result deepCopy() {
      return new authenticate_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public CTokenAccess_t getSuccess() {
      return this.success;
    }

    public authenticate_result setSuccess(CTokenAccess_t success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public authenticate_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CTokenAccess_t)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticate_result)
        return this.equals((authenticate_result)that);
      return false;
    }

    public boolean equals(authenticate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(authenticate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      authenticate_result typedOther = (authenticate_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class authenticate_resultStandardSchemeFactory implements SchemeFactory {
      public authenticate_resultStandardScheme getScheme() {
        return new authenticate_resultStandardScheme();
      }
    }

    private static class authenticate_resultStandardScheme extends StandardScheme<authenticate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CTokenAccess_t();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticate_resultTupleSchemeFactory implements SchemeFactory {
      public authenticate_resultTupleScheme getScheme() {
        return new authenticate_resultTupleScheme();
      }
    }

    private static class authenticate_resultTupleScheme extends TupleScheme<authenticate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CTokenAccess_t();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class customerEmailExists_args implements org.apache.thrift.TBase<customerEmailExists_args, customerEmailExists_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("customerEmailExists_args");

    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new customerEmailExists_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new customerEmailExists_argsTupleSchemeFactory());
    }

    public String email; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL((short)1, "email");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL
            return EMAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(customerEmailExists_args.class, metaDataMap);
    }

    public customerEmailExists_args() {
    }

    public customerEmailExists_args(
      String email)
    {
      this();
      this.email = email;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public customerEmailExists_args(customerEmailExists_args other) {
      if (other.isSetEmail()) {
        this.email = other.email;
      }
    }

    public customerEmailExists_args deepCopy() {
      return new customerEmailExists_args(this);
    }

    public void clear() {
      this.email = null;
    }

    public String getEmail() {
      return this.email;
    }

    public customerEmailExists_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL:
        return getEmail();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL:
        return isSetEmail();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof customerEmailExists_args)
        return this.equals((customerEmailExists_args)that);
      return false;
    }

    public boolean equals(customerEmailExists_args that) {
      if (that == null)
        return false;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(customerEmailExists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      customerEmailExists_args typedOther = (customerEmailExists_args)other;

      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("customerEmailExists_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class customerEmailExists_argsStandardSchemeFactory implements SchemeFactory {
      public customerEmailExists_argsStandardScheme getScheme() {
        return new customerEmailExists_argsStandardScheme();
      }
    }

    private static class customerEmailExists_argsStandardScheme extends StandardScheme<customerEmailExists_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, customerEmailExists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, customerEmailExists_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class customerEmailExists_argsTupleSchemeFactory implements SchemeFactory {
      public customerEmailExists_argsTupleScheme getScheme() {
        return new customerEmailExists_argsTupleScheme();
      }
    }

    private static class customerEmailExists_argsTupleScheme extends TupleScheme<customerEmailExists_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, customerEmailExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmail()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, customerEmailExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
      }
    }

  }

  public static class customerEmailExists_result implements org.apache.thrift.TBase<customerEmailExists_result, customerEmailExists_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("customerEmailExists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new customerEmailExists_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new customerEmailExists_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(customerEmailExists_result.class, metaDataMap);
    }

    public customerEmailExists_result() {
    }

    public customerEmailExists_result(
      boolean success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public customerEmailExists_result(customerEmailExists_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public customerEmailExists_result deepCopy() {
      return new customerEmailExists_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.error = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public customerEmailExists_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public customerEmailExists_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof customerEmailExists_result)
        return this.equals((customerEmailExists_result)that);
      return false;
    }

    public boolean equals(customerEmailExists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(customerEmailExists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      customerEmailExists_result typedOther = (customerEmailExists_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("customerEmailExists_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class customerEmailExists_resultStandardSchemeFactory implements SchemeFactory {
      public customerEmailExists_resultStandardScheme getScheme() {
        return new customerEmailExists_resultStandardScheme();
      }
    }

    private static class customerEmailExists_resultStandardScheme extends StandardScheme<customerEmailExists_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, customerEmailExists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, customerEmailExists_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class customerEmailExists_resultTupleSchemeFactory implements SchemeFactory {
      public customerEmailExists_resultTupleScheme getScheme() {
        return new customerEmailExists_resultTupleScheme();
      }
    }

    private static class customerEmailExists_resultTupleScheme extends TupleScheme<customerEmailExists_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, customerEmailExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, customerEmailExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class addSocialAccount_args implements org.apache.thrift.TBase<addSocialAccount_args, addSocialAccount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSocialAccount_args");

    private static final org.apache.thrift.protocol.TField SOCIAL_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("socialAccount", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSocialAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSocialAccount_argsTupleSchemeFactory());
    }

    public com.talool.api.thrift.SocialAccount_t socialAccount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SOCIAL_ACCOUNT((short)1, "socialAccount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SOCIAL_ACCOUNT
            return SOCIAL_ACCOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SOCIAL_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("socialAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.SocialAccount_t.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSocialAccount_args.class, metaDataMap);
    }

    public addSocialAccount_args() {
    }

    public addSocialAccount_args(
      com.talool.api.thrift.SocialAccount_t socialAccount)
    {
      this();
      this.socialAccount = socialAccount;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSocialAccount_args(addSocialAccount_args other) {
      if (other.isSetSocialAccount()) {
        this.socialAccount = new com.talool.api.thrift.SocialAccount_t(other.socialAccount);
      }
    }

    public addSocialAccount_args deepCopy() {
      return new addSocialAccount_args(this);
    }

    public void clear() {
      this.socialAccount = null;
    }

    public com.talool.api.thrift.SocialAccount_t getSocialAccount() {
      return this.socialAccount;
    }

    public addSocialAccount_args setSocialAccount(com.talool.api.thrift.SocialAccount_t socialAccount) {
      this.socialAccount = socialAccount;
      return this;
    }

    public void unsetSocialAccount() {
      this.socialAccount = null;
    }

    /** Returns true if field socialAccount is set (has been assigned a value) and false otherwise */
    public boolean isSetSocialAccount() {
      return this.socialAccount != null;
    }

    public void setSocialAccountIsSet(boolean value) {
      if (!value) {
        this.socialAccount = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SOCIAL_ACCOUNT:
        if (value == null) {
          unsetSocialAccount();
        } else {
          setSocialAccount((com.talool.api.thrift.SocialAccount_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SOCIAL_ACCOUNT:
        return getSocialAccount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SOCIAL_ACCOUNT:
        return isSetSocialAccount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSocialAccount_args)
        return this.equals((addSocialAccount_args)that);
      return false;
    }

    public boolean equals(addSocialAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_socialAccount = true && this.isSetSocialAccount();
      boolean that_present_socialAccount = true && that.isSetSocialAccount();
      if (this_present_socialAccount || that_present_socialAccount) {
        if (!(this_present_socialAccount && that_present_socialAccount))
          return false;
        if (!this.socialAccount.equals(that.socialAccount))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addSocialAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addSocialAccount_args typedOther = (addSocialAccount_args)other;

      lastComparison = Boolean.valueOf(isSetSocialAccount()).compareTo(typedOther.isSetSocialAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSocialAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socialAccount, typedOther.socialAccount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSocialAccount_args(");
      boolean first = true;

      sb.append("socialAccount:");
      if (this.socialAccount == null) {
        sb.append("null");
      } else {
        sb.append(this.socialAccount);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (socialAccount != null) {
        socialAccount.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class addSocialAccount_argsStandardSchemeFactory implements SchemeFactory {
      public addSocialAccount_argsStandardScheme getScheme() {
        return new addSocialAccount_argsStandardScheme();
      }
    }

    private static class addSocialAccount_argsStandardScheme extends StandardScheme<addSocialAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSocialAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SOCIAL_ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.socialAccount = new com.talool.api.thrift.SocialAccount_t();
                struct.socialAccount.read(iprot);
                struct.setSocialAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSocialAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.socialAccount != null) {
          oprot.writeFieldBegin(SOCIAL_ACCOUNT_FIELD_DESC);
          struct.socialAccount.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSocialAccount_argsTupleSchemeFactory implements SchemeFactory {
      public addSocialAccount_argsTupleScheme getScheme() {
        return new addSocialAccount_argsTupleScheme();
      }
    }

    private static class addSocialAccount_argsTupleScheme extends TupleScheme<addSocialAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSocialAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSocialAccount()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSocialAccount()) {
          struct.socialAccount.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSocialAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.socialAccount = new com.talool.api.thrift.SocialAccount_t();
          struct.socialAccount.read(iprot);
          struct.setSocialAccountIsSet(true);
        }
      }
    }

  }

  public static class addSocialAccount_result implements org.apache.thrift.TBase<addSocialAccount_result, addSocialAccount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSocialAccount_result");

    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSocialAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSocialAccount_resultTupleSchemeFactory());
    }

    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSocialAccount_result.class, metaDataMap);
    }

    public addSocialAccount_result() {
    }

    public addSocialAccount_result(
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSocialAccount_result(addSocialAccount_result other) {
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public addSocialAccount_result deepCopy() {
      return new addSocialAccount_result(this);
    }

    public void clear() {
      this.error = null;
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public addSocialAccount_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSocialAccount_result)
        return this.equals((addSocialAccount_result)that);
      return false;
    }

    public boolean equals(addSocialAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addSocialAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addSocialAccount_result typedOther = (addSocialAccount_result)other;

      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSocialAccount_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class addSocialAccount_resultStandardSchemeFactory implements SchemeFactory {
      public addSocialAccount_resultStandardScheme getScheme() {
        return new addSocialAccount_resultStandardScheme();
      }
    }

    private static class addSocialAccount_resultStandardScheme extends StandardScheme<addSocialAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSocialAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSocialAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSocialAccount_resultTupleSchemeFactory implements SchemeFactory {
      public addSocialAccount_resultTupleScheme getScheme() {
        return new addSocialAccount_resultTupleScheme();
      }
    }

    private static class addSocialAccount_resultTupleScheme extends TupleScheme<addSocialAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSocialAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetError()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSocialAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class removeSocialAccount_args implements org.apache.thrift.TBase<removeSocialAccount_args, removeSocialAccount_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeSocialAccount_args");

    private static final org.apache.thrift.protocol.TField SOCIAL_NETWORK_FIELD_DESC = new org.apache.thrift.protocol.TField("socialNetwork", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeSocialAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeSocialAccount_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see com.talool.api.thrift.SocialNetwork_t
     */
    public com.talool.api.thrift.SocialNetwork_t socialNetwork; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.talool.api.thrift.SocialNetwork_t
       */
      SOCIAL_NETWORK((short)1, "socialNetwork");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SOCIAL_NETWORK
            return SOCIAL_NETWORK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SOCIAL_NETWORK, new org.apache.thrift.meta_data.FieldMetaData("socialNetwork", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.talool.api.thrift.SocialNetwork_t.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeSocialAccount_args.class, metaDataMap);
    }

    public removeSocialAccount_args() {
    }

    public removeSocialAccount_args(
      com.talool.api.thrift.SocialNetwork_t socialNetwork)
    {
      this();
      this.socialNetwork = socialNetwork;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSocialAccount_args(removeSocialAccount_args other) {
      if (other.isSetSocialNetwork()) {
        this.socialNetwork = other.socialNetwork;
      }
    }

    public removeSocialAccount_args deepCopy() {
      return new removeSocialAccount_args(this);
    }

    public void clear() {
      this.socialNetwork = null;
    }

    /**
     * 
     * @see com.talool.api.thrift.SocialNetwork_t
     */
    public com.talool.api.thrift.SocialNetwork_t getSocialNetwork() {
      return this.socialNetwork;
    }

    /**
     * 
     * @see com.talool.api.thrift.SocialNetwork_t
     */
    public removeSocialAccount_args setSocialNetwork(com.talool.api.thrift.SocialNetwork_t socialNetwork) {
      this.socialNetwork = socialNetwork;
      return this;
    }

    public void unsetSocialNetwork() {
      this.socialNetwork = null;
    }

    /** Returns true if field socialNetwork is set (has been assigned a value) and false otherwise */
    public boolean isSetSocialNetwork() {
      return this.socialNetwork != null;
    }

    public void setSocialNetworkIsSet(boolean value) {
      if (!value) {
        this.socialNetwork = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SOCIAL_NETWORK:
        if (value == null) {
          unsetSocialNetwork();
        } else {
          setSocialNetwork((com.talool.api.thrift.SocialNetwork_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SOCIAL_NETWORK:
        return getSocialNetwork();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SOCIAL_NETWORK:
        return isSetSocialNetwork();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSocialAccount_args)
        return this.equals((removeSocialAccount_args)that);
      return false;
    }

    public boolean equals(removeSocialAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_socialNetwork = true && this.isSetSocialNetwork();
      boolean that_present_socialNetwork = true && that.isSetSocialNetwork();
      if (this_present_socialNetwork || that_present_socialNetwork) {
        if (!(this_present_socialNetwork && that_present_socialNetwork))
          return false;
        if (!this.socialNetwork.equals(that.socialNetwork))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeSocialAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeSocialAccount_args typedOther = (removeSocialAccount_args)other;

      lastComparison = Boolean.valueOf(isSetSocialNetwork()).compareTo(typedOther.isSetSocialNetwork());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSocialNetwork()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socialNetwork, typedOther.socialNetwork);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeSocialAccount_args(");
      boolean first = true;

      sb.append("socialNetwork:");
      if (this.socialNetwork == null) {
        sb.append("null");
      } else {
        sb.append(this.socialNetwork);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class removeSocialAccount_argsStandardSchemeFactory implements SchemeFactory {
      public removeSocialAccount_argsStandardScheme getScheme() {
        return new removeSocialAccount_argsStandardScheme();
      }
    }

    private static class removeSocialAccount_argsStandardScheme extends StandardScheme<removeSocialAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeSocialAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SOCIAL_NETWORK
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.socialNetwork = com.talool.api.thrift.SocialNetwork_t.findByValue(iprot.readI32());
                struct.setSocialNetworkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeSocialAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.socialNetwork != null) {
          oprot.writeFieldBegin(SOCIAL_NETWORK_FIELD_DESC);
          oprot.writeI32(struct.socialNetwork.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSocialAccount_argsTupleSchemeFactory implements SchemeFactory {
      public removeSocialAccount_argsTupleScheme getScheme() {
        return new removeSocialAccount_argsTupleScheme();
      }
    }

    private static class removeSocialAccount_argsTupleScheme extends TupleScheme<removeSocialAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeSocialAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSocialNetwork()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSocialNetwork()) {
          oprot.writeI32(struct.socialNetwork.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeSocialAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.socialNetwork = com.talool.api.thrift.SocialNetwork_t.findByValue(iprot.readI32());
          struct.setSocialNetworkIsSet(true);
        }
      }
    }

  }

  public static class removeSocialAccount_result implements org.apache.thrift.TBase<removeSocialAccount_result, removeSocialAccount_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeSocialAccount_result");

    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeSocialAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeSocialAccount_resultTupleSchemeFactory());
    }

    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeSocialAccount_result.class, metaDataMap);
    }

    public removeSocialAccount_result() {
    }

    public removeSocialAccount_result(
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSocialAccount_result(removeSocialAccount_result other) {
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public removeSocialAccount_result deepCopy() {
      return new removeSocialAccount_result(this);
    }

    public void clear() {
      this.error = null;
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public removeSocialAccount_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSocialAccount_result)
        return this.equals((removeSocialAccount_result)that);
      return false;
    }

    public boolean equals(removeSocialAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeSocialAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeSocialAccount_result typedOther = (removeSocialAccount_result)other;

      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeSocialAccount_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class removeSocialAccount_resultStandardSchemeFactory implements SchemeFactory {
      public removeSocialAccount_resultStandardScheme getScheme() {
        return new removeSocialAccount_resultStandardScheme();
      }
    }

    private static class removeSocialAccount_resultStandardScheme extends StandardScheme<removeSocialAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeSocialAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeSocialAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeSocialAccount_resultTupleSchemeFactory implements SchemeFactory {
      public removeSocialAccount_resultTupleScheme getScheme() {
        return new removeSocialAccount_resultTupleScheme();
      }
    }

    private static class removeSocialAccount_resultTupleScheme extends TupleScheme<removeSocialAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeSocialAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetError()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeSocialAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getMerchantAcquires_args implements org.apache.thrift.TBase<getMerchantAcquires_args, getMerchantAcquires_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantAcquires_args");

    private static final org.apache.thrift.protocol.TField SEARCH_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("searchOptions", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantAcquires_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantAcquires_argsTupleSchemeFactory());
    }

    public com.talool.api.thrift.SearchOptions_t searchOptions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_OPTIONS((short)1, "searchOptions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_OPTIONS
            return SEARCH_OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("searchOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.SearchOptions_t.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantAcquires_args.class, metaDataMap);
    }

    public getMerchantAcquires_args() {
    }

    public getMerchantAcquires_args(
      com.talool.api.thrift.SearchOptions_t searchOptions)
    {
      this();
      this.searchOptions = searchOptions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantAcquires_args(getMerchantAcquires_args other) {
      if (other.isSetSearchOptions()) {
        this.searchOptions = new com.talool.api.thrift.SearchOptions_t(other.searchOptions);
      }
    }

    public getMerchantAcquires_args deepCopy() {
      return new getMerchantAcquires_args(this);
    }

    public void clear() {
      this.searchOptions = null;
    }

    public com.talool.api.thrift.SearchOptions_t getSearchOptions() {
      return this.searchOptions;
    }

    public getMerchantAcquires_args setSearchOptions(com.talool.api.thrift.SearchOptions_t searchOptions) {
      this.searchOptions = searchOptions;
      return this;
    }

    public void unsetSearchOptions() {
      this.searchOptions = null;
    }

    /** Returns true if field searchOptions is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchOptions() {
      return this.searchOptions != null;
    }

    public void setSearchOptionsIsSet(boolean value) {
      if (!value) {
        this.searchOptions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEARCH_OPTIONS:
        if (value == null) {
          unsetSearchOptions();
        } else {
          setSearchOptions((com.talool.api.thrift.SearchOptions_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_OPTIONS:
        return getSearchOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_OPTIONS:
        return isSetSearchOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantAcquires_args)
        return this.equals((getMerchantAcquires_args)that);
      return false;
    }

    public boolean equals(getMerchantAcquires_args that) {
      if (that == null)
        return false;

      boolean this_present_searchOptions = true && this.isSetSearchOptions();
      boolean that_present_searchOptions = true && that.isSetSearchOptions();
      if (this_present_searchOptions || that_present_searchOptions) {
        if (!(this_present_searchOptions && that_present_searchOptions))
          return false;
        if (!this.searchOptions.equals(that.searchOptions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMerchantAcquires_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMerchantAcquires_args typedOther = (getMerchantAcquires_args)other;

      lastComparison = Boolean.valueOf(isSetSearchOptions()).compareTo(typedOther.isSetSearchOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchOptions, typedOther.searchOptions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantAcquires_args(");
      boolean first = true;

      sb.append("searchOptions:");
      if (this.searchOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.searchOptions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (searchOptions != null) {
        searchOptions.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMerchantAcquires_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantAcquires_argsStandardScheme getScheme() {
        return new getMerchantAcquires_argsStandardScheme();
      }
    }

    private static class getMerchantAcquires_argsStandardScheme extends StandardScheme<getMerchantAcquires_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantAcquires_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
                struct.searchOptions.read(iprot);
                struct.setSearchOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantAcquires_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchOptions != null) {
          oprot.writeFieldBegin(SEARCH_OPTIONS_FIELD_DESC);
          struct.searchOptions.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantAcquires_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantAcquires_argsTupleScheme getScheme() {
        return new getMerchantAcquires_argsTupleScheme();
      }
    }

    private static class getMerchantAcquires_argsTupleScheme extends TupleScheme<getMerchantAcquires_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantAcquires_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSearchOptions()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSearchOptions()) {
          struct.searchOptions.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantAcquires_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
          struct.searchOptions.read(iprot);
          struct.setSearchOptionsIsSet(true);
        }
      }
    }

  }

  public static class getMerchantAcquires_result implements org.apache.thrift.TBase<getMerchantAcquires_result, getMerchantAcquires_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantAcquires_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantAcquires_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantAcquires_resultTupleSchemeFactory());
    }

    public List<com.talool.api.thrift.Merchant_t> success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.Merchant_t.class))));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantAcquires_result.class, metaDataMap);
    }

    public getMerchantAcquires_result() {
    }

    public getMerchantAcquires_result(
      List<com.talool.api.thrift.Merchant_t> success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantAcquires_result(getMerchantAcquires_result other) {
      if (other.isSetSuccess()) {
        List<com.talool.api.thrift.Merchant_t> __this__success = new ArrayList<com.talool.api.thrift.Merchant_t>();
        for (com.talool.api.thrift.Merchant_t other_element : other.success) {
          __this__success.add(new com.talool.api.thrift.Merchant_t(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public getMerchantAcquires_result deepCopy() {
      return new getMerchantAcquires_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.talool.api.thrift.Merchant_t> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.talool.api.thrift.Merchant_t elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.talool.api.thrift.Merchant_t>();
      }
      this.success.add(elem);
    }

    public List<com.talool.api.thrift.Merchant_t> getSuccess() {
      return this.success;
    }

    public getMerchantAcquires_result setSuccess(List<com.talool.api.thrift.Merchant_t> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public getMerchantAcquires_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.talool.api.thrift.Merchant_t>)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantAcquires_result)
        return this.equals((getMerchantAcquires_result)that);
      return false;
    }

    public boolean equals(getMerchantAcquires_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMerchantAcquires_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMerchantAcquires_result typedOther = (getMerchantAcquires_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantAcquires_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMerchantAcquires_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantAcquires_resultStandardScheme getScheme() {
        return new getMerchantAcquires_resultStandardScheme();
      }
    }

    private static class getMerchantAcquires_resultStandardScheme extends StandardScheme<getMerchantAcquires_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantAcquires_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.talool.api.thrift.Merchant_t>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    com.talool.api.thrift.Merchant_t _elem18; // required
                    _elem18 = new com.talool.api.thrift.Merchant_t();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantAcquires_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.talool.api.thrift.Merchant_t _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantAcquires_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantAcquires_resultTupleScheme getScheme() {
        return new getMerchantAcquires_resultTupleScheme();
      }
    }

    private static class getMerchantAcquires_resultTupleScheme extends TupleScheme<getMerchantAcquires_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantAcquires_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.talool.api.thrift.Merchant_t _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantAcquires_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.talool.api.thrift.Merchant_t>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              com.talool.api.thrift.Merchant_t _elem23; // required
              _elem23 = new com.talool.api.thrift.Merchant_t();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getMerchantAcquiresWithLocation_args implements org.apache.thrift.TBase<getMerchantAcquiresWithLocation_args, getMerchantAcquiresWithLocation_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantAcquiresWithLocation_args");

    private static final org.apache.thrift.protocol.TField SEARCH_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("searchOptions", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantAcquiresWithLocation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantAcquiresWithLocation_argsTupleSchemeFactory());
    }

    public com.talool.api.thrift.SearchOptions_t searchOptions; // required
    public com.talool.api.thrift.Location_t location; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_OPTIONS((short)1, "searchOptions"),
      LOCATION((short)2, "location");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_OPTIONS
            return SEARCH_OPTIONS;
          case 2: // LOCATION
            return LOCATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("searchOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.SearchOptions_t.class)));
      tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.Location_t.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantAcquiresWithLocation_args.class, metaDataMap);
    }

    public getMerchantAcquiresWithLocation_args() {
    }

    public getMerchantAcquiresWithLocation_args(
      com.talool.api.thrift.SearchOptions_t searchOptions,
      com.talool.api.thrift.Location_t location)
    {
      this();
      this.searchOptions = searchOptions;
      this.location = location;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantAcquiresWithLocation_args(getMerchantAcquiresWithLocation_args other) {
      if (other.isSetSearchOptions()) {
        this.searchOptions = new com.talool.api.thrift.SearchOptions_t(other.searchOptions);
      }
      if (other.isSetLocation()) {
        this.location = new com.talool.api.thrift.Location_t(other.location);
      }
    }

    public getMerchantAcquiresWithLocation_args deepCopy() {
      return new getMerchantAcquiresWithLocation_args(this);
    }

    public void clear() {
      this.searchOptions = null;
      this.location = null;
    }

    public com.talool.api.thrift.SearchOptions_t getSearchOptions() {
      return this.searchOptions;
    }

    public getMerchantAcquiresWithLocation_args setSearchOptions(com.talool.api.thrift.SearchOptions_t searchOptions) {
      this.searchOptions = searchOptions;
      return this;
    }

    public void unsetSearchOptions() {
      this.searchOptions = null;
    }

    /** Returns true if field searchOptions is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchOptions() {
      return this.searchOptions != null;
    }

    public void setSearchOptionsIsSet(boolean value) {
      if (!value) {
        this.searchOptions = null;
      }
    }

    public com.talool.api.thrift.Location_t getLocation() {
      return this.location;
    }

    public getMerchantAcquiresWithLocation_args setLocation(com.talool.api.thrift.Location_t location) {
      this.location = location;
      return this;
    }

    public void unsetLocation() {
      this.location = null;
    }

    /** Returns true if field location is set (has been assigned a value) and false otherwise */
    public boolean isSetLocation() {
      return this.location != null;
    }

    public void setLocationIsSet(boolean value) {
      if (!value) {
        this.location = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEARCH_OPTIONS:
        if (value == null) {
          unsetSearchOptions();
        } else {
          setSearchOptions((com.talool.api.thrift.SearchOptions_t)value);
        }
        break;

      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          setLocation((com.talool.api.thrift.Location_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_OPTIONS:
        return getSearchOptions();

      case LOCATION:
        return getLocation();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_OPTIONS:
        return isSetSearchOptions();
      case LOCATION:
        return isSetLocation();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantAcquiresWithLocation_args)
        return this.equals((getMerchantAcquiresWithLocation_args)that);
      return false;
    }

    public boolean equals(getMerchantAcquiresWithLocation_args that) {
      if (that == null)
        return false;

      boolean this_present_searchOptions = true && this.isSetSearchOptions();
      boolean that_present_searchOptions = true && that.isSetSearchOptions();
      if (this_present_searchOptions || that_present_searchOptions) {
        if (!(this_present_searchOptions && that_present_searchOptions))
          return false;
        if (!this.searchOptions.equals(that.searchOptions))
          return false;
      }

      boolean this_present_location = true && this.isSetLocation();
      boolean that_present_location = true && that.isSetLocation();
      if (this_present_location || that_present_location) {
        if (!(this_present_location && that_present_location))
          return false;
        if (!this.location.equals(that.location))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMerchantAcquiresWithLocation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMerchantAcquiresWithLocation_args typedOther = (getMerchantAcquiresWithLocation_args)other;

      lastComparison = Boolean.valueOf(isSetSearchOptions()).compareTo(typedOther.isSetSearchOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchOptions, typedOther.searchOptions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantAcquiresWithLocation_args(");
      boolean first = true;

      sb.append("searchOptions:");
      if (this.searchOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.searchOptions);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (searchOptions != null) {
        searchOptions.validate();
      }
      if (location != null) {
        location.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMerchantAcquiresWithLocation_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantAcquiresWithLocation_argsStandardScheme getScheme() {
        return new getMerchantAcquiresWithLocation_argsStandardScheme();
      }
    }

    private static class getMerchantAcquiresWithLocation_argsStandardScheme extends StandardScheme<getMerchantAcquiresWithLocation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantAcquiresWithLocation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
                struct.searchOptions.read(iprot);
                struct.setSearchOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.location = new com.talool.api.thrift.Location_t();
                struct.location.read(iprot);
                struct.setLocationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantAcquiresWithLocation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchOptions != null) {
          oprot.writeFieldBegin(SEARCH_OPTIONS_FIELD_DESC);
          struct.searchOptions.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.location != null) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          struct.location.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantAcquiresWithLocation_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantAcquiresWithLocation_argsTupleScheme getScheme() {
        return new getMerchantAcquiresWithLocation_argsTupleScheme();
      }
    }

    private static class getMerchantAcquiresWithLocation_argsTupleScheme extends TupleScheme<getMerchantAcquiresWithLocation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantAcquiresWithLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSearchOptions()) {
          optionals.set(0);
        }
        if (struct.isSetLocation()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSearchOptions()) {
          struct.searchOptions.write(oprot);
        }
        if (struct.isSetLocation()) {
          struct.location.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantAcquiresWithLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
          struct.searchOptions.read(iprot);
          struct.setSearchOptionsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.location = new com.talool.api.thrift.Location_t();
          struct.location.read(iprot);
          struct.setLocationIsSet(true);
        }
      }
    }

  }

  public static class getMerchantAcquiresWithLocation_result implements org.apache.thrift.TBase<getMerchantAcquiresWithLocation_result, getMerchantAcquiresWithLocation_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantAcquiresWithLocation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantAcquiresWithLocation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantAcquiresWithLocation_resultTupleSchemeFactory());
    }

    public List<com.talool.api.thrift.Merchant_t> success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.Merchant_t.class))));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantAcquiresWithLocation_result.class, metaDataMap);
    }

    public getMerchantAcquiresWithLocation_result() {
    }

    public getMerchantAcquiresWithLocation_result(
      List<com.talool.api.thrift.Merchant_t> success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantAcquiresWithLocation_result(getMerchantAcquiresWithLocation_result other) {
      if (other.isSetSuccess()) {
        List<com.talool.api.thrift.Merchant_t> __this__success = new ArrayList<com.talool.api.thrift.Merchant_t>();
        for (com.talool.api.thrift.Merchant_t other_element : other.success) {
          __this__success.add(new com.talool.api.thrift.Merchant_t(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public getMerchantAcquiresWithLocation_result deepCopy() {
      return new getMerchantAcquiresWithLocation_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.talool.api.thrift.Merchant_t> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.talool.api.thrift.Merchant_t elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.talool.api.thrift.Merchant_t>();
      }
      this.success.add(elem);
    }

    public List<com.talool.api.thrift.Merchant_t> getSuccess() {
      return this.success;
    }

    public getMerchantAcquiresWithLocation_result setSuccess(List<com.talool.api.thrift.Merchant_t> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public getMerchantAcquiresWithLocation_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.talool.api.thrift.Merchant_t>)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantAcquiresWithLocation_result)
        return this.equals((getMerchantAcquiresWithLocation_result)that);
      return false;
    }

    public boolean equals(getMerchantAcquiresWithLocation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMerchantAcquiresWithLocation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMerchantAcquiresWithLocation_result typedOther = (getMerchantAcquiresWithLocation_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantAcquiresWithLocation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMerchantAcquiresWithLocation_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantAcquiresWithLocation_resultStandardScheme getScheme() {
        return new getMerchantAcquiresWithLocation_resultStandardScheme();
      }
    }

    private static class getMerchantAcquiresWithLocation_resultStandardScheme extends StandardScheme<getMerchantAcquiresWithLocation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantAcquiresWithLocation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.talool.api.thrift.Merchant_t>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    com.talool.api.thrift.Merchant_t _elem26; // required
                    _elem26 = new com.talool.api.thrift.Merchant_t();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantAcquiresWithLocation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.talool.api.thrift.Merchant_t _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantAcquiresWithLocation_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantAcquiresWithLocation_resultTupleScheme getScheme() {
        return new getMerchantAcquiresWithLocation_resultTupleScheme();
      }
    }

    private static class getMerchantAcquiresWithLocation_resultTupleScheme extends TupleScheme<getMerchantAcquiresWithLocation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantAcquiresWithLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.talool.api.thrift.Merchant_t _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantAcquiresWithLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.talool.api.thrift.Merchant_t>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              com.talool.api.thrift.Merchant_t _elem31; // required
              _elem31 = new com.talool.api.thrift.Merchant_t();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getMerchantAcquiresByCategory_args implements org.apache.thrift.TBase<getMerchantAcquiresByCategory_args, getMerchantAcquiresByCategory_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantAcquiresByCategory_args");

    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SEARCH_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("searchOptions", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantAcquiresByCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantAcquiresByCategory_argsTupleSchemeFactory());
    }

    public int categoryId; // required
    public com.talool.api.thrift.SearchOptions_t searchOptions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATEGORY_ID((short)1, "categoryId"),
      SEARCH_OPTIONS((short)2, "searchOptions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY_ID
            return CATEGORY_ID;
          case 2: // SEARCH_OPTIONS
            return SEARCH_OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CATEGORYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SEARCH_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("searchOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.SearchOptions_t.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantAcquiresByCategory_args.class, metaDataMap);
    }

    public getMerchantAcquiresByCategory_args() {
    }

    public getMerchantAcquiresByCategory_args(
      int categoryId,
      com.talool.api.thrift.SearchOptions_t searchOptions)
    {
      this();
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
      this.searchOptions = searchOptions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantAcquiresByCategory_args(getMerchantAcquiresByCategory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.categoryId = other.categoryId;
      if (other.isSetSearchOptions()) {
        this.searchOptions = new com.talool.api.thrift.SearchOptions_t(other.searchOptions);
      }
    }

    public getMerchantAcquiresByCategory_args deepCopy() {
      return new getMerchantAcquiresByCategory_args(this);
    }

    public void clear() {
      setCategoryIdIsSet(false);
      this.categoryId = 0;
      this.searchOptions = null;
    }

    public int getCategoryId() {
      return this.categoryId;
    }

    public getMerchantAcquiresByCategory_args setCategoryId(int categoryId) {
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
      return this;
    }

    public void unsetCategoryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryId() {
      return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    public void setCategoryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
    }

    public com.talool.api.thrift.SearchOptions_t getSearchOptions() {
      return this.searchOptions;
    }

    public getMerchantAcquiresByCategory_args setSearchOptions(com.talool.api.thrift.SearchOptions_t searchOptions) {
      this.searchOptions = searchOptions;
      return this;
    }

    public void unsetSearchOptions() {
      this.searchOptions = null;
    }

    /** Returns true if field searchOptions is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchOptions() {
      return this.searchOptions != null;
    }

    public void setSearchOptionsIsSet(boolean value) {
      if (!value) {
        this.searchOptions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORY_ID:
        if (value == null) {
          unsetCategoryId();
        } else {
          setCategoryId((Integer)value);
        }
        break;

      case SEARCH_OPTIONS:
        if (value == null) {
          unsetSearchOptions();
        } else {
          setSearchOptions((com.talool.api.thrift.SearchOptions_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY_ID:
        return Integer.valueOf(getCategoryId());

      case SEARCH_OPTIONS:
        return getSearchOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY_ID:
        return isSetCategoryId();
      case SEARCH_OPTIONS:
        return isSetSearchOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantAcquiresByCategory_args)
        return this.equals((getMerchantAcquiresByCategory_args)that);
      return false;
    }

    public boolean equals(getMerchantAcquiresByCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_categoryId = true;
      boolean that_present_categoryId = true;
      if (this_present_categoryId || that_present_categoryId) {
        if (!(this_present_categoryId && that_present_categoryId))
          return false;
        if (this.categoryId != that.categoryId)
          return false;
      }

      boolean this_present_searchOptions = true && this.isSetSearchOptions();
      boolean that_present_searchOptions = true && that.isSetSearchOptions();
      if (this_present_searchOptions || that_present_searchOptions) {
        if (!(this_present_searchOptions && that_present_searchOptions))
          return false;
        if (!this.searchOptions.equals(that.searchOptions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMerchantAcquiresByCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMerchantAcquiresByCategory_args typedOther = (getMerchantAcquiresByCategory_args)other;

      lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(typedOther.isSetCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, typedOther.categoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSearchOptions()).compareTo(typedOther.isSetSearchOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchOptions, typedOther.searchOptions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantAcquiresByCategory_args(");
      boolean first = true;

      sb.append("categoryId:");
      sb.append(this.categoryId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchOptions:");
      if (this.searchOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.searchOptions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (searchOptions != null) {
        searchOptions.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMerchantAcquiresByCategory_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantAcquiresByCategory_argsStandardScheme getScheme() {
        return new getMerchantAcquiresByCategory_argsStandardScheme();
      }
    }

    private static class getMerchantAcquiresByCategory_argsStandardScheme extends StandardScheme<getMerchantAcquiresByCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantAcquiresByCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.categoryId = iprot.readI32();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEARCH_OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
                struct.searchOptions.read(iprot);
                struct.setSearchOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantAcquiresByCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
        oprot.writeI32(struct.categoryId);
        oprot.writeFieldEnd();
        if (struct.searchOptions != null) {
          oprot.writeFieldBegin(SEARCH_OPTIONS_FIELD_DESC);
          struct.searchOptions.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantAcquiresByCategory_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantAcquiresByCategory_argsTupleScheme getScheme() {
        return new getMerchantAcquiresByCategory_argsTupleScheme();
      }
    }

    private static class getMerchantAcquiresByCategory_argsTupleScheme extends TupleScheme<getMerchantAcquiresByCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantAcquiresByCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCategoryId()) {
          optionals.set(0);
        }
        if (struct.isSetSearchOptions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCategoryId()) {
          oprot.writeI32(struct.categoryId);
        }
        if (struct.isSetSearchOptions()) {
          struct.searchOptions.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantAcquiresByCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.categoryId = iprot.readI32();
          struct.setCategoryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
          struct.searchOptions.read(iprot);
          struct.setSearchOptionsIsSet(true);
        }
      }
    }

  }

  public static class getMerchantAcquiresByCategory_result implements org.apache.thrift.TBase<getMerchantAcquiresByCategory_result, getMerchantAcquiresByCategory_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantAcquiresByCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantAcquiresByCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantAcquiresByCategory_resultTupleSchemeFactory());
    }

    public List<com.talool.api.thrift.Merchant_t> success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.Merchant_t.class))));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantAcquiresByCategory_result.class, metaDataMap);
    }

    public getMerchantAcquiresByCategory_result() {
    }

    public getMerchantAcquiresByCategory_result(
      List<com.talool.api.thrift.Merchant_t> success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantAcquiresByCategory_result(getMerchantAcquiresByCategory_result other) {
      if (other.isSetSuccess()) {
        List<com.talool.api.thrift.Merchant_t> __this__success = new ArrayList<com.talool.api.thrift.Merchant_t>();
        for (com.talool.api.thrift.Merchant_t other_element : other.success) {
          __this__success.add(new com.talool.api.thrift.Merchant_t(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public getMerchantAcquiresByCategory_result deepCopy() {
      return new getMerchantAcquiresByCategory_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.talool.api.thrift.Merchant_t> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.talool.api.thrift.Merchant_t elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.talool.api.thrift.Merchant_t>();
      }
      this.success.add(elem);
    }

    public List<com.talool.api.thrift.Merchant_t> getSuccess() {
      return this.success;
    }

    public getMerchantAcquiresByCategory_result setSuccess(List<com.talool.api.thrift.Merchant_t> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public getMerchantAcquiresByCategory_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.talool.api.thrift.Merchant_t>)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantAcquiresByCategory_result)
        return this.equals((getMerchantAcquiresByCategory_result)that);
      return false;
    }

    public boolean equals(getMerchantAcquiresByCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMerchantAcquiresByCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMerchantAcquiresByCategory_result typedOther = (getMerchantAcquiresByCategory_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantAcquiresByCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMerchantAcquiresByCategory_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantAcquiresByCategory_resultStandardScheme getScheme() {
        return new getMerchantAcquiresByCategory_resultStandardScheme();
      }
    }

    private static class getMerchantAcquiresByCategory_resultStandardScheme extends StandardScheme<getMerchantAcquiresByCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantAcquiresByCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<com.talool.api.thrift.Merchant_t>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    com.talool.api.thrift.Merchant_t _elem34; // required
                    _elem34 = new com.talool.api.thrift.Merchant_t();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantAcquiresByCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.talool.api.thrift.Merchant_t _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantAcquiresByCategory_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantAcquiresByCategory_resultTupleScheme getScheme() {
        return new getMerchantAcquiresByCategory_resultTupleScheme();
      }
    }

    private static class getMerchantAcquiresByCategory_resultTupleScheme extends TupleScheme<getMerchantAcquiresByCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantAcquiresByCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.talool.api.thrift.Merchant_t _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantAcquiresByCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.talool.api.thrift.Merchant_t>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              com.talool.api.thrift.Merchant_t _elem39; // required
              _elem39 = new com.talool.api.thrift.Merchant_t();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getDealAcquires_args implements org.apache.thrift.TBase<getDealAcquires_args, getDealAcquires_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDealAcquires_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SEARCH_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("searchOptions", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDealAcquires_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDealAcquires_argsTupleSchemeFactory());
    }

    public String merchantId; // required
    public com.talool.api.thrift.SearchOptions_t searchOptions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId"),
      SEARCH_OPTIONS((short)2, "searchOptions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          case 2: // SEARCH_OPTIONS
            return SEARCH_OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEARCH_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("searchOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.SearchOptions_t.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDealAcquires_args.class, metaDataMap);
    }

    public getDealAcquires_args() {
    }

    public getDealAcquires_args(
      String merchantId,
      com.talool.api.thrift.SearchOptions_t searchOptions)
    {
      this();
      this.merchantId = merchantId;
      this.searchOptions = searchOptions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDealAcquires_args(getDealAcquires_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetSearchOptions()) {
        this.searchOptions = new com.talool.api.thrift.SearchOptions_t(other.searchOptions);
      }
    }

    public getDealAcquires_args deepCopy() {
      return new getDealAcquires_args(this);
    }

    public void clear() {
      this.merchantId = null;
      this.searchOptions = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public getDealAcquires_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public com.talool.api.thrift.SearchOptions_t getSearchOptions() {
      return this.searchOptions;
    }

    public getDealAcquires_args setSearchOptions(com.talool.api.thrift.SearchOptions_t searchOptions) {
      this.searchOptions = searchOptions;
      return this;
    }

    public void unsetSearchOptions() {
      this.searchOptions = null;
    }

    /** Returns true if field searchOptions is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchOptions() {
      return this.searchOptions != null;
    }

    public void setSearchOptionsIsSet(boolean value) {
      if (!value) {
        this.searchOptions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case SEARCH_OPTIONS:
        if (value == null) {
          unsetSearchOptions();
        } else {
          setSearchOptions((com.talool.api.thrift.SearchOptions_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      case SEARCH_OPTIONS:
        return getSearchOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      case SEARCH_OPTIONS:
        return isSetSearchOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDealAcquires_args)
        return this.equals((getDealAcquires_args)that);
      return false;
    }

    public boolean equals(getDealAcquires_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_searchOptions = true && this.isSetSearchOptions();
      boolean that_present_searchOptions = true && that.isSetSearchOptions();
      if (this_present_searchOptions || that_present_searchOptions) {
        if (!(this_present_searchOptions && that_present_searchOptions))
          return false;
        if (!this.searchOptions.equals(that.searchOptions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDealAcquires_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDealAcquires_args typedOther = (getDealAcquires_args)other;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(typedOther.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, typedOther.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSearchOptions()).compareTo(typedOther.isSetSearchOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchOptions, typedOther.searchOptions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDealAcquires_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchOptions:");
      if (this.searchOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.searchOptions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (searchOptions != null) {
        searchOptions.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getDealAcquires_argsStandardSchemeFactory implements SchemeFactory {
      public getDealAcquires_argsStandardScheme getScheme() {
        return new getDealAcquires_argsStandardScheme();
      }
    }

    private static class getDealAcquires_argsStandardScheme extends StandardScheme<getDealAcquires_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDealAcquires_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEARCH_OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
                struct.searchOptions.read(iprot);
                struct.setSearchOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDealAcquires_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.searchOptions != null) {
          oprot.writeFieldBegin(SEARCH_OPTIONS_FIELD_DESC);
          struct.searchOptions.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDealAcquires_argsTupleSchemeFactory implements SchemeFactory {
      public getDealAcquires_argsTupleScheme getScheme() {
        return new getDealAcquires_argsTupleScheme();
      }
    }

    private static class getDealAcquires_argsTupleScheme extends TupleScheme<getDealAcquires_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDealAcquires_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        if (struct.isSetSearchOptions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetSearchOptions()) {
          struct.searchOptions.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDealAcquires_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
          struct.searchOptions.read(iprot);
          struct.setSearchOptionsIsSet(true);
        }
      }
    }

  }

  public static class getDealAcquires_result implements org.apache.thrift.TBase<getDealAcquires_result, getDealAcquires_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDealAcquires_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDealAcquires_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDealAcquires_resultTupleSchemeFactory());
    }

    public List<com.talool.api.thrift.DealAcquire_t> success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.DealAcquire_t.class))));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDealAcquires_result.class, metaDataMap);
    }

    public getDealAcquires_result() {
    }

    public getDealAcquires_result(
      List<com.talool.api.thrift.DealAcquire_t> success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDealAcquires_result(getDealAcquires_result other) {
      if (other.isSetSuccess()) {
        List<com.talool.api.thrift.DealAcquire_t> __this__success = new ArrayList<com.talool.api.thrift.DealAcquire_t>();
        for (com.talool.api.thrift.DealAcquire_t other_element : other.success) {
          __this__success.add(new com.talool.api.thrift.DealAcquire_t(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public getDealAcquires_result deepCopy() {
      return new getDealAcquires_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.talool.api.thrift.DealAcquire_t> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.talool.api.thrift.DealAcquire_t elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.talool.api.thrift.DealAcquire_t>();
      }
      this.success.add(elem);
    }

    public List<com.talool.api.thrift.DealAcquire_t> getSuccess() {
      return this.success;
    }

    public getDealAcquires_result setSuccess(List<com.talool.api.thrift.DealAcquire_t> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public getDealAcquires_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.talool.api.thrift.DealAcquire_t>)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDealAcquires_result)
        return this.equals((getDealAcquires_result)that);
      return false;
    }

    public boolean equals(getDealAcquires_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDealAcquires_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDealAcquires_result typedOther = (getDealAcquires_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDealAcquires_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getDealAcquires_resultStandardSchemeFactory implements SchemeFactory {
      public getDealAcquires_resultStandardScheme getScheme() {
        return new getDealAcquires_resultStandardScheme();
      }
    }

    private static class getDealAcquires_resultStandardScheme extends StandardScheme<getDealAcquires_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDealAcquires_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<com.talool.api.thrift.DealAcquire_t>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    com.talool.api.thrift.DealAcquire_t _elem42; // required
                    _elem42 = new com.talool.api.thrift.DealAcquire_t();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDealAcquires_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.talool.api.thrift.DealAcquire_t _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDealAcquires_resultTupleSchemeFactory implements SchemeFactory {
      public getDealAcquires_resultTupleScheme getScheme() {
        return new getDealAcquires_resultTupleScheme();
      }
    }

    private static class getDealAcquires_resultTupleScheme extends TupleScheme<getDealAcquires_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDealAcquires_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.talool.api.thrift.DealAcquire_t _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDealAcquires_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.talool.api.thrift.DealAcquire_t>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              com.talool.api.thrift.DealAcquire_t _elem47; // required
              _elem47 = new com.talool.api.thrift.DealAcquire_t();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class redeem_args implements org.apache.thrift.TBase<redeem_args, redeem_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("redeem_args");

    private static final org.apache.thrift.protocol.TField DEAL_ACQUIRE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealAcquireId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new redeem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new redeem_argsTupleSchemeFactory());
    }

    public String dealAcquireId; // required
    public com.talool.api.thrift.Location_t location; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEAL_ACQUIRE_ID((short)1, "dealAcquireId"),
      LOCATION((short)2, "location");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEAL_ACQUIRE_ID
            return DEAL_ACQUIRE_ID;
          case 2: // LOCATION
            return LOCATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEAL_ACQUIRE_ID, new org.apache.thrift.meta_data.FieldMetaData("dealAcquireId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.Location_t.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(redeem_args.class, metaDataMap);
    }

    public redeem_args() {
    }

    public redeem_args(
      String dealAcquireId,
      com.talool.api.thrift.Location_t location)
    {
      this();
      this.dealAcquireId = dealAcquireId;
      this.location = location;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public redeem_args(redeem_args other) {
      if (other.isSetDealAcquireId()) {
        this.dealAcquireId = other.dealAcquireId;
      }
      if (other.isSetLocation()) {
        this.location = new com.talool.api.thrift.Location_t(other.location);
      }
    }

    public redeem_args deepCopy() {
      return new redeem_args(this);
    }

    public void clear() {
      this.dealAcquireId = null;
      this.location = null;
    }

    public String getDealAcquireId() {
      return this.dealAcquireId;
    }

    public redeem_args setDealAcquireId(String dealAcquireId) {
      this.dealAcquireId = dealAcquireId;
      return this;
    }

    public void unsetDealAcquireId() {
      this.dealAcquireId = null;
    }

    /** Returns true if field dealAcquireId is set (has been assigned a value) and false otherwise */
    public boolean isSetDealAcquireId() {
      return this.dealAcquireId != null;
    }

    public void setDealAcquireIdIsSet(boolean value) {
      if (!value) {
        this.dealAcquireId = null;
      }
    }

    public com.talool.api.thrift.Location_t getLocation() {
      return this.location;
    }

    public redeem_args setLocation(com.talool.api.thrift.Location_t location) {
      this.location = location;
      return this;
    }

    public void unsetLocation() {
      this.location = null;
    }

    /** Returns true if field location is set (has been assigned a value) and false otherwise */
    public boolean isSetLocation() {
      return this.location != null;
    }

    public void setLocationIsSet(boolean value) {
      if (!value) {
        this.location = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEAL_ACQUIRE_ID:
        if (value == null) {
          unsetDealAcquireId();
        } else {
          setDealAcquireId((String)value);
        }
        break;

      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          setLocation((com.talool.api.thrift.Location_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEAL_ACQUIRE_ID:
        return getDealAcquireId();

      case LOCATION:
        return getLocation();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEAL_ACQUIRE_ID:
        return isSetDealAcquireId();
      case LOCATION:
        return isSetLocation();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof redeem_args)
        return this.equals((redeem_args)that);
      return false;
    }

    public boolean equals(redeem_args that) {
      if (that == null)
        return false;

      boolean this_present_dealAcquireId = true && this.isSetDealAcquireId();
      boolean that_present_dealAcquireId = true && that.isSetDealAcquireId();
      if (this_present_dealAcquireId || that_present_dealAcquireId) {
        if (!(this_present_dealAcquireId && that_present_dealAcquireId))
          return false;
        if (!this.dealAcquireId.equals(that.dealAcquireId))
          return false;
      }

      boolean this_present_location = true && this.isSetLocation();
      boolean that_present_location = true && that.isSetLocation();
      if (this_present_location || that_present_location) {
        if (!(this_present_location && that_present_location))
          return false;
        if (!this.location.equals(that.location))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(redeem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      redeem_args typedOther = (redeem_args)other;

      lastComparison = Boolean.valueOf(isSetDealAcquireId()).compareTo(typedOther.isSetDealAcquireId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDealAcquireId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealAcquireId, typedOther.dealAcquireId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("redeem_args(");
      boolean first = true;

      sb.append("dealAcquireId:");
      if (this.dealAcquireId == null) {
        sb.append("null");
      } else {
        sb.append(this.dealAcquireId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (location != null) {
        location.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class redeem_argsStandardSchemeFactory implements SchemeFactory {
      public redeem_argsStandardScheme getScheme() {
        return new redeem_argsStandardScheme();
      }
    }

    private static class redeem_argsStandardScheme extends StandardScheme<redeem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, redeem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEAL_ACQUIRE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dealAcquireId = iprot.readString();
                struct.setDealAcquireIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.location = new com.talool.api.thrift.Location_t();
                struct.location.read(iprot);
                struct.setLocationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, redeem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dealAcquireId != null) {
          oprot.writeFieldBegin(DEAL_ACQUIRE_ID_FIELD_DESC);
          oprot.writeString(struct.dealAcquireId);
          oprot.writeFieldEnd();
        }
        if (struct.location != null) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          struct.location.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class redeem_argsTupleSchemeFactory implements SchemeFactory {
      public redeem_argsTupleScheme getScheme() {
        return new redeem_argsTupleScheme();
      }
    }

    private static class redeem_argsTupleScheme extends TupleScheme<redeem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, redeem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDealAcquireId()) {
          optionals.set(0);
        }
        if (struct.isSetLocation()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDealAcquireId()) {
          oprot.writeString(struct.dealAcquireId);
        }
        if (struct.isSetLocation()) {
          struct.location.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, redeem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dealAcquireId = iprot.readString();
          struct.setDealAcquireIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.location = new com.talool.api.thrift.Location_t();
          struct.location.read(iprot);
          struct.setLocationIsSet(true);
        }
      }
    }

  }

  public static class redeem_result implements org.apache.thrift.TBase<redeem_result, redeem_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("redeem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new redeem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new redeem_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(redeem_result.class, metaDataMap);
    }

    public redeem_result() {
    }

    public redeem_result(
      String success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public redeem_result(redeem_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public redeem_result deepCopy() {
      return new redeem_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public redeem_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public redeem_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof redeem_result)
        return this.equals((redeem_result)that);
      return false;
    }

    public boolean equals(redeem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(redeem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      redeem_result typedOther = (redeem_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("redeem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class redeem_resultStandardSchemeFactory implements SchemeFactory {
      public redeem_resultStandardScheme getScheme() {
        return new redeem_resultStandardScheme();
      }
    }

    private static class redeem_resultStandardScheme extends StandardScheme<redeem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, redeem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, redeem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class redeem_resultTupleSchemeFactory implements SchemeFactory {
      public redeem_resultTupleScheme getScheme() {
        return new redeem_resultTupleScheme();
      }
    }

    private static class redeem_resultTupleScheme extends TupleScheme<redeem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, redeem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, redeem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getDealOffers_args implements org.apache.thrift.TBase<getDealOffers_args, getDealOffers_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDealOffers_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDealOffers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDealOffers_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDealOffers_args.class, metaDataMap);
    }

    public getDealOffers_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDealOffers_args(getDealOffers_args other) {
    }

    public getDealOffers_args deepCopy() {
      return new getDealOffers_args(this);
    }

    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDealOffers_args)
        return this.equals((getDealOffers_args)that);
      return false;
    }

    public boolean equals(getDealOffers_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDealOffers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDealOffers_args typedOther = (getDealOffers_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDealOffers_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getDealOffers_argsStandardSchemeFactory implements SchemeFactory {
      public getDealOffers_argsStandardScheme getScheme() {
        return new getDealOffers_argsStandardScheme();
      }
    }

    private static class getDealOffers_argsStandardScheme extends StandardScheme<getDealOffers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDealOffers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDealOffers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDealOffers_argsTupleSchemeFactory implements SchemeFactory {
      public getDealOffers_argsTupleScheme getScheme() {
        return new getDealOffers_argsTupleScheme();
      }
    }

    private static class getDealOffers_argsTupleScheme extends TupleScheme<getDealOffers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDealOffers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDealOffers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getDealOffers_result implements org.apache.thrift.TBase<getDealOffers_result, getDealOffers_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDealOffers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDealOffers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDealOffers_resultTupleSchemeFactory());
    }

    public List<com.talool.api.thrift.DealOffer_t> success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.DealOffer_t.class))));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDealOffers_result.class, metaDataMap);
    }

    public getDealOffers_result() {
    }

    public getDealOffers_result(
      List<com.talool.api.thrift.DealOffer_t> success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDealOffers_result(getDealOffers_result other) {
      if (other.isSetSuccess()) {
        List<com.talool.api.thrift.DealOffer_t> __this__success = new ArrayList<com.talool.api.thrift.DealOffer_t>();
        for (com.talool.api.thrift.DealOffer_t other_element : other.success) {
          __this__success.add(new com.talool.api.thrift.DealOffer_t(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public getDealOffers_result deepCopy() {
      return new getDealOffers_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.talool.api.thrift.DealOffer_t> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.talool.api.thrift.DealOffer_t elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.talool.api.thrift.DealOffer_t>();
      }
      this.success.add(elem);
    }

    public List<com.talool.api.thrift.DealOffer_t> getSuccess() {
      return this.success;
    }

    public getDealOffers_result setSuccess(List<com.talool.api.thrift.DealOffer_t> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public getDealOffers_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.talool.api.thrift.DealOffer_t>)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDealOffers_result)
        return this.equals((getDealOffers_result)that);
      return false;
    }

    public boolean equals(getDealOffers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDealOffers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDealOffers_result typedOther = (getDealOffers_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDealOffers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getDealOffers_resultStandardSchemeFactory implements SchemeFactory {
      public getDealOffers_resultStandardScheme getScheme() {
        return new getDealOffers_resultStandardScheme();
      }
    }

    private static class getDealOffers_resultStandardScheme extends StandardScheme<getDealOffers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDealOffers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<com.talool.api.thrift.DealOffer_t>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    com.talool.api.thrift.DealOffer_t _elem50; // required
                    _elem50 = new com.talool.api.thrift.DealOffer_t();
                    _elem50.read(iprot);
                    struct.success.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDealOffers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.talool.api.thrift.DealOffer_t _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDealOffers_resultTupleSchemeFactory implements SchemeFactory {
      public getDealOffers_resultTupleScheme getScheme() {
        return new getDealOffers_resultTupleScheme();
      }
    }

    private static class getDealOffers_resultTupleScheme extends TupleScheme<getDealOffers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDealOffers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.talool.api.thrift.DealOffer_t _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDealOffers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.talool.api.thrift.DealOffer_t>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              com.talool.api.thrift.DealOffer_t _elem55; // required
              _elem55 = new com.talool.api.thrift.DealOffer_t();
              _elem55.read(iprot);
              struct.success.add(_elem55);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class activateCode_args implements org.apache.thrift.TBase<activateCode_args, activateCode_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateCode_args");

    private static final org.apache.thrift.protocol.TField DEAL_OFFERID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealOfferid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateCode_argsTupleSchemeFactory());
    }

    public String dealOfferid; // required
    public String code; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEAL_OFFERID((short)1, "dealOfferid"),
      CODE((short)2, "code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEAL_OFFERID
            return DEAL_OFFERID;
          case 2: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEAL_OFFERID, new org.apache.thrift.meta_data.FieldMetaData("dealOfferid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateCode_args.class, metaDataMap);
    }

    public activateCode_args() {
    }

    public activateCode_args(
      String dealOfferid,
      String code)
    {
      this();
      this.dealOfferid = dealOfferid;
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateCode_args(activateCode_args other) {
      if (other.isSetDealOfferid()) {
        this.dealOfferid = other.dealOfferid;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
    }

    public activateCode_args deepCopy() {
      return new activateCode_args(this);
    }

    public void clear() {
      this.dealOfferid = null;
      this.code = null;
    }

    public String getDealOfferid() {
      return this.dealOfferid;
    }

    public activateCode_args setDealOfferid(String dealOfferid) {
      this.dealOfferid = dealOfferid;
      return this;
    }

    public void unsetDealOfferid() {
      this.dealOfferid = null;
    }

    /** Returns true if field dealOfferid is set (has been assigned a value) and false otherwise */
    public boolean isSetDealOfferid() {
      return this.dealOfferid != null;
    }

    public void setDealOfferidIsSet(boolean value) {
      if (!value) {
        this.dealOfferid = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public activateCode_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEAL_OFFERID:
        if (value == null) {
          unsetDealOfferid();
        } else {
          setDealOfferid((String)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEAL_OFFERID:
        return getDealOfferid();

      case CODE:
        return getCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEAL_OFFERID:
        return isSetDealOfferid();
      case CODE:
        return isSetCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateCode_args)
        return this.equals((activateCode_args)that);
      return false;
    }

    public boolean equals(activateCode_args that) {
      if (that == null)
        return false;

      boolean this_present_dealOfferid = true && this.isSetDealOfferid();
      boolean that_present_dealOfferid = true && that.isSetDealOfferid();
      if (this_present_dealOfferid || that_present_dealOfferid) {
        if (!(this_present_dealOfferid && that_present_dealOfferid))
          return false;
        if (!this.dealOfferid.equals(that.dealOfferid))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(activateCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      activateCode_args typedOther = (activateCode_args)other;

      lastComparison = Boolean.valueOf(isSetDealOfferid()).compareTo(typedOther.isSetDealOfferid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDealOfferid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealOfferid, typedOther.dealOfferid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, typedOther.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateCode_args(");
      boolean first = true;

      sb.append("dealOfferid:");
      if (this.dealOfferid == null) {
        sb.append("null");
      } else {
        sb.append(this.dealOfferid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class activateCode_argsStandardSchemeFactory implements SchemeFactory {
      public activateCode_argsStandardScheme getScheme() {
        return new activateCode_argsStandardScheme();
      }
    }

    private static class activateCode_argsStandardScheme extends StandardScheme<activateCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEAL_OFFERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dealOfferid = iprot.readString();
                struct.setDealOfferidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dealOfferid != null) {
          oprot.writeFieldBegin(DEAL_OFFERID_FIELD_DESC);
          oprot.writeString(struct.dealOfferid);
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateCode_argsTupleSchemeFactory implements SchemeFactory {
      public activateCode_argsTupleScheme getScheme() {
        return new activateCode_argsTupleScheme();
      }
    }

    private static class activateCode_argsTupleScheme extends TupleScheme<activateCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDealOfferid()) {
          optionals.set(0);
        }
        if (struct.isSetCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDealOfferid()) {
          oprot.writeString(struct.dealOfferid);
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dealOfferid = iprot.readString();
          struct.setDealOfferidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
      }
    }

  }

  public static class activateCode_result implements org.apache.thrift.TBase<activateCode_result, activateCode_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateCode_result");

    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateCode_resultTupleSchemeFactory());
    }

    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateCode_result.class, metaDataMap);
    }

    public activateCode_result() {
    }

    public activateCode_result(
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateCode_result(activateCode_result other) {
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public activateCode_result deepCopy() {
      return new activateCode_result(this);
    }

    public void clear() {
      this.error = null;
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public activateCode_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateCode_result)
        return this.equals((activateCode_result)that);
      return false;
    }

    public boolean equals(activateCode_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(activateCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      activateCode_result typedOther = (activateCode_result)other;

      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateCode_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class activateCode_resultStandardSchemeFactory implements SchemeFactory {
      public activateCode_resultStandardScheme getScheme() {
        return new activateCode_resultStandardScheme();
      }
    }

    private static class activateCode_resultStandardScheme extends StandardScheme<activateCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateCode_resultTupleSchemeFactory implements SchemeFactory {
      public activateCode_resultTupleScheme getScheme() {
        return new activateCode_resultTupleScheme();
      }
    }

    private static class activateCode_resultTupleScheme extends TupleScheme<activateCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetError()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getDealOffer_args implements org.apache.thrift.TBase<getDealOffer_args, getDealOffer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDealOffer_args");

    private static final org.apache.thrift.protocol.TField DEAL_OFFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealOfferId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDealOffer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDealOffer_argsTupleSchemeFactory());
    }

    public String dealOfferId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEAL_OFFER_ID((short)1, "dealOfferId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEAL_OFFER_ID
            return DEAL_OFFER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEAL_OFFER_ID, new org.apache.thrift.meta_data.FieldMetaData("dealOfferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDealOffer_args.class, metaDataMap);
    }

    public getDealOffer_args() {
    }

    public getDealOffer_args(
      String dealOfferId)
    {
      this();
      this.dealOfferId = dealOfferId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDealOffer_args(getDealOffer_args other) {
      if (other.isSetDealOfferId()) {
        this.dealOfferId = other.dealOfferId;
      }
    }

    public getDealOffer_args deepCopy() {
      return new getDealOffer_args(this);
    }

    public void clear() {
      this.dealOfferId = null;
    }

    public String getDealOfferId() {
      return this.dealOfferId;
    }

    public getDealOffer_args setDealOfferId(String dealOfferId) {
      this.dealOfferId = dealOfferId;
      return this;
    }

    public void unsetDealOfferId() {
      this.dealOfferId = null;
    }

    /** Returns true if field dealOfferId is set (has been assigned a value) and false otherwise */
    public boolean isSetDealOfferId() {
      return this.dealOfferId != null;
    }

    public void setDealOfferIdIsSet(boolean value) {
      if (!value) {
        this.dealOfferId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEAL_OFFER_ID:
        if (value == null) {
          unsetDealOfferId();
        } else {
          setDealOfferId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEAL_OFFER_ID:
        return getDealOfferId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEAL_OFFER_ID:
        return isSetDealOfferId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDealOffer_args)
        return this.equals((getDealOffer_args)that);
      return false;
    }

    public boolean equals(getDealOffer_args that) {
      if (that == null)
        return false;

      boolean this_present_dealOfferId = true && this.isSetDealOfferId();
      boolean that_present_dealOfferId = true && that.isSetDealOfferId();
      if (this_present_dealOfferId || that_present_dealOfferId) {
        if (!(this_present_dealOfferId && that_present_dealOfferId))
          return false;
        if (!this.dealOfferId.equals(that.dealOfferId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDealOffer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDealOffer_args typedOther = (getDealOffer_args)other;

      lastComparison = Boolean.valueOf(isSetDealOfferId()).compareTo(typedOther.isSetDealOfferId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDealOfferId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealOfferId, typedOther.dealOfferId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDealOffer_args(");
      boolean first = true;

      sb.append("dealOfferId:");
      if (this.dealOfferId == null) {
        sb.append("null");
      } else {
        sb.append(this.dealOfferId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getDealOffer_argsStandardSchemeFactory implements SchemeFactory {
      public getDealOffer_argsStandardScheme getScheme() {
        return new getDealOffer_argsStandardScheme();
      }
    }

    private static class getDealOffer_argsStandardScheme extends StandardScheme<getDealOffer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDealOffer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEAL_OFFER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dealOfferId = iprot.readString();
                struct.setDealOfferIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDealOffer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dealOfferId != null) {
          oprot.writeFieldBegin(DEAL_OFFER_ID_FIELD_DESC);
          oprot.writeString(struct.dealOfferId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDealOffer_argsTupleSchemeFactory implements SchemeFactory {
      public getDealOffer_argsTupleScheme getScheme() {
        return new getDealOffer_argsTupleScheme();
      }
    }

    private static class getDealOffer_argsTupleScheme extends TupleScheme<getDealOffer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDealOffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDealOfferId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDealOfferId()) {
          oprot.writeString(struct.dealOfferId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDealOffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dealOfferId = iprot.readString();
          struct.setDealOfferIdIsSet(true);
        }
      }
    }

  }

  public static class getDealOffer_result implements org.apache.thrift.TBase<getDealOffer_result, getDealOffer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDealOffer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDealOffer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDealOffer_resultTupleSchemeFactory());
    }

    public com.talool.api.thrift.DealOffer_t success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.DealOffer_t.class)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDealOffer_result.class, metaDataMap);
    }

    public getDealOffer_result() {
    }

    public getDealOffer_result(
      com.talool.api.thrift.DealOffer_t success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDealOffer_result(getDealOffer_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.talool.api.thrift.DealOffer_t(other.success);
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public getDealOffer_result deepCopy() {
      return new getDealOffer_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public com.talool.api.thrift.DealOffer_t getSuccess() {
      return this.success;
    }

    public getDealOffer_result setSuccess(com.talool.api.thrift.DealOffer_t success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public getDealOffer_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.talool.api.thrift.DealOffer_t)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDealOffer_result)
        return this.equals((getDealOffer_result)that);
      return false;
    }

    public boolean equals(getDealOffer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDealOffer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDealOffer_result typedOther = (getDealOffer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDealOffer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getDealOffer_resultStandardSchemeFactory implements SchemeFactory {
      public getDealOffer_resultStandardScheme getScheme() {
        return new getDealOffer_resultStandardScheme();
      }
    }

    private static class getDealOffer_resultStandardScheme extends StandardScheme<getDealOffer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDealOffer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.talool.api.thrift.DealOffer_t();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDealOffer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDealOffer_resultTupleSchemeFactory implements SchemeFactory {
      public getDealOffer_resultTupleScheme getScheme() {
        return new getDealOffer_resultTupleScheme();
      }
    }

    private static class getDealOffer_resultTupleScheme extends TupleScheme<getDealOffer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDealOffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDealOffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.talool.api.thrift.DealOffer_t();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getDealsByDealOfferId_args implements org.apache.thrift.TBase<getDealsByDealOfferId_args, getDealsByDealOfferId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDealsByDealOfferId_args");

    private static final org.apache.thrift.protocol.TField DEAL_OFFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealOfferId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SEARCH_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("searchOptions", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDealsByDealOfferId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDealsByDealOfferId_argsTupleSchemeFactory());
    }

    public String dealOfferId; // required
    public com.talool.api.thrift.SearchOptions_t searchOptions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEAL_OFFER_ID((short)1, "dealOfferId"),
      SEARCH_OPTIONS((short)2, "searchOptions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEAL_OFFER_ID
            return DEAL_OFFER_ID;
          case 2: // SEARCH_OPTIONS
            return SEARCH_OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEAL_OFFER_ID, new org.apache.thrift.meta_data.FieldMetaData("dealOfferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEARCH_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("searchOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.SearchOptions_t.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDealsByDealOfferId_args.class, metaDataMap);
    }

    public getDealsByDealOfferId_args() {
    }

    public getDealsByDealOfferId_args(
      String dealOfferId,
      com.talool.api.thrift.SearchOptions_t searchOptions)
    {
      this();
      this.dealOfferId = dealOfferId;
      this.searchOptions = searchOptions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDealsByDealOfferId_args(getDealsByDealOfferId_args other) {
      if (other.isSetDealOfferId()) {
        this.dealOfferId = other.dealOfferId;
      }
      if (other.isSetSearchOptions()) {
        this.searchOptions = new com.talool.api.thrift.SearchOptions_t(other.searchOptions);
      }
    }

    public getDealsByDealOfferId_args deepCopy() {
      return new getDealsByDealOfferId_args(this);
    }

    public void clear() {
      this.dealOfferId = null;
      this.searchOptions = null;
    }

    public String getDealOfferId() {
      return this.dealOfferId;
    }

    public getDealsByDealOfferId_args setDealOfferId(String dealOfferId) {
      this.dealOfferId = dealOfferId;
      return this;
    }

    public void unsetDealOfferId() {
      this.dealOfferId = null;
    }

    /** Returns true if field dealOfferId is set (has been assigned a value) and false otherwise */
    public boolean isSetDealOfferId() {
      return this.dealOfferId != null;
    }

    public void setDealOfferIdIsSet(boolean value) {
      if (!value) {
        this.dealOfferId = null;
      }
    }

    public com.talool.api.thrift.SearchOptions_t getSearchOptions() {
      return this.searchOptions;
    }

    public getDealsByDealOfferId_args setSearchOptions(com.talool.api.thrift.SearchOptions_t searchOptions) {
      this.searchOptions = searchOptions;
      return this;
    }

    public void unsetSearchOptions() {
      this.searchOptions = null;
    }

    /** Returns true if field searchOptions is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchOptions() {
      return this.searchOptions != null;
    }

    public void setSearchOptionsIsSet(boolean value) {
      if (!value) {
        this.searchOptions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEAL_OFFER_ID:
        if (value == null) {
          unsetDealOfferId();
        } else {
          setDealOfferId((String)value);
        }
        break;

      case SEARCH_OPTIONS:
        if (value == null) {
          unsetSearchOptions();
        } else {
          setSearchOptions((com.talool.api.thrift.SearchOptions_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEAL_OFFER_ID:
        return getDealOfferId();

      case SEARCH_OPTIONS:
        return getSearchOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEAL_OFFER_ID:
        return isSetDealOfferId();
      case SEARCH_OPTIONS:
        return isSetSearchOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDealsByDealOfferId_args)
        return this.equals((getDealsByDealOfferId_args)that);
      return false;
    }

    public boolean equals(getDealsByDealOfferId_args that) {
      if (that == null)
        return false;

      boolean this_present_dealOfferId = true && this.isSetDealOfferId();
      boolean that_present_dealOfferId = true && that.isSetDealOfferId();
      if (this_present_dealOfferId || that_present_dealOfferId) {
        if (!(this_present_dealOfferId && that_present_dealOfferId))
          return false;
        if (!this.dealOfferId.equals(that.dealOfferId))
          return false;
      }

      boolean this_present_searchOptions = true && this.isSetSearchOptions();
      boolean that_present_searchOptions = true && that.isSetSearchOptions();
      if (this_present_searchOptions || that_present_searchOptions) {
        if (!(this_present_searchOptions && that_present_searchOptions))
          return false;
        if (!this.searchOptions.equals(that.searchOptions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDealsByDealOfferId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDealsByDealOfferId_args typedOther = (getDealsByDealOfferId_args)other;

      lastComparison = Boolean.valueOf(isSetDealOfferId()).compareTo(typedOther.isSetDealOfferId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDealOfferId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealOfferId, typedOther.dealOfferId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSearchOptions()).compareTo(typedOther.isSetSearchOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchOptions, typedOther.searchOptions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDealsByDealOfferId_args(");
      boolean first = true;

      sb.append("dealOfferId:");
      if (this.dealOfferId == null) {
        sb.append("null");
      } else {
        sb.append(this.dealOfferId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchOptions:");
      if (this.searchOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.searchOptions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (searchOptions != null) {
        searchOptions.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getDealsByDealOfferId_argsStandardSchemeFactory implements SchemeFactory {
      public getDealsByDealOfferId_argsStandardScheme getScheme() {
        return new getDealsByDealOfferId_argsStandardScheme();
      }
    }

    private static class getDealsByDealOfferId_argsStandardScheme extends StandardScheme<getDealsByDealOfferId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDealsByDealOfferId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEAL_OFFER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dealOfferId = iprot.readString();
                struct.setDealOfferIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEARCH_OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
                struct.searchOptions.read(iprot);
                struct.setSearchOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDealsByDealOfferId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dealOfferId != null) {
          oprot.writeFieldBegin(DEAL_OFFER_ID_FIELD_DESC);
          oprot.writeString(struct.dealOfferId);
          oprot.writeFieldEnd();
        }
        if (struct.searchOptions != null) {
          oprot.writeFieldBegin(SEARCH_OPTIONS_FIELD_DESC);
          struct.searchOptions.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDealsByDealOfferId_argsTupleSchemeFactory implements SchemeFactory {
      public getDealsByDealOfferId_argsTupleScheme getScheme() {
        return new getDealsByDealOfferId_argsTupleScheme();
      }
    }

    private static class getDealsByDealOfferId_argsTupleScheme extends TupleScheme<getDealsByDealOfferId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDealsByDealOfferId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDealOfferId()) {
          optionals.set(0);
        }
        if (struct.isSetSearchOptions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDealOfferId()) {
          oprot.writeString(struct.dealOfferId);
        }
        if (struct.isSetSearchOptions()) {
          struct.searchOptions.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDealsByDealOfferId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dealOfferId = iprot.readString();
          struct.setDealOfferIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
          struct.searchOptions.read(iprot);
          struct.setSearchOptionsIsSet(true);
        }
      }
    }

  }

  public static class getDealsByDealOfferId_result implements org.apache.thrift.TBase<getDealsByDealOfferId_result, getDealsByDealOfferId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDealsByDealOfferId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDealsByDealOfferId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDealsByDealOfferId_resultTupleSchemeFactory());
    }

    public List<com.talool.api.thrift.Deal_t> success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.Deal_t.class))));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDealsByDealOfferId_result.class, metaDataMap);
    }

    public getDealsByDealOfferId_result() {
    }

    public getDealsByDealOfferId_result(
      List<com.talool.api.thrift.Deal_t> success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDealsByDealOfferId_result(getDealsByDealOfferId_result other) {
      if (other.isSetSuccess()) {
        List<com.talool.api.thrift.Deal_t> __this__success = new ArrayList<com.talool.api.thrift.Deal_t>();
        for (com.talool.api.thrift.Deal_t other_element : other.success) {
          __this__success.add(new com.talool.api.thrift.Deal_t(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public getDealsByDealOfferId_result deepCopy() {
      return new getDealsByDealOfferId_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.talool.api.thrift.Deal_t> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.talool.api.thrift.Deal_t elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.talool.api.thrift.Deal_t>();
      }
      this.success.add(elem);
    }

    public List<com.talool.api.thrift.Deal_t> getSuccess() {
      return this.success;
    }

    public getDealsByDealOfferId_result setSuccess(List<com.talool.api.thrift.Deal_t> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public getDealsByDealOfferId_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.talool.api.thrift.Deal_t>)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDealsByDealOfferId_result)
        return this.equals((getDealsByDealOfferId_result)that);
      return false;
    }

    public boolean equals(getDealsByDealOfferId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDealsByDealOfferId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDealsByDealOfferId_result typedOther = (getDealsByDealOfferId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDealsByDealOfferId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getDealsByDealOfferId_resultStandardSchemeFactory implements SchemeFactory {
      public getDealsByDealOfferId_resultStandardScheme getScheme() {
        return new getDealsByDealOfferId_resultStandardScheme();
      }
    }

    private static class getDealsByDealOfferId_resultStandardScheme extends StandardScheme<getDealsByDealOfferId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDealsByDealOfferId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<com.talool.api.thrift.Deal_t>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    com.talool.api.thrift.Deal_t _elem58; // required
                    _elem58 = new com.talool.api.thrift.Deal_t();
                    _elem58.read(iprot);
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDealsByDealOfferId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.talool.api.thrift.Deal_t _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDealsByDealOfferId_resultTupleSchemeFactory implements SchemeFactory {
      public getDealsByDealOfferId_resultTupleScheme getScheme() {
        return new getDealsByDealOfferId_resultTupleScheme();
      }
    }

    private static class getDealsByDealOfferId_resultTupleScheme extends TupleScheme<getDealsByDealOfferId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDealsByDealOfferId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.talool.api.thrift.Deal_t _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDealsByDealOfferId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.talool.api.thrift.Deal_t>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              com.talool.api.thrift.Deal_t _elem63; // required
              _elem63 = new com.talool.api.thrift.Deal_t();
              _elem63.read(iprot);
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class purchaseDealOffer_args implements org.apache.thrift.TBase<purchaseDealOffer_args, purchaseDealOffer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purchaseDealOffer_args");

    private static final org.apache.thrift.protocol.TField DEAL_OFFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealOfferId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purchaseDealOffer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purchaseDealOffer_argsTupleSchemeFactory());
    }

    public String dealOfferId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEAL_OFFER_ID((short)1, "dealOfferId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEAL_OFFER_ID
            return DEAL_OFFER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEAL_OFFER_ID, new org.apache.thrift.meta_data.FieldMetaData("dealOfferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purchaseDealOffer_args.class, metaDataMap);
    }

    public purchaseDealOffer_args() {
    }

    public purchaseDealOffer_args(
      String dealOfferId)
    {
      this();
      this.dealOfferId = dealOfferId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purchaseDealOffer_args(purchaseDealOffer_args other) {
      if (other.isSetDealOfferId()) {
        this.dealOfferId = other.dealOfferId;
      }
    }

    public purchaseDealOffer_args deepCopy() {
      return new purchaseDealOffer_args(this);
    }

    public void clear() {
      this.dealOfferId = null;
    }

    public String getDealOfferId() {
      return this.dealOfferId;
    }

    public purchaseDealOffer_args setDealOfferId(String dealOfferId) {
      this.dealOfferId = dealOfferId;
      return this;
    }

    public void unsetDealOfferId() {
      this.dealOfferId = null;
    }

    /** Returns true if field dealOfferId is set (has been assigned a value) and false otherwise */
    public boolean isSetDealOfferId() {
      return this.dealOfferId != null;
    }

    public void setDealOfferIdIsSet(boolean value) {
      if (!value) {
        this.dealOfferId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEAL_OFFER_ID:
        if (value == null) {
          unsetDealOfferId();
        } else {
          setDealOfferId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEAL_OFFER_ID:
        return getDealOfferId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEAL_OFFER_ID:
        return isSetDealOfferId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purchaseDealOffer_args)
        return this.equals((purchaseDealOffer_args)that);
      return false;
    }

    public boolean equals(purchaseDealOffer_args that) {
      if (that == null)
        return false;

      boolean this_present_dealOfferId = true && this.isSetDealOfferId();
      boolean that_present_dealOfferId = true && that.isSetDealOfferId();
      if (this_present_dealOfferId || that_present_dealOfferId) {
        if (!(this_present_dealOfferId && that_present_dealOfferId))
          return false;
        if (!this.dealOfferId.equals(that.dealOfferId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(purchaseDealOffer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      purchaseDealOffer_args typedOther = (purchaseDealOffer_args)other;

      lastComparison = Boolean.valueOf(isSetDealOfferId()).compareTo(typedOther.isSetDealOfferId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDealOfferId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealOfferId, typedOther.dealOfferId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purchaseDealOffer_args(");
      boolean first = true;

      sb.append("dealOfferId:");
      if (this.dealOfferId == null) {
        sb.append("null");
      } else {
        sb.append(this.dealOfferId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class purchaseDealOffer_argsStandardSchemeFactory implements SchemeFactory {
      public purchaseDealOffer_argsStandardScheme getScheme() {
        return new purchaseDealOffer_argsStandardScheme();
      }
    }

    private static class purchaseDealOffer_argsStandardScheme extends StandardScheme<purchaseDealOffer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purchaseDealOffer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEAL_OFFER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dealOfferId = iprot.readString();
                struct.setDealOfferIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purchaseDealOffer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dealOfferId != null) {
          oprot.writeFieldBegin(DEAL_OFFER_ID_FIELD_DESC);
          oprot.writeString(struct.dealOfferId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purchaseDealOffer_argsTupleSchemeFactory implements SchemeFactory {
      public purchaseDealOffer_argsTupleScheme getScheme() {
        return new purchaseDealOffer_argsTupleScheme();
      }
    }

    private static class purchaseDealOffer_argsTupleScheme extends TupleScheme<purchaseDealOffer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purchaseDealOffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDealOfferId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDealOfferId()) {
          oprot.writeString(struct.dealOfferId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purchaseDealOffer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dealOfferId = iprot.readString();
          struct.setDealOfferIdIsSet(true);
        }
      }
    }

  }

  public static class purchaseDealOffer_result implements org.apache.thrift.TBase<purchaseDealOffer_result, purchaseDealOffer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purchaseDealOffer_result");

    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purchaseDealOffer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purchaseDealOffer_resultTupleSchemeFactory());
    }

    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purchaseDealOffer_result.class, metaDataMap);
    }

    public purchaseDealOffer_result() {
    }

    public purchaseDealOffer_result(
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purchaseDealOffer_result(purchaseDealOffer_result other) {
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public purchaseDealOffer_result deepCopy() {
      return new purchaseDealOffer_result(this);
    }

    public void clear() {
      this.error = null;
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public purchaseDealOffer_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purchaseDealOffer_result)
        return this.equals((purchaseDealOffer_result)that);
      return false;
    }

    public boolean equals(purchaseDealOffer_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(purchaseDealOffer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      purchaseDealOffer_result typedOther = (purchaseDealOffer_result)other;

      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purchaseDealOffer_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class purchaseDealOffer_resultStandardSchemeFactory implements SchemeFactory {
      public purchaseDealOffer_resultStandardScheme getScheme() {
        return new purchaseDealOffer_resultStandardScheme();
      }
    }

    private static class purchaseDealOffer_resultStandardScheme extends StandardScheme<purchaseDealOffer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purchaseDealOffer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purchaseDealOffer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purchaseDealOffer_resultTupleSchemeFactory implements SchemeFactory {
      public purchaseDealOffer_resultTupleScheme getScheme() {
        return new purchaseDealOffer_resultTupleScheme();
      }
    }

    private static class purchaseDealOffer_resultTupleScheme extends TupleScheme<purchaseDealOffer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purchaseDealOffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetError()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purchaseDealOffer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getMerchantsWithin_args implements org.apache.thrift.TBase<getMerchantsWithin_args, getMerchantsWithin_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantsWithin_args");

    private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MAX_MILES_FIELD_DESC = new org.apache.thrift.protocol.TField("maxMiles", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SEARCH_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("searchOptions", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantsWithin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantsWithin_argsTupleSchemeFactory());
    }

    public com.talool.api.thrift.Location_t location; // required
    public int maxMiles; // required
    public com.talool.api.thrift.SearchOptions_t searchOptions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCATION((short)1, "location"),
      MAX_MILES((short)2, "maxMiles"),
      SEARCH_OPTIONS((short)3, "searchOptions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCATION
            return LOCATION;
          case 2: // MAX_MILES
            return MAX_MILES;
          case 3: // SEARCH_OPTIONS
            return SEARCH_OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MAXMILES_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.Location_t.class)));
      tmpMap.put(_Fields.MAX_MILES, new org.apache.thrift.meta_data.FieldMetaData("maxMiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SEARCH_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("searchOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.SearchOptions_t.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantsWithin_args.class, metaDataMap);
    }

    public getMerchantsWithin_args() {
    }

    public getMerchantsWithin_args(
      com.talool.api.thrift.Location_t location,
      int maxMiles,
      com.talool.api.thrift.SearchOptions_t searchOptions)
    {
      this();
      this.location = location;
      this.maxMiles = maxMiles;
      setMaxMilesIsSet(true);
      this.searchOptions = searchOptions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantsWithin_args(getMerchantsWithin_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetLocation()) {
        this.location = new com.talool.api.thrift.Location_t(other.location);
      }
      this.maxMiles = other.maxMiles;
      if (other.isSetSearchOptions()) {
        this.searchOptions = new com.talool.api.thrift.SearchOptions_t(other.searchOptions);
      }
    }

    public getMerchantsWithin_args deepCopy() {
      return new getMerchantsWithin_args(this);
    }

    public void clear() {
      this.location = null;
      setMaxMilesIsSet(false);
      this.maxMiles = 0;
      this.searchOptions = null;
    }

    public com.talool.api.thrift.Location_t getLocation() {
      return this.location;
    }

    public getMerchantsWithin_args setLocation(com.talool.api.thrift.Location_t location) {
      this.location = location;
      return this;
    }

    public void unsetLocation() {
      this.location = null;
    }

    /** Returns true if field location is set (has been assigned a value) and false otherwise */
    public boolean isSetLocation() {
      return this.location != null;
    }

    public void setLocationIsSet(boolean value) {
      if (!value) {
        this.location = null;
      }
    }

    public int getMaxMiles() {
      return this.maxMiles;
    }

    public getMerchantsWithin_args setMaxMiles(int maxMiles) {
      this.maxMiles = maxMiles;
      setMaxMilesIsSet(true);
      return this;
    }

    public void unsetMaxMiles() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXMILES_ISSET_ID);
    }

    /** Returns true if field maxMiles is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxMiles() {
      return EncodingUtils.testBit(__isset_bitfield, __MAXMILES_ISSET_ID);
    }

    public void setMaxMilesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXMILES_ISSET_ID, value);
    }

    public com.talool.api.thrift.SearchOptions_t getSearchOptions() {
      return this.searchOptions;
    }

    public getMerchantsWithin_args setSearchOptions(com.talool.api.thrift.SearchOptions_t searchOptions) {
      this.searchOptions = searchOptions;
      return this;
    }

    public void unsetSearchOptions() {
      this.searchOptions = null;
    }

    /** Returns true if field searchOptions is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchOptions() {
      return this.searchOptions != null;
    }

    public void setSearchOptionsIsSet(boolean value) {
      if (!value) {
        this.searchOptions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          setLocation((com.talool.api.thrift.Location_t)value);
        }
        break;

      case MAX_MILES:
        if (value == null) {
          unsetMaxMiles();
        } else {
          setMaxMiles((Integer)value);
        }
        break;

      case SEARCH_OPTIONS:
        if (value == null) {
          unsetSearchOptions();
        } else {
          setSearchOptions((com.talool.api.thrift.SearchOptions_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCATION:
        return getLocation();

      case MAX_MILES:
        return Integer.valueOf(getMaxMiles());

      case SEARCH_OPTIONS:
        return getSearchOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOCATION:
        return isSetLocation();
      case MAX_MILES:
        return isSetMaxMiles();
      case SEARCH_OPTIONS:
        return isSetSearchOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantsWithin_args)
        return this.equals((getMerchantsWithin_args)that);
      return false;
    }

    public boolean equals(getMerchantsWithin_args that) {
      if (that == null)
        return false;

      boolean this_present_location = true && this.isSetLocation();
      boolean that_present_location = true && that.isSetLocation();
      if (this_present_location || that_present_location) {
        if (!(this_present_location && that_present_location))
          return false;
        if (!this.location.equals(that.location))
          return false;
      }

      boolean this_present_maxMiles = true;
      boolean that_present_maxMiles = true;
      if (this_present_maxMiles || that_present_maxMiles) {
        if (!(this_present_maxMiles && that_present_maxMiles))
          return false;
        if (this.maxMiles != that.maxMiles)
          return false;
      }

      boolean this_present_searchOptions = true && this.isSetSearchOptions();
      boolean that_present_searchOptions = true && that.isSetSearchOptions();
      if (this_present_searchOptions || that_present_searchOptions) {
        if (!(this_present_searchOptions && that_present_searchOptions))
          return false;
        if (!this.searchOptions.equals(that.searchOptions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMerchantsWithin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMerchantsWithin_args typedOther = (getMerchantsWithin_args)other;

      lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxMiles()).compareTo(typedOther.isSetMaxMiles());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxMiles()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxMiles, typedOther.maxMiles);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSearchOptions()).compareTo(typedOther.isSetSearchOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchOptions, typedOther.searchOptions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantsWithin_args(");
      boolean first = true;

      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxMiles:");
      sb.append(this.maxMiles);
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchOptions:");
      if (this.searchOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.searchOptions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (location != null) {
        location.validate();
      }
      if (searchOptions != null) {
        searchOptions.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMerchantsWithin_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantsWithin_argsStandardScheme getScheme() {
        return new getMerchantsWithin_argsStandardScheme();
      }
    }

    private static class getMerchantsWithin_argsStandardScheme extends StandardScheme<getMerchantsWithin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantsWithin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.location = new com.talool.api.thrift.Location_t();
                struct.location.read(iprot);
                struct.setLocationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MAX_MILES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.maxMiles = iprot.readI32();
                struct.setMaxMilesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SEARCH_OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
                struct.searchOptions.read(iprot);
                struct.setSearchOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantsWithin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.location != null) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          struct.location.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MAX_MILES_FIELD_DESC);
        oprot.writeI32(struct.maxMiles);
        oprot.writeFieldEnd();
        if (struct.searchOptions != null) {
          oprot.writeFieldBegin(SEARCH_OPTIONS_FIELD_DESC);
          struct.searchOptions.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantsWithin_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantsWithin_argsTupleScheme getScheme() {
        return new getMerchantsWithin_argsTupleScheme();
      }
    }

    private static class getMerchantsWithin_argsTupleScheme extends TupleScheme<getMerchantsWithin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantsWithin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLocation()) {
          optionals.set(0);
        }
        if (struct.isSetMaxMiles()) {
          optionals.set(1);
        }
        if (struct.isSetSearchOptions()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLocation()) {
          struct.location.write(oprot);
        }
        if (struct.isSetMaxMiles()) {
          oprot.writeI32(struct.maxMiles);
        }
        if (struct.isSetSearchOptions()) {
          struct.searchOptions.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantsWithin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.location = new com.talool.api.thrift.Location_t();
          struct.location.read(iprot);
          struct.setLocationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.maxMiles = iprot.readI32();
          struct.setMaxMilesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
          struct.searchOptions.read(iprot);
          struct.setSearchOptionsIsSet(true);
        }
      }
    }

  }

  public static class getMerchantsWithin_result implements org.apache.thrift.TBase<getMerchantsWithin_result, getMerchantsWithin_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantsWithin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantsWithin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantsWithin_resultTupleSchemeFactory());
    }

    public List<com.talool.api.thrift.Merchant_t> success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.Merchant_t.class))));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantsWithin_result.class, metaDataMap);
    }

    public getMerchantsWithin_result() {
    }

    public getMerchantsWithin_result(
      List<com.talool.api.thrift.Merchant_t> success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantsWithin_result(getMerchantsWithin_result other) {
      if (other.isSetSuccess()) {
        List<com.talool.api.thrift.Merchant_t> __this__success = new ArrayList<com.talool.api.thrift.Merchant_t>();
        for (com.talool.api.thrift.Merchant_t other_element : other.success) {
          __this__success.add(new com.talool.api.thrift.Merchant_t(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public getMerchantsWithin_result deepCopy() {
      return new getMerchantsWithin_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.talool.api.thrift.Merchant_t> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.talool.api.thrift.Merchant_t elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.talool.api.thrift.Merchant_t>();
      }
      this.success.add(elem);
    }

    public List<com.talool.api.thrift.Merchant_t> getSuccess() {
      return this.success;
    }

    public getMerchantsWithin_result setSuccess(List<com.talool.api.thrift.Merchant_t> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public getMerchantsWithin_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.talool.api.thrift.Merchant_t>)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantsWithin_result)
        return this.equals((getMerchantsWithin_result)that);
      return false;
    }

    public boolean equals(getMerchantsWithin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMerchantsWithin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMerchantsWithin_result typedOther = (getMerchantsWithin_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantsWithin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMerchantsWithin_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantsWithin_resultStandardScheme getScheme() {
        return new getMerchantsWithin_resultStandardScheme();
      }
    }

    private static class getMerchantsWithin_resultStandardScheme extends StandardScheme<getMerchantsWithin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantsWithin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<com.talool.api.thrift.Merchant_t>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    com.talool.api.thrift.Merchant_t _elem66; // required
                    _elem66 = new com.talool.api.thrift.Merchant_t();
                    _elem66.read(iprot);
                    struct.success.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantsWithin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.talool.api.thrift.Merchant_t _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantsWithin_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantsWithin_resultTupleScheme getScheme() {
        return new getMerchantsWithin_resultTupleScheme();
      }
    }

    private static class getMerchantsWithin_resultTupleScheme extends TupleScheme<getMerchantsWithin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantsWithin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.talool.api.thrift.Merchant_t _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantsWithin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.talool.api.thrift.Merchant_t>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              com.talool.api.thrift.Merchant_t _elem71; // required
              _elem71 = new com.talool.api.thrift.Merchant_t();
              _elem71.read(iprot);
              struct.success.add(_elem71);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class addFavoriteMerchant_args implements org.apache.thrift.TBase<addFavoriteMerchant_args, addFavoriteMerchant_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFavoriteMerchant_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFavoriteMerchant_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFavoriteMerchant_argsTupleSchemeFactory());
    }

    public String merchantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFavoriteMerchant_args.class, metaDataMap);
    }

    public addFavoriteMerchant_args() {
    }

    public addFavoriteMerchant_args(
      String merchantId)
    {
      this();
      this.merchantId = merchantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFavoriteMerchant_args(addFavoriteMerchant_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
    }

    public addFavoriteMerchant_args deepCopy() {
      return new addFavoriteMerchant_args(this);
    }

    public void clear() {
      this.merchantId = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public addFavoriteMerchant_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFavoriteMerchant_args)
        return this.equals((addFavoriteMerchant_args)that);
      return false;
    }

    public boolean equals(addFavoriteMerchant_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addFavoriteMerchant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addFavoriteMerchant_args typedOther = (addFavoriteMerchant_args)other;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(typedOther.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, typedOther.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFavoriteMerchant_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class addFavoriteMerchant_argsStandardSchemeFactory implements SchemeFactory {
      public addFavoriteMerchant_argsStandardScheme getScheme() {
        return new addFavoriteMerchant_argsStandardScheme();
      }
    }

    private static class addFavoriteMerchant_argsStandardScheme extends StandardScheme<addFavoriteMerchant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFavoriteMerchant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFavoriteMerchant_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFavoriteMerchant_argsTupleSchemeFactory implements SchemeFactory {
      public addFavoriteMerchant_argsTupleScheme getScheme() {
        return new addFavoriteMerchant_argsTupleScheme();
      }
    }

    private static class addFavoriteMerchant_argsTupleScheme extends TupleScheme<addFavoriteMerchant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFavoriteMerchant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFavoriteMerchant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
      }
    }

  }

  public static class addFavoriteMerchant_result implements org.apache.thrift.TBase<addFavoriteMerchant_result, addFavoriteMerchant_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFavoriteMerchant_result");

    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFavoriteMerchant_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFavoriteMerchant_resultTupleSchemeFactory());
    }

    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFavoriteMerchant_result.class, metaDataMap);
    }

    public addFavoriteMerchant_result() {
    }

    public addFavoriteMerchant_result(
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFavoriteMerchant_result(addFavoriteMerchant_result other) {
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public addFavoriteMerchant_result deepCopy() {
      return new addFavoriteMerchant_result(this);
    }

    public void clear() {
      this.error = null;
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public addFavoriteMerchant_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFavoriteMerchant_result)
        return this.equals((addFavoriteMerchant_result)that);
      return false;
    }

    public boolean equals(addFavoriteMerchant_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addFavoriteMerchant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addFavoriteMerchant_result typedOther = (addFavoriteMerchant_result)other;

      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFavoriteMerchant_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class addFavoriteMerchant_resultStandardSchemeFactory implements SchemeFactory {
      public addFavoriteMerchant_resultStandardScheme getScheme() {
        return new addFavoriteMerchant_resultStandardScheme();
      }
    }

    private static class addFavoriteMerchant_resultStandardScheme extends StandardScheme<addFavoriteMerchant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFavoriteMerchant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFavoriteMerchant_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFavoriteMerchant_resultTupleSchemeFactory implements SchemeFactory {
      public addFavoriteMerchant_resultTupleScheme getScheme() {
        return new addFavoriteMerchant_resultTupleScheme();
      }
    }

    private static class addFavoriteMerchant_resultTupleScheme extends TupleScheme<addFavoriteMerchant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFavoriteMerchant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetError()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFavoriteMerchant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class removeFavoriteMerchant_args implements org.apache.thrift.TBase<removeFavoriteMerchant_args, removeFavoriteMerchant_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeFavoriteMerchant_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeFavoriteMerchant_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeFavoriteMerchant_argsTupleSchemeFactory());
    }

    public String merchantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeFavoriteMerchant_args.class, metaDataMap);
    }

    public removeFavoriteMerchant_args() {
    }

    public removeFavoriteMerchant_args(
      String merchantId)
    {
      this();
      this.merchantId = merchantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeFavoriteMerchant_args(removeFavoriteMerchant_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
    }

    public removeFavoriteMerchant_args deepCopy() {
      return new removeFavoriteMerchant_args(this);
    }

    public void clear() {
      this.merchantId = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public removeFavoriteMerchant_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeFavoriteMerchant_args)
        return this.equals((removeFavoriteMerchant_args)that);
      return false;
    }

    public boolean equals(removeFavoriteMerchant_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeFavoriteMerchant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeFavoriteMerchant_args typedOther = (removeFavoriteMerchant_args)other;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(typedOther.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, typedOther.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeFavoriteMerchant_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class removeFavoriteMerchant_argsStandardSchemeFactory implements SchemeFactory {
      public removeFavoriteMerchant_argsStandardScheme getScheme() {
        return new removeFavoriteMerchant_argsStandardScheme();
      }
    }

    private static class removeFavoriteMerchant_argsStandardScheme extends StandardScheme<removeFavoriteMerchant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeFavoriteMerchant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeFavoriteMerchant_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeFavoriteMerchant_argsTupleSchemeFactory implements SchemeFactory {
      public removeFavoriteMerchant_argsTupleScheme getScheme() {
        return new removeFavoriteMerchant_argsTupleScheme();
      }
    }

    private static class removeFavoriteMerchant_argsTupleScheme extends TupleScheme<removeFavoriteMerchant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeFavoriteMerchant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeFavoriteMerchant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
      }
    }

  }

  public static class removeFavoriteMerchant_result implements org.apache.thrift.TBase<removeFavoriteMerchant_result, removeFavoriteMerchant_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeFavoriteMerchant_result");

    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeFavoriteMerchant_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeFavoriteMerchant_resultTupleSchemeFactory());
    }

    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeFavoriteMerchant_result.class, metaDataMap);
    }

    public removeFavoriteMerchant_result() {
    }

    public removeFavoriteMerchant_result(
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeFavoriteMerchant_result(removeFavoriteMerchant_result other) {
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public removeFavoriteMerchant_result deepCopy() {
      return new removeFavoriteMerchant_result(this);
    }

    public void clear() {
      this.error = null;
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public removeFavoriteMerchant_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeFavoriteMerchant_result)
        return this.equals((removeFavoriteMerchant_result)that);
      return false;
    }

    public boolean equals(removeFavoriteMerchant_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeFavoriteMerchant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeFavoriteMerchant_result typedOther = (removeFavoriteMerchant_result)other;

      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeFavoriteMerchant_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class removeFavoriteMerchant_resultStandardSchemeFactory implements SchemeFactory {
      public removeFavoriteMerchant_resultStandardScheme getScheme() {
        return new removeFavoriteMerchant_resultStandardScheme();
      }
    }

    private static class removeFavoriteMerchant_resultStandardScheme extends StandardScheme<removeFavoriteMerchant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeFavoriteMerchant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeFavoriteMerchant_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeFavoriteMerchant_resultTupleSchemeFactory implements SchemeFactory {
      public removeFavoriteMerchant_resultTupleScheme getScheme() {
        return new removeFavoriteMerchant_resultTupleScheme();
      }
    }

    private static class removeFavoriteMerchant_resultTupleScheme extends TupleScheme<removeFavoriteMerchant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeFavoriteMerchant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetError()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeFavoriteMerchant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getFavoriteMerchants_args implements org.apache.thrift.TBase<getFavoriteMerchants_args, getFavoriteMerchants_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFavoriteMerchants_args");

    private static final org.apache.thrift.protocol.TField SEARCH_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("searchOptions", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFavoriteMerchants_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFavoriteMerchants_argsTupleSchemeFactory());
    }

    public com.talool.api.thrift.SearchOptions_t searchOptions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_OPTIONS((short)1, "searchOptions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_OPTIONS
            return SEARCH_OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("searchOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.SearchOptions_t.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFavoriteMerchants_args.class, metaDataMap);
    }

    public getFavoriteMerchants_args() {
    }

    public getFavoriteMerchants_args(
      com.talool.api.thrift.SearchOptions_t searchOptions)
    {
      this();
      this.searchOptions = searchOptions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFavoriteMerchants_args(getFavoriteMerchants_args other) {
      if (other.isSetSearchOptions()) {
        this.searchOptions = new com.talool.api.thrift.SearchOptions_t(other.searchOptions);
      }
    }

    public getFavoriteMerchants_args deepCopy() {
      return new getFavoriteMerchants_args(this);
    }

    public void clear() {
      this.searchOptions = null;
    }

    public com.talool.api.thrift.SearchOptions_t getSearchOptions() {
      return this.searchOptions;
    }

    public getFavoriteMerchants_args setSearchOptions(com.talool.api.thrift.SearchOptions_t searchOptions) {
      this.searchOptions = searchOptions;
      return this;
    }

    public void unsetSearchOptions() {
      this.searchOptions = null;
    }

    /** Returns true if field searchOptions is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchOptions() {
      return this.searchOptions != null;
    }

    public void setSearchOptionsIsSet(boolean value) {
      if (!value) {
        this.searchOptions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEARCH_OPTIONS:
        if (value == null) {
          unsetSearchOptions();
        } else {
          setSearchOptions((com.talool.api.thrift.SearchOptions_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_OPTIONS:
        return getSearchOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_OPTIONS:
        return isSetSearchOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFavoriteMerchants_args)
        return this.equals((getFavoriteMerchants_args)that);
      return false;
    }

    public boolean equals(getFavoriteMerchants_args that) {
      if (that == null)
        return false;

      boolean this_present_searchOptions = true && this.isSetSearchOptions();
      boolean that_present_searchOptions = true && that.isSetSearchOptions();
      if (this_present_searchOptions || that_present_searchOptions) {
        if (!(this_present_searchOptions && that_present_searchOptions))
          return false;
        if (!this.searchOptions.equals(that.searchOptions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFavoriteMerchants_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFavoriteMerchants_args typedOther = (getFavoriteMerchants_args)other;

      lastComparison = Boolean.valueOf(isSetSearchOptions()).compareTo(typedOther.isSetSearchOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchOptions, typedOther.searchOptions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFavoriteMerchants_args(");
      boolean first = true;

      sb.append("searchOptions:");
      if (this.searchOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.searchOptions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (searchOptions != null) {
        searchOptions.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getFavoriteMerchants_argsStandardSchemeFactory implements SchemeFactory {
      public getFavoriteMerchants_argsStandardScheme getScheme() {
        return new getFavoriteMerchants_argsStandardScheme();
      }
    }

    private static class getFavoriteMerchants_argsStandardScheme extends StandardScheme<getFavoriteMerchants_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFavoriteMerchants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
                struct.searchOptions.read(iprot);
                struct.setSearchOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFavoriteMerchants_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchOptions != null) {
          oprot.writeFieldBegin(SEARCH_OPTIONS_FIELD_DESC);
          struct.searchOptions.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFavoriteMerchants_argsTupleSchemeFactory implements SchemeFactory {
      public getFavoriteMerchants_argsTupleScheme getScheme() {
        return new getFavoriteMerchants_argsTupleScheme();
      }
    }

    private static class getFavoriteMerchants_argsTupleScheme extends TupleScheme<getFavoriteMerchants_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFavoriteMerchants_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSearchOptions()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSearchOptions()) {
          struct.searchOptions.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFavoriteMerchants_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
          struct.searchOptions.read(iprot);
          struct.setSearchOptionsIsSet(true);
        }
      }
    }

  }

  public static class getFavoriteMerchants_result implements org.apache.thrift.TBase<getFavoriteMerchants_result, getFavoriteMerchants_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFavoriteMerchants_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFavoriteMerchants_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFavoriteMerchants_resultTupleSchemeFactory());
    }

    public List<com.talool.api.thrift.Merchant_t> success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.Merchant_t.class))));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFavoriteMerchants_result.class, metaDataMap);
    }

    public getFavoriteMerchants_result() {
    }

    public getFavoriteMerchants_result(
      List<com.talool.api.thrift.Merchant_t> success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFavoriteMerchants_result(getFavoriteMerchants_result other) {
      if (other.isSetSuccess()) {
        List<com.talool.api.thrift.Merchant_t> __this__success = new ArrayList<com.talool.api.thrift.Merchant_t>();
        for (com.talool.api.thrift.Merchant_t other_element : other.success) {
          __this__success.add(new com.talool.api.thrift.Merchant_t(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public getFavoriteMerchants_result deepCopy() {
      return new getFavoriteMerchants_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.talool.api.thrift.Merchant_t> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.talool.api.thrift.Merchant_t elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.talool.api.thrift.Merchant_t>();
      }
      this.success.add(elem);
    }

    public List<com.talool.api.thrift.Merchant_t> getSuccess() {
      return this.success;
    }

    public getFavoriteMerchants_result setSuccess(List<com.talool.api.thrift.Merchant_t> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public getFavoriteMerchants_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.talool.api.thrift.Merchant_t>)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFavoriteMerchants_result)
        return this.equals((getFavoriteMerchants_result)that);
      return false;
    }

    public boolean equals(getFavoriteMerchants_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFavoriteMerchants_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFavoriteMerchants_result typedOther = (getFavoriteMerchants_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFavoriteMerchants_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getFavoriteMerchants_resultStandardSchemeFactory implements SchemeFactory {
      public getFavoriteMerchants_resultStandardScheme getScheme() {
        return new getFavoriteMerchants_resultStandardScheme();
      }
    }

    private static class getFavoriteMerchants_resultStandardScheme extends StandardScheme<getFavoriteMerchants_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFavoriteMerchants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<com.talool.api.thrift.Merchant_t>(_list72.size);
                  for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                  {
                    com.talool.api.thrift.Merchant_t _elem74; // required
                    _elem74 = new com.talool.api.thrift.Merchant_t();
                    _elem74.read(iprot);
                    struct.success.add(_elem74);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFavoriteMerchants_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.talool.api.thrift.Merchant_t _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFavoriteMerchants_resultTupleSchemeFactory implements SchemeFactory {
      public getFavoriteMerchants_resultTupleScheme getScheme() {
        return new getFavoriteMerchants_resultTupleScheme();
      }
    }

    private static class getFavoriteMerchants_resultTupleScheme extends TupleScheme<getFavoriteMerchants_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFavoriteMerchants_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.talool.api.thrift.Merchant_t _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFavoriteMerchants_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.talool.api.thrift.Merchant_t>(_list77.size);
            for (int _i78 = 0; _i78 < _list77.size; ++_i78)
            {
              com.talool.api.thrift.Merchant_t _elem79; // required
              _elem79 = new com.talool.api.thrift.Merchant_t();
              _elem79.read(iprot);
              struct.success.add(_elem79);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getCategories_args implements org.apache.thrift.TBase<getCategories_args, getCategories_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCategories_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCategories_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCategories_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCategories_args.class, metaDataMap);
    }

    public getCategories_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCategories_args(getCategories_args other) {
    }

    public getCategories_args deepCopy() {
      return new getCategories_args(this);
    }

    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCategories_args)
        return this.equals((getCategories_args)that);
      return false;
    }

    public boolean equals(getCategories_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCategories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCategories_args typedOther = (getCategories_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCategories_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getCategories_argsStandardSchemeFactory implements SchemeFactory {
      public getCategories_argsStandardScheme getScheme() {
        return new getCategories_argsStandardScheme();
      }
    }

    private static class getCategories_argsStandardScheme extends StandardScheme<getCategories_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCategories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCategories_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCategories_argsTupleSchemeFactory implements SchemeFactory {
      public getCategories_argsTupleScheme getScheme() {
        return new getCategories_argsTupleScheme();
      }
    }

    private static class getCategories_argsTupleScheme extends TupleScheme<getCategories_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCategories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCategories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getCategories_result implements org.apache.thrift.TBase<getCategories_result, getCategories_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCategories_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCategories_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCategories_resultTupleSchemeFactory());
    }

    public List<com.talool.api.thrift.Category_t> success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.Category_t.class))));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCategories_result.class, metaDataMap);
    }

    public getCategories_result() {
    }

    public getCategories_result(
      List<com.talool.api.thrift.Category_t> success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCategories_result(getCategories_result other) {
      if (other.isSetSuccess()) {
        List<com.talool.api.thrift.Category_t> __this__success = new ArrayList<com.talool.api.thrift.Category_t>();
        for (com.talool.api.thrift.Category_t other_element : other.success) {
          __this__success.add(new com.talool.api.thrift.Category_t(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public getCategories_result deepCopy() {
      return new getCategories_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.talool.api.thrift.Category_t> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.talool.api.thrift.Category_t elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.talool.api.thrift.Category_t>();
      }
      this.success.add(elem);
    }

    public List<com.talool.api.thrift.Category_t> getSuccess() {
      return this.success;
    }

    public getCategories_result setSuccess(List<com.talool.api.thrift.Category_t> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public getCategories_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.talool.api.thrift.Category_t>)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCategories_result)
        return this.equals((getCategories_result)that);
      return false;
    }

    public boolean equals(getCategories_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCategories_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCategories_result typedOther = (getCategories_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCategories_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getCategories_resultStandardSchemeFactory implements SchemeFactory {
      public getCategories_resultStandardScheme getScheme() {
        return new getCategories_resultStandardScheme();
      }
    }

    private static class getCategories_resultStandardScheme extends StandardScheme<getCategories_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCategories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<com.talool.api.thrift.Category_t>(_list80.size);
                  for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                  {
                    com.talool.api.thrift.Category_t _elem82; // required
                    _elem82 = new com.talool.api.thrift.Category_t();
                    _elem82.read(iprot);
                    struct.success.add(_elem82);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCategories_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.talool.api.thrift.Category_t _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCategories_resultTupleSchemeFactory implements SchemeFactory {
      public getCategories_resultTupleScheme getScheme() {
        return new getCategories_resultTupleScheme();
      }
    }

    private static class getCategories_resultTupleScheme extends TupleScheme<getCategories_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCategories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.talool.api.thrift.Category_t _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCategories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.talool.api.thrift.Category_t>(_list85.size);
            for (int _i86 = 0; _i86 < _list85.size; ++_i86)
            {
              com.talool.api.thrift.Category_t _elem87; // required
              _elem87 = new com.talool.api.thrift.Category_t();
              _elem87.read(iprot);
              struct.success.add(_elem87);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class giftToFacebook_args implements org.apache.thrift.TBase<giftToFacebook_args, giftToFacebook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("giftToFacebook_args");

    private static final org.apache.thrift.protocol.TField DEAL_ACQUIRE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealAcquireId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FACEBOOK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("facebookId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RECEIPIENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("receipientName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new giftToFacebook_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new giftToFacebook_argsTupleSchemeFactory());
    }

    public String dealAcquireId; // required
    public String facebookId; // required
    public String receipientName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEAL_ACQUIRE_ID((short)1, "dealAcquireId"),
      FACEBOOK_ID((short)2, "facebookId"),
      RECEIPIENT_NAME((short)3, "receipientName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEAL_ACQUIRE_ID
            return DEAL_ACQUIRE_ID;
          case 2: // FACEBOOK_ID
            return FACEBOOK_ID;
          case 3: // RECEIPIENT_NAME
            return RECEIPIENT_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEAL_ACQUIRE_ID, new org.apache.thrift.meta_data.FieldMetaData("dealAcquireId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FACEBOOK_ID, new org.apache.thrift.meta_data.FieldMetaData("facebookId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RECEIPIENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("receipientName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(giftToFacebook_args.class, metaDataMap);
    }

    public giftToFacebook_args() {
    }

    public giftToFacebook_args(
      String dealAcquireId,
      String facebookId,
      String receipientName)
    {
      this();
      this.dealAcquireId = dealAcquireId;
      this.facebookId = facebookId;
      this.receipientName = receipientName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public giftToFacebook_args(giftToFacebook_args other) {
      if (other.isSetDealAcquireId()) {
        this.dealAcquireId = other.dealAcquireId;
      }
      if (other.isSetFacebookId()) {
        this.facebookId = other.facebookId;
      }
      if (other.isSetReceipientName()) {
        this.receipientName = other.receipientName;
      }
    }

    public giftToFacebook_args deepCopy() {
      return new giftToFacebook_args(this);
    }

    public void clear() {
      this.dealAcquireId = null;
      this.facebookId = null;
      this.receipientName = null;
    }

    public String getDealAcquireId() {
      return this.dealAcquireId;
    }

    public giftToFacebook_args setDealAcquireId(String dealAcquireId) {
      this.dealAcquireId = dealAcquireId;
      return this;
    }

    public void unsetDealAcquireId() {
      this.dealAcquireId = null;
    }

    /** Returns true if field dealAcquireId is set (has been assigned a value) and false otherwise */
    public boolean isSetDealAcquireId() {
      return this.dealAcquireId != null;
    }

    public void setDealAcquireIdIsSet(boolean value) {
      if (!value) {
        this.dealAcquireId = null;
      }
    }

    public String getFacebookId() {
      return this.facebookId;
    }

    public giftToFacebook_args setFacebookId(String facebookId) {
      this.facebookId = facebookId;
      return this;
    }

    public void unsetFacebookId() {
      this.facebookId = null;
    }

    /** Returns true if field facebookId is set (has been assigned a value) and false otherwise */
    public boolean isSetFacebookId() {
      return this.facebookId != null;
    }

    public void setFacebookIdIsSet(boolean value) {
      if (!value) {
        this.facebookId = null;
      }
    }

    public String getReceipientName() {
      return this.receipientName;
    }

    public giftToFacebook_args setReceipientName(String receipientName) {
      this.receipientName = receipientName;
      return this;
    }

    public void unsetReceipientName() {
      this.receipientName = null;
    }

    /** Returns true if field receipientName is set (has been assigned a value) and false otherwise */
    public boolean isSetReceipientName() {
      return this.receipientName != null;
    }

    public void setReceipientNameIsSet(boolean value) {
      if (!value) {
        this.receipientName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEAL_ACQUIRE_ID:
        if (value == null) {
          unsetDealAcquireId();
        } else {
          setDealAcquireId((String)value);
        }
        break;

      case FACEBOOK_ID:
        if (value == null) {
          unsetFacebookId();
        } else {
          setFacebookId((String)value);
        }
        break;

      case RECEIPIENT_NAME:
        if (value == null) {
          unsetReceipientName();
        } else {
          setReceipientName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEAL_ACQUIRE_ID:
        return getDealAcquireId();

      case FACEBOOK_ID:
        return getFacebookId();

      case RECEIPIENT_NAME:
        return getReceipientName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEAL_ACQUIRE_ID:
        return isSetDealAcquireId();
      case FACEBOOK_ID:
        return isSetFacebookId();
      case RECEIPIENT_NAME:
        return isSetReceipientName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof giftToFacebook_args)
        return this.equals((giftToFacebook_args)that);
      return false;
    }

    public boolean equals(giftToFacebook_args that) {
      if (that == null)
        return false;

      boolean this_present_dealAcquireId = true && this.isSetDealAcquireId();
      boolean that_present_dealAcquireId = true && that.isSetDealAcquireId();
      if (this_present_dealAcquireId || that_present_dealAcquireId) {
        if (!(this_present_dealAcquireId && that_present_dealAcquireId))
          return false;
        if (!this.dealAcquireId.equals(that.dealAcquireId))
          return false;
      }

      boolean this_present_facebookId = true && this.isSetFacebookId();
      boolean that_present_facebookId = true && that.isSetFacebookId();
      if (this_present_facebookId || that_present_facebookId) {
        if (!(this_present_facebookId && that_present_facebookId))
          return false;
        if (!this.facebookId.equals(that.facebookId))
          return false;
      }

      boolean this_present_receipientName = true && this.isSetReceipientName();
      boolean that_present_receipientName = true && that.isSetReceipientName();
      if (this_present_receipientName || that_present_receipientName) {
        if (!(this_present_receipientName && that_present_receipientName))
          return false;
        if (!this.receipientName.equals(that.receipientName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(giftToFacebook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      giftToFacebook_args typedOther = (giftToFacebook_args)other;

      lastComparison = Boolean.valueOf(isSetDealAcquireId()).compareTo(typedOther.isSetDealAcquireId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDealAcquireId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealAcquireId, typedOther.dealAcquireId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFacebookId()).compareTo(typedOther.isSetFacebookId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFacebookId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facebookId, typedOther.facebookId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReceipientName()).compareTo(typedOther.isSetReceipientName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceipientName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receipientName, typedOther.receipientName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("giftToFacebook_args(");
      boolean first = true;

      sb.append("dealAcquireId:");
      if (this.dealAcquireId == null) {
        sb.append("null");
      } else {
        sb.append(this.dealAcquireId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("facebookId:");
      if (this.facebookId == null) {
        sb.append("null");
      } else {
        sb.append(this.facebookId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("receipientName:");
      if (this.receipientName == null) {
        sb.append("null");
      } else {
        sb.append(this.receipientName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class giftToFacebook_argsStandardSchemeFactory implements SchemeFactory {
      public giftToFacebook_argsStandardScheme getScheme() {
        return new giftToFacebook_argsStandardScheme();
      }
    }

    private static class giftToFacebook_argsStandardScheme extends StandardScheme<giftToFacebook_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, giftToFacebook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEAL_ACQUIRE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dealAcquireId = iprot.readString();
                struct.setDealAcquireIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FACEBOOK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.facebookId = iprot.readString();
                struct.setFacebookIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RECEIPIENT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.receipientName = iprot.readString();
                struct.setReceipientNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, giftToFacebook_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dealAcquireId != null) {
          oprot.writeFieldBegin(DEAL_ACQUIRE_ID_FIELD_DESC);
          oprot.writeString(struct.dealAcquireId);
          oprot.writeFieldEnd();
        }
        if (struct.facebookId != null) {
          oprot.writeFieldBegin(FACEBOOK_ID_FIELD_DESC);
          oprot.writeString(struct.facebookId);
          oprot.writeFieldEnd();
        }
        if (struct.receipientName != null) {
          oprot.writeFieldBegin(RECEIPIENT_NAME_FIELD_DESC);
          oprot.writeString(struct.receipientName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class giftToFacebook_argsTupleSchemeFactory implements SchemeFactory {
      public giftToFacebook_argsTupleScheme getScheme() {
        return new giftToFacebook_argsTupleScheme();
      }
    }

    private static class giftToFacebook_argsTupleScheme extends TupleScheme<giftToFacebook_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, giftToFacebook_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDealAcquireId()) {
          optionals.set(0);
        }
        if (struct.isSetFacebookId()) {
          optionals.set(1);
        }
        if (struct.isSetReceipientName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDealAcquireId()) {
          oprot.writeString(struct.dealAcquireId);
        }
        if (struct.isSetFacebookId()) {
          oprot.writeString(struct.facebookId);
        }
        if (struct.isSetReceipientName()) {
          oprot.writeString(struct.receipientName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, giftToFacebook_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dealAcquireId = iprot.readString();
          struct.setDealAcquireIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.facebookId = iprot.readString();
          struct.setFacebookIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.receipientName = iprot.readString();
          struct.setReceipientNameIsSet(true);
        }
      }
    }

  }

  public static class giftToFacebook_result implements org.apache.thrift.TBase<giftToFacebook_result, giftToFacebook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("giftToFacebook_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new giftToFacebook_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new giftToFacebook_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(giftToFacebook_result.class, metaDataMap);
    }

    public giftToFacebook_result() {
    }

    public giftToFacebook_result(
      String success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public giftToFacebook_result(giftToFacebook_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public giftToFacebook_result deepCopy() {
      return new giftToFacebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public giftToFacebook_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public giftToFacebook_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof giftToFacebook_result)
        return this.equals((giftToFacebook_result)that);
      return false;
    }

    public boolean equals(giftToFacebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(giftToFacebook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      giftToFacebook_result typedOther = (giftToFacebook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("giftToFacebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class giftToFacebook_resultStandardSchemeFactory implements SchemeFactory {
      public giftToFacebook_resultStandardScheme getScheme() {
        return new giftToFacebook_resultStandardScheme();
      }
    }

    private static class giftToFacebook_resultStandardScheme extends StandardScheme<giftToFacebook_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, giftToFacebook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, giftToFacebook_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class giftToFacebook_resultTupleSchemeFactory implements SchemeFactory {
      public giftToFacebook_resultTupleScheme getScheme() {
        return new giftToFacebook_resultTupleScheme();
      }
    }

    private static class giftToFacebook_resultTupleScheme extends TupleScheme<giftToFacebook_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, giftToFacebook_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, giftToFacebook_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class giftToEmail_args implements org.apache.thrift.TBase<giftToEmail_args, giftToEmail_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("giftToEmail_args");

    private static final org.apache.thrift.protocol.TField DEAL_ACQUIRE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealAcquireId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RECEIPIENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("receipientName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new giftToEmail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new giftToEmail_argsTupleSchemeFactory());
    }

    public String dealAcquireId; // required
    public String email; // required
    public String receipientName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEAL_ACQUIRE_ID((short)1, "dealAcquireId"),
      EMAIL((short)2, "email"),
      RECEIPIENT_NAME((short)3, "receipientName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEAL_ACQUIRE_ID
            return DEAL_ACQUIRE_ID;
          case 2: // EMAIL
            return EMAIL;
          case 3: // RECEIPIENT_NAME
            return RECEIPIENT_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEAL_ACQUIRE_ID, new org.apache.thrift.meta_data.FieldMetaData("dealAcquireId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RECEIPIENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("receipientName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(giftToEmail_args.class, metaDataMap);
    }

    public giftToEmail_args() {
    }

    public giftToEmail_args(
      String dealAcquireId,
      String email,
      String receipientName)
    {
      this();
      this.dealAcquireId = dealAcquireId;
      this.email = email;
      this.receipientName = receipientName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public giftToEmail_args(giftToEmail_args other) {
      if (other.isSetDealAcquireId()) {
        this.dealAcquireId = other.dealAcquireId;
      }
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      if (other.isSetReceipientName()) {
        this.receipientName = other.receipientName;
      }
    }

    public giftToEmail_args deepCopy() {
      return new giftToEmail_args(this);
    }

    public void clear() {
      this.dealAcquireId = null;
      this.email = null;
      this.receipientName = null;
    }

    public String getDealAcquireId() {
      return this.dealAcquireId;
    }

    public giftToEmail_args setDealAcquireId(String dealAcquireId) {
      this.dealAcquireId = dealAcquireId;
      return this;
    }

    public void unsetDealAcquireId() {
      this.dealAcquireId = null;
    }

    /** Returns true if field dealAcquireId is set (has been assigned a value) and false otherwise */
    public boolean isSetDealAcquireId() {
      return this.dealAcquireId != null;
    }

    public void setDealAcquireIdIsSet(boolean value) {
      if (!value) {
        this.dealAcquireId = null;
      }
    }

    public String getEmail() {
      return this.email;
    }

    public giftToEmail_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public String getReceipientName() {
      return this.receipientName;
    }

    public giftToEmail_args setReceipientName(String receipientName) {
      this.receipientName = receipientName;
      return this;
    }

    public void unsetReceipientName() {
      this.receipientName = null;
    }

    /** Returns true if field receipientName is set (has been assigned a value) and false otherwise */
    public boolean isSetReceipientName() {
      return this.receipientName != null;
    }

    public void setReceipientNameIsSet(boolean value) {
      if (!value) {
        this.receipientName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEAL_ACQUIRE_ID:
        if (value == null) {
          unsetDealAcquireId();
        } else {
          setDealAcquireId((String)value);
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      case RECEIPIENT_NAME:
        if (value == null) {
          unsetReceipientName();
        } else {
          setReceipientName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEAL_ACQUIRE_ID:
        return getDealAcquireId();

      case EMAIL:
        return getEmail();

      case RECEIPIENT_NAME:
        return getReceipientName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEAL_ACQUIRE_ID:
        return isSetDealAcquireId();
      case EMAIL:
        return isSetEmail();
      case RECEIPIENT_NAME:
        return isSetReceipientName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof giftToEmail_args)
        return this.equals((giftToEmail_args)that);
      return false;
    }

    public boolean equals(giftToEmail_args that) {
      if (that == null)
        return false;

      boolean this_present_dealAcquireId = true && this.isSetDealAcquireId();
      boolean that_present_dealAcquireId = true && that.isSetDealAcquireId();
      if (this_present_dealAcquireId || that_present_dealAcquireId) {
        if (!(this_present_dealAcquireId && that_present_dealAcquireId))
          return false;
        if (!this.dealAcquireId.equals(that.dealAcquireId))
          return false;
      }

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_receipientName = true && this.isSetReceipientName();
      boolean that_present_receipientName = true && that.isSetReceipientName();
      if (this_present_receipientName || that_present_receipientName) {
        if (!(this_present_receipientName && that_present_receipientName))
          return false;
        if (!this.receipientName.equals(that.receipientName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(giftToEmail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      giftToEmail_args typedOther = (giftToEmail_args)other;

      lastComparison = Boolean.valueOf(isSetDealAcquireId()).compareTo(typedOther.isSetDealAcquireId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDealAcquireId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealAcquireId, typedOther.dealAcquireId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReceipientName()).compareTo(typedOther.isSetReceipientName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceipientName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receipientName, typedOther.receipientName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("giftToEmail_args(");
      boolean first = true;

      sb.append("dealAcquireId:");
      if (this.dealAcquireId == null) {
        sb.append("null");
      } else {
        sb.append(this.dealAcquireId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("receipientName:");
      if (this.receipientName == null) {
        sb.append("null");
      } else {
        sb.append(this.receipientName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class giftToEmail_argsStandardSchemeFactory implements SchemeFactory {
      public giftToEmail_argsStandardScheme getScheme() {
        return new giftToEmail_argsStandardScheme();
      }
    }

    private static class giftToEmail_argsStandardScheme extends StandardScheme<giftToEmail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, giftToEmail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEAL_ACQUIRE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dealAcquireId = iprot.readString();
                struct.setDealAcquireIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RECEIPIENT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.receipientName = iprot.readString();
                struct.setReceipientNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, giftToEmail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dealAcquireId != null) {
          oprot.writeFieldBegin(DEAL_ACQUIRE_ID_FIELD_DESC);
          oprot.writeString(struct.dealAcquireId);
          oprot.writeFieldEnd();
        }
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        if (struct.receipientName != null) {
          oprot.writeFieldBegin(RECEIPIENT_NAME_FIELD_DESC);
          oprot.writeString(struct.receipientName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class giftToEmail_argsTupleSchemeFactory implements SchemeFactory {
      public giftToEmail_argsTupleScheme getScheme() {
        return new giftToEmail_argsTupleScheme();
      }
    }

    private static class giftToEmail_argsTupleScheme extends TupleScheme<giftToEmail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, giftToEmail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDealAcquireId()) {
          optionals.set(0);
        }
        if (struct.isSetEmail()) {
          optionals.set(1);
        }
        if (struct.isSetReceipientName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDealAcquireId()) {
          oprot.writeString(struct.dealAcquireId);
        }
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
        if (struct.isSetReceipientName()) {
          oprot.writeString(struct.receipientName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, giftToEmail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dealAcquireId = iprot.readString();
          struct.setDealAcquireIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
        if (incoming.get(2)) {
          struct.receipientName = iprot.readString();
          struct.setReceipientNameIsSet(true);
        }
      }
    }

  }

  public static class giftToEmail_result implements org.apache.thrift.TBase<giftToEmail_result, giftToEmail_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("giftToEmail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new giftToEmail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new giftToEmail_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(giftToEmail_result.class, metaDataMap);
    }

    public giftToEmail_result() {
    }

    public giftToEmail_result(
      String success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public giftToEmail_result(giftToEmail_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public giftToEmail_result deepCopy() {
      return new giftToEmail_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public giftToEmail_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public giftToEmail_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof giftToEmail_result)
        return this.equals((giftToEmail_result)that);
      return false;
    }

    public boolean equals(giftToEmail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(giftToEmail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      giftToEmail_result typedOther = (giftToEmail_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("giftToEmail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class giftToEmail_resultStandardSchemeFactory implements SchemeFactory {
      public giftToEmail_resultStandardScheme getScheme() {
        return new giftToEmail_resultStandardScheme();
      }
    }

    private static class giftToEmail_resultStandardScheme extends StandardScheme<giftToEmail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, giftToEmail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, giftToEmail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class giftToEmail_resultTupleSchemeFactory implements SchemeFactory {
      public giftToEmail_resultTupleScheme getScheme() {
        return new giftToEmail_resultTupleScheme();
      }
    }

    private static class giftToEmail_resultTupleScheme extends TupleScheme<giftToEmail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, giftToEmail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, giftToEmail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getGift_args implements org.apache.thrift.TBase<getGift_args, getGift_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGift_args");

    private static final org.apache.thrift.protocol.TField GIFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("giftId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGift_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGift_argsTupleSchemeFactory());
    }

    public String giftId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GIFT_ID((short)1, "giftId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GIFT_ID
            return GIFT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GIFT_ID, new org.apache.thrift.meta_data.FieldMetaData("giftId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGift_args.class, metaDataMap);
    }

    public getGift_args() {
    }

    public getGift_args(
      String giftId)
    {
      this();
      this.giftId = giftId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGift_args(getGift_args other) {
      if (other.isSetGiftId()) {
        this.giftId = other.giftId;
      }
    }

    public getGift_args deepCopy() {
      return new getGift_args(this);
    }

    public void clear() {
      this.giftId = null;
    }

    public String getGiftId() {
      return this.giftId;
    }

    public getGift_args setGiftId(String giftId) {
      this.giftId = giftId;
      return this;
    }

    public void unsetGiftId() {
      this.giftId = null;
    }

    /** Returns true if field giftId is set (has been assigned a value) and false otherwise */
    public boolean isSetGiftId() {
      return this.giftId != null;
    }

    public void setGiftIdIsSet(boolean value) {
      if (!value) {
        this.giftId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GIFT_ID:
        if (value == null) {
          unsetGiftId();
        } else {
          setGiftId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GIFT_ID:
        return getGiftId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GIFT_ID:
        return isSetGiftId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGift_args)
        return this.equals((getGift_args)that);
      return false;
    }

    public boolean equals(getGift_args that) {
      if (that == null)
        return false;

      boolean this_present_giftId = true && this.isSetGiftId();
      boolean that_present_giftId = true && that.isSetGiftId();
      if (this_present_giftId || that_present_giftId) {
        if (!(this_present_giftId && that_present_giftId))
          return false;
        if (!this.giftId.equals(that.giftId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGift_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGift_args typedOther = (getGift_args)other;

      lastComparison = Boolean.valueOf(isSetGiftId()).compareTo(typedOther.isSetGiftId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGiftId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftId, typedOther.giftId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGift_args(");
      boolean first = true;

      sb.append("giftId:");
      if (this.giftId == null) {
        sb.append("null");
      } else {
        sb.append(this.giftId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getGift_argsStandardSchemeFactory implements SchemeFactory {
      public getGift_argsStandardScheme getScheme() {
        return new getGift_argsStandardScheme();
      }
    }

    private static class getGift_argsStandardScheme extends StandardScheme<getGift_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGift_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GIFT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.giftId = iprot.readString();
                struct.setGiftIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGift_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.giftId != null) {
          oprot.writeFieldBegin(GIFT_ID_FIELD_DESC);
          oprot.writeString(struct.giftId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGift_argsTupleSchemeFactory implements SchemeFactory {
      public getGift_argsTupleScheme getScheme() {
        return new getGift_argsTupleScheme();
      }
    }

    private static class getGift_argsTupleScheme extends TupleScheme<getGift_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGiftId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGiftId()) {
          oprot.writeString(struct.giftId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.giftId = iprot.readString();
          struct.setGiftIdIsSet(true);
        }
      }
    }

  }

  public static class getGift_result implements org.apache.thrift.TBase<getGift_result, getGift_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGift_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGift_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGift_resultTupleSchemeFactory());
    }

    public com.talool.api.thrift.Gift_t success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.Gift_t.class)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGift_result.class, metaDataMap);
    }

    public getGift_result() {
    }

    public getGift_result(
      com.talool.api.thrift.Gift_t success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGift_result(getGift_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.talool.api.thrift.Gift_t(other.success);
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public getGift_result deepCopy() {
      return new getGift_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public com.talool.api.thrift.Gift_t getSuccess() {
      return this.success;
    }

    public getGift_result setSuccess(com.talool.api.thrift.Gift_t success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public getGift_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.talool.api.thrift.Gift_t)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGift_result)
        return this.equals((getGift_result)that);
      return false;
    }

    public boolean equals(getGift_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGift_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGift_result typedOther = (getGift_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGift_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getGift_resultStandardSchemeFactory implements SchemeFactory {
      public getGift_resultStandardScheme getScheme() {
        return new getGift_resultStandardScheme();
      }
    }

    private static class getGift_resultStandardScheme extends StandardScheme<getGift_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGift_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.talool.api.thrift.Gift_t();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGift_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGift_resultTupleSchemeFactory implements SchemeFactory {
      public getGift_resultTupleScheme getScheme() {
        return new getGift_resultTupleScheme();
      }
    }

    private static class getGift_resultTupleScheme extends TupleScheme<getGift_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.talool.api.thrift.Gift_t();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class acceptGift_args implements org.apache.thrift.TBase<acceptGift_args, acceptGift_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("acceptGift_args");

    private static final org.apache.thrift.protocol.TField GIFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("giftId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new acceptGift_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new acceptGift_argsTupleSchemeFactory());
    }

    public String giftId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GIFT_ID((short)1, "giftId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GIFT_ID
            return GIFT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GIFT_ID, new org.apache.thrift.meta_data.FieldMetaData("giftId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(acceptGift_args.class, metaDataMap);
    }

    public acceptGift_args() {
    }

    public acceptGift_args(
      String giftId)
    {
      this();
      this.giftId = giftId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acceptGift_args(acceptGift_args other) {
      if (other.isSetGiftId()) {
        this.giftId = other.giftId;
      }
    }

    public acceptGift_args deepCopy() {
      return new acceptGift_args(this);
    }

    public void clear() {
      this.giftId = null;
    }

    public String getGiftId() {
      return this.giftId;
    }

    public acceptGift_args setGiftId(String giftId) {
      this.giftId = giftId;
      return this;
    }

    public void unsetGiftId() {
      this.giftId = null;
    }

    /** Returns true if field giftId is set (has been assigned a value) and false otherwise */
    public boolean isSetGiftId() {
      return this.giftId != null;
    }

    public void setGiftIdIsSet(boolean value) {
      if (!value) {
        this.giftId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GIFT_ID:
        if (value == null) {
          unsetGiftId();
        } else {
          setGiftId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GIFT_ID:
        return getGiftId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GIFT_ID:
        return isSetGiftId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acceptGift_args)
        return this.equals((acceptGift_args)that);
      return false;
    }

    public boolean equals(acceptGift_args that) {
      if (that == null)
        return false;

      boolean this_present_giftId = true && this.isSetGiftId();
      boolean that_present_giftId = true && that.isSetGiftId();
      if (this_present_giftId || that_present_giftId) {
        if (!(this_present_giftId && that_present_giftId))
          return false;
        if (!this.giftId.equals(that.giftId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(acceptGift_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      acceptGift_args typedOther = (acceptGift_args)other;

      lastComparison = Boolean.valueOf(isSetGiftId()).compareTo(typedOther.isSetGiftId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGiftId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftId, typedOther.giftId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("acceptGift_args(");
      boolean first = true;

      sb.append("giftId:");
      if (this.giftId == null) {
        sb.append("null");
      } else {
        sb.append(this.giftId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class acceptGift_argsStandardSchemeFactory implements SchemeFactory {
      public acceptGift_argsStandardScheme getScheme() {
        return new acceptGift_argsStandardScheme();
      }
    }

    private static class acceptGift_argsStandardScheme extends StandardScheme<acceptGift_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, acceptGift_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GIFT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.giftId = iprot.readString();
                struct.setGiftIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, acceptGift_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.giftId != null) {
          oprot.writeFieldBegin(GIFT_ID_FIELD_DESC);
          oprot.writeString(struct.giftId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class acceptGift_argsTupleSchemeFactory implements SchemeFactory {
      public acceptGift_argsTupleScheme getScheme() {
        return new acceptGift_argsTupleScheme();
      }
    }

    private static class acceptGift_argsTupleScheme extends TupleScheme<acceptGift_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, acceptGift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGiftId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGiftId()) {
          oprot.writeString(struct.giftId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, acceptGift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.giftId = iprot.readString();
          struct.setGiftIdIsSet(true);
        }
      }
    }

  }

  public static class acceptGift_result implements org.apache.thrift.TBase<acceptGift_result, acceptGift_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("acceptGift_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new acceptGift_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new acceptGift_resultTupleSchemeFactory());
    }

    public com.talool.api.thrift.DealAcquire_t success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.DealAcquire_t.class)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(acceptGift_result.class, metaDataMap);
    }

    public acceptGift_result() {
    }

    public acceptGift_result(
      com.talool.api.thrift.DealAcquire_t success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acceptGift_result(acceptGift_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.talool.api.thrift.DealAcquire_t(other.success);
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public acceptGift_result deepCopy() {
      return new acceptGift_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public com.talool.api.thrift.DealAcquire_t getSuccess() {
      return this.success;
    }

    public acceptGift_result setSuccess(com.talool.api.thrift.DealAcquire_t success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public acceptGift_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.talool.api.thrift.DealAcquire_t)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acceptGift_result)
        return this.equals((acceptGift_result)that);
      return false;
    }

    public boolean equals(acceptGift_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(acceptGift_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      acceptGift_result typedOther = (acceptGift_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("acceptGift_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class acceptGift_resultStandardSchemeFactory implements SchemeFactory {
      public acceptGift_resultStandardScheme getScheme() {
        return new acceptGift_resultStandardScheme();
      }
    }

    private static class acceptGift_resultStandardScheme extends StandardScheme<acceptGift_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, acceptGift_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.talool.api.thrift.DealAcquire_t();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, acceptGift_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class acceptGift_resultTupleSchemeFactory implements SchemeFactory {
      public acceptGift_resultTupleScheme getScheme() {
        return new acceptGift_resultTupleScheme();
      }
    }

    private static class acceptGift_resultTupleScheme extends TupleScheme<acceptGift_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, acceptGift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, acceptGift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.talool.api.thrift.DealAcquire_t();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class rejectGift_args implements org.apache.thrift.TBase<rejectGift_args, rejectGift_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rejectGift_args");

    private static final org.apache.thrift.protocol.TField GIFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("giftId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rejectGift_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rejectGift_argsTupleSchemeFactory());
    }

    public String giftId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GIFT_ID((short)1, "giftId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GIFT_ID
            return GIFT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GIFT_ID, new org.apache.thrift.meta_data.FieldMetaData("giftId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rejectGift_args.class, metaDataMap);
    }

    public rejectGift_args() {
    }

    public rejectGift_args(
      String giftId)
    {
      this();
      this.giftId = giftId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rejectGift_args(rejectGift_args other) {
      if (other.isSetGiftId()) {
        this.giftId = other.giftId;
      }
    }

    public rejectGift_args deepCopy() {
      return new rejectGift_args(this);
    }

    public void clear() {
      this.giftId = null;
    }

    public String getGiftId() {
      return this.giftId;
    }

    public rejectGift_args setGiftId(String giftId) {
      this.giftId = giftId;
      return this;
    }

    public void unsetGiftId() {
      this.giftId = null;
    }

    /** Returns true if field giftId is set (has been assigned a value) and false otherwise */
    public boolean isSetGiftId() {
      return this.giftId != null;
    }

    public void setGiftIdIsSet(boolean value) {
      if (!value) {
        this.giftId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GIFT_ID:
        if (value == null) {
          unsetGiftId();
        } else {
          setGiftId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GIFT_ID:
        return getGiftId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GIFT_ID:
        return isSetGiftId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rejectGift_args)
        return this.equals((rejectGift_args)that);
      return false;
    }

    public boolean equals(rejectGift_args that) {
      if (that == null)
        return false;

      boolean this_present_giftId = true && this.isSetGiftId();
      boolean that_present_giftId = true && that.isSetGiftId();
      if (this_present_giftId || that_present_giftId) {
        if (!(this_present_giftId && that_present_giftId))
          return false;
        if (!this.giftId.equals(that.giftId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(rejectGift_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      rejectGift_args typedOther = (rejectGift_args)other;

      lastComparison = Boolean.valueOf(isSetGiftId()).compareTo(typedOther.isSetGiftId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGiftId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftId, typedOther.giftId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rejectGift_args(");
      boolean first = true;

      sb.append("giftId:");
      if (this.giftId == null) {
        sb.append("null");
      } else {
        sb.append(this.giftId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class rejectGift_argsStandardSchemeFactory implements SchemeFactory {
      public rejectGift_argsStandardScheme getScheme() {
        return new rejectGift_argsStandardScheme();
      }
    }

    private static class rejectGift_argsStandardScheme extends StandardScheme<rejectGift_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rejectGift_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GIFT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.giftId = iprot.readString();
                struct.setGiftIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rejectGift_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.giftId != null) {
          oprot.writeFieldBegin(GIFT_ID_FIELD_DESC);
          oprot.writeString(struct.giftId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rejectGift_argsTupleSchemeFactory implements SchemeFactory {
      public rejectGift_argsTupleScheme getScheme() {
        return new rejectGift_argsTupleScheme();
      }
    }

    private static class rejectGift_argsTupleScheme extends TupleScheme<rejectGift_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rejectGift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGiftId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGiftId()) {
          oprot.writeString(struct.giftId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rejectGift_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.giftId = iprot.readString();
          struct.setGiftIdIsSet(true);
        }
      }
    }

  }

  public static class rejectGift_result implements org.apache.thrift.TBase<rejectGift_result, rejectGift_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rejectGift_result");

    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rejectGift_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rejectGift_resultTupleSchemeFactory());
    }

    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rejectGift_result.class, metaDataMap);
    }

    public rejectGift_result() {
    }

    public rejectGift_result(
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rejectGift_result(rejectGift_result other) {
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public rejectGift_result deepCopy() {
      return new rejectGift_result(this);
    }

    public void clear() {
      this.error = null;
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public rejectGift_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rejectGift_result)
        return this.equals((rejectGift_result)that);
      return false;
    }

    public boolean equals(rejectGift_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(rejectGift_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      rejectGift_result typedOther = (rejectGift_result)other;

      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rejectGift_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class rejectGift_resultStandardSchemeFactory implements SchemeFactory {
      public rejectGift_resultStandardScheme getScheme() {
        return new rejectGift_resultStandardScheme();
      }
    }

    private static class rejectGift_resultStandardScheme extends StandardScheme<rejectGift_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rejectGift_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rejectGift_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rejectGift_resultTupleSchemeFactory implements SchemeFactory {
      public rejectGift_resultTupleScheme getScheme() {
        return new rejectGift_resultTupleScheme();
      }
    }

    private static class rejectGift_resultTupleScheme extends TupleScheme<rejectGift_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rejectGift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetError()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rejectGift_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getActivities_args implements org.apache.thrift.TBase<getActivities_args, getActivities_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActivities_args");

    private static final org.apache.thrift.protocol.TField SEARCH_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("searchOptions", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActivities_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActivities_argsTupleSchemeFactory());
    }

    public com.talool.api.thrift.SearchOptions_t searchOptions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_OPTIONS((short)1, "searchOptions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_OPTIONS
            return SEARCH_OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("searchOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.SearchOptions_t.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActivities_args.class, metaDataMap);
    }

    public getActivities_args() {
    }

    public getActivities_args(
      com.talool.api.thrift.SearchOptions_t searchOptions)
    {
      this();
      this.searchOptions = searchOptions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActivities_args(getActivities_args other) {
      if (other.isSetSearchOptions()) {
        this.searchOptions = new com.talool.api.thrift.SearchOptions_t(other.searchOptions);
      }
    }

    public getActivities_args deepCopy() {
      return new getActivities_args(this);
    }

    public void clear() {
      this.searchOptions = null;
    }

    public com.talool.api.thrift.SearchOptions_t getSearchOptions() {
      return this.searchOptions;
    }

    public getActivities_args setSearchOptions(com.talool.api.thrift.SearchOptions_t searchOptions) {
      this.searchOptions = searchOptions;
      return this;
    }

    public void unsetSearchOptions() {
      this.searchOptions = null;
    }

    /** Returns true if field searchOptions is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchOptions() {
      return this.searchOptions != null;
    }

    public void setSearchOptionsIsSet(boolean value) {
      if (!value) {
        this.searchOptions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEARCH_OPTIONS:
        if (value == null) {
          unsetSearchOptions();
        } else {
          setSearchOptions((com.talool.api.thrift.SearchOptions_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_OPTIONS:
        return getSearchOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_OPTIONS:
        return isSetSearchOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActivities_args)
        return this.equals((getActivities_args)that);
      return false;
    }

    public boolean equals(getActivities_args that) {
      if (that == null)
        return false;

      boolean this_present_searchOptions = true && this.isSetSearchOptions();
      boolean that_present_searchOptions = true && that.isSetSearchOptions();
      if (this_present_searchOptions || that_present_searchOptions) {
        if (!(this_present_searchOptions && that_present_searchOptions))
          return false;
        if (!this.searchOptions.equals(that.searchOptions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getActivities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getActivities_args typedOther = (getActivities_args)other;

      lastComparison = Boolean.valueOf(isSetSearchOptions()).compareTo(typedOther.isSetSearchOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchOptions, typedOther.searchOptions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActivities_args(");
      boolean first = true;

      sb.append("searchOptions:");
      if (this.searchOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.searchOptions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (searchOptions != null) {
        searchOptions.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getActivities_argsStandardSchemeFactory implements SchemeFactory {
      public getActivities_argsStandardScheme getScheme() {
        return new getActivities_argsStandardScheme();
      }
    }

    private static class getActivities_argsStandardScheme extends StandardScheme<getActivities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActivities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
                struct.searchOptions.read(iprot);
                struct.setSearchOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActivities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchOptions != null) {
          oprot.writeFieldBegin(SEARCH_OPTIONS_FIELD_DESC);
          struct.searchOptions.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActivities_argsTupleSchemeFactory implements SchemeFactory {
      public getActivities_argsTupleScheme getScheme() {
        return new getActivities_argsTupleScheme();
      }
    }

    private static class getActivities_argsTupleScheme extends TupleScheme<getActivities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActivities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSearchOptions()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSearchOptions()) {
          struct.searchOptions.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActivities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
          struct.searchOptions.read(iprot);
          struct.setSearchOptionsIsSet(true);
        }
      }
    }

  }

  public static class getActivities_result implements org.apache.thrift.TBase<getActivities_result, getActivities_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActivities_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActivities_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActivities_resultTupleSchemeFactory());
    }

    public List<com.talool.api.thrift.Activity_t> success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.Activity_t.class))));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActivities_result.class, metaDataMap);
    }

    public getActivities_result() {
    }

    public getActivities_result(
      List<com.talool.api.thrift.Activity_t> success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActivities_result(getActivities_result other) {
      if (other.isSetSuccess()) {
        List<com.talool.api.thrift.Activity_t> __this__success = new ArrayList<com.talool.api.thrift.Activity_t>();
        for (com.talool.api.thrift.Activity_t other_element : other.success) {
          __this__success.add(new com.talool.api.thrift.Activity_t(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public getActivities_result deepCopy() {
      return new getActivities_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.talool.api.thrift.Activity_t> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.talool.api.thrift.Activity_t elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.talool.api.thrift.Activity_t>();
      }
      this.success.add(elem);
    }

    public List<com.talool.api.thrift.Activity_t> getSuccess() {
      return this.success;
    }

    public getActivities_result setSuccess(List<com.talool.api.thrift.Activity_t> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public getActivities_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.talool.api.thrift.Activity_t>)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActivities_result)
        return this.equals((getActivities_result)that);
      return false;
    }

    public boolean equals(getActivities_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getActivities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getActivities_result typedOther = (getActivities_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActivities_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getActivities_resultStandardSchemeFactory implements SchemeFactory {
      public getActivities_resultStandardScheme getScheme() {
        return new getActivities_resultStandardScheme();
      }
    }

    private static class getActivities_resultStandardScheme extends StandardScheme<getActivities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActivities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<com.talool.api.thrift.Activity_t>(_list88.size);
                  for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                  {
                    com.talool.api.thrift.Activity_t _elem90; // required
                    _elem90 = new com.talool.api.thrift.Activity_t();
                    _elem90.read(iprot);
                    struct.success.add(_elem90);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActivities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.talool.api.thrift.Activity_t _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActivities_resultTupleSchemeFactory implements SchemeFactory {
      public getActivities_resultTupleScheme getScheme() {
        return new getActivities_resultTupleScheme();
      }
    }

    private static class getActivities_resultTupleScheme extends TupleScheme<getActivities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActivities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.talool.api.thrift.Activity_t _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActivities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.talool.api.thrift.Activity_t>(_list93.size);
            for (int _i94 = 0; _i94 < _list93.size; ++_i94)
            {
              com.talool.api.thrift.Activity_t _elem95; // required
              _elem95 = new com.talool.api.thrift.Activity_t();
              _elem95.read(iprot);
              struct.success.add(_elem95);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getMessages_args implements org.apache.thrift.TBase<getMessages_args, getMessages_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMessages_args");

    private static final org.apache.thrift.protocol.TField SEARCH_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("searchOptions", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMessages_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMessages_argsTupleSchemeFactory());
    }

    public com.talool.api.thrift.SearchOptions_t searchOptions; // required
    public com.talool.api.thrift.Location_t location; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_OPTIONS((short)1, "searchOptions"),
      LOCATION((short)2, "location");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_OPTIONS
            return SEARCH_OPTIONS;
          case 2: // LOCATION
            return LOCATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("searchOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.SearchOptions_t.class)));
      tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.Location_t.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessages_args.class, metaDataMap);
    }

    public getMessages_args() {
    }

    public getMessages_args(
      com.talool.api.thrift.SearchOptions_t searchOptions,
      com.talool.api.thrift.Location_t location)
    {
      this();
      this.searchOptions = searchOptions;
      this.location = location;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessages_args(getMessages_args other) {
      if (other.isSetSearchOptions()) {
        this.searchOptions = new com.talool.api.thrift.SearchOptions_t(other.searchOptions);
      }
      if (other.isSetLocation()) {
        this.location = new com.talool.api.thrift.Location_t(other.location);
      }
    }

    public getMessages_args deepCopy() {
      return new getMessages_args(this);
    }

    public void clear() {
      this.searchOptions = null;
      this.location = null;
    }

    public com.talool.api.thrift.SearchOptions_t getSearchOptions() {
      return this.searchOptions;
    }

    public getMessages_args setSearchOptions(com.talool.api.thrift.SearchOptions_t searchOptions) {
      this.searchOptions = searchOptions;
      return this;
    }

    public void unsetSearchOptions() {
      this.searchOptions = null;
    }

    /** Returns true if field searchOptions is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchOptions() {
      return this.searchOptions != null;
    }

    public void setSearchOptionsIsSet(boolean value) {
      if (!value) {
        this.searchOptions = null;
      }
    }

    public com.talool.api.thrift.Location_t getLocation() {
      return this.location;
    }

    public getMessages_args setLocation(com.talool.api.thrift.Location_t location) {
      this.location = location;
      return this;
    }

    public void unsetLocation() {
      this.location = null;
    }

    /** Returns true if field location is set (has been assigned a value) and false otherwise */
    public boolean isSetLocation() {
      return this.location != null;
    }

    public void setLocationIsSet(boolean value) {
      if (!value) {
        this.location = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEARCH_OPTIONS:
        if (value == null) {
          unsetSearchOptions();
        } else {
          setSearchOptions((com.talool.api.thrift.SearchOptions_t)value);
        }
        break;

      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          setLocation((com.talool.api.thrift.Location_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_OPTIONS:
        return getSearchOptions();

      case LOCATION:
        return getLocation();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_OPTIONS:
        return isSetSearchOptions();
      case LOCATION:
        return isSetLocation();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessages_args)
        return this.equals((getMessages_args)that);
      return false;
    }

    public boolean equals(getMessages_args that) {
      if (that == null)
        return false;

      boolean this_present_searchOptions = true && this.isSetSearchOptions();
      boolean that_present_searchOptions = true && that.isSetSearchOptions();
      if (this_present_searchOptions || that_present_searchOptions) {
        if (!(this_present_searchOptions && that_present_searchOptions))
          return false;
        if (!this.searchOptions.equals(that.searchOptions))
          return false;
      }

      boolean this_present_location = true && this.isSetLocation();
      boolean that_present_location = true && that.isSetLocation();
      if (this_present_location || that_present_location) {
        if (!(this_present_location && that_present_location))
          return false;
        if (!this.location.equals(that.location))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMessages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMessages_args typedOther = (getMessages_args)other;

      lastComparison = Boolean.valueOf(isSetSearchOptions()).compareTo(typedOther.isSetSearchOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchOptions, typedOther.searchOptions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMessages_args(");
      boolean first = true;

      sb.append("searchOptions:");
      if (this.searchOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.searchOptions);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (searchOptions != null) {
        searchOptions.validate();
      }
      if (location != null) {
        location.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMessages_argsStandardSchemeFactory implements SchemeFactory {
      public getMessages_argsStandardScheme getScheme() {
        return new getMessages_argsStandardScheme();
      }
    }

    private static class getMessages_argsStandardScheme extends StandardScheme<getMessages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMessages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
                struct.searchOptions.read(iprot);
                struct.setSearchOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.location = new com.talool.api.thrift.Location_t();
                struct.location.read(iprot);
                struct.setLocationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMessages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchOptions != null) {
          oprot.writeFieldBegin(SEARCH_OPTIONS_FIELD_DESC);
          struct.searchOptions.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.location != null) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          struct.location.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMessages_argsTupleSchemeFactory implements SchemeFactory {
      public getMessages_argsTupleScheme getScheme() {
        return new getMessages_argsTupleScheme();
      }
    }

    private static class getMessages_argsTupleScheme extends TupleScheme<getMessages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSearchOptions()) {
          optionals.set(0);
        }
        if (struct.isSetLocation()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSearchOptions()) {
          struct.searchOptions.write(oprot);
        }
        if (struct.isSetLocation()) {
          struct.location.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
          struct.searchOptions.read(iprot);
          struct.setSearchOptionsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.location = new com.talool.api.thrift.Location_t();
          struct.location.read(iprot);
          struct.setLocationIsSet(true);
        }
      }
    }

  }

  public static class getMessages_result implements org.apache.thrift.TBase<getMessages_result, getMessages_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMessages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMessages_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMessages_resultTupleSchemeFactory());
    }

    public List<com.talool.api.thrift.Activity_t> success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.Activity_t.class))));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessages_result.class, metaDataMap);
    }

    public getMessages_result() {
    }

    public getMessages_result(
      List<com.talool.api.thrift.Activity_t> success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessages_result(getMessages_result other) {
      if (other.isSetSuccess()) {
        List<com.talool.api.thrift.Activity_t> __this__success = new ArrayList<com.talool.api.thrift.Activity_t>();
        for (com.talool.api.thrift.Activity_t other_element : other.success) {
          __this__success.add(new com.talool.api.thrift.Activity_t(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public getMessages_result deepCopy() {
      return new getMessages_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.talool.api.thrift.Activity_t> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.talool.api.thrift.Activity_t elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.talool.api.thrift.Activity_t>();
      }
      this.success.add(elem);
    }

    public List<com.talool.api.thrift.Activity_t> getSuccess() {
      return this.success;
    }

    public getMessages_result setSuccess(List<com.talool.api.thrift.Activity_t> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public getMessages_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.talool.api.thrift.Activity_t>)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessages_result)
        return this.equals((getMessages_result)that);
      return false;
    }

    public boolean equals(getMessages_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMessages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMessages_result typedOther = (getMessages_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMessages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMessages_resultStandardSchemeFactory implements SchemeFactory {
      public getMessages_resultStandardScheme getScheme() {
        return new getMessages_resultStandardScheme();
      }
    }

    private static class getMessages_resultStandardScheme extends StandardScheme<getMessages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMessages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<com.talool.api.thrift.Activity_t>(_list96.size);
                  for (int _i97 = 0; _i97 < _list96.size; ++_i97)
                  {
                    com.talool.api.thrift.Activity_t _elem98; // required
                    _elem98 = new com.talool.api.thrift.Activity_t();
                    _elem98.read(iprot);
                    struct.success.add(_elem98);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMessages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.talool.api.thrift.Activity_t _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMessages_resultTupleSchemeFactory implements SchemeFactory {
      public getMessages_resultTupleScheme getScheme() {
        return new getMessages_resultTupleScheme();
      }
    }

    private static class getMessages_resultTupleScheme extends TupleScheme<getMessages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.talool.api.thrift.Activity_t _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.talool.api.thrift.Activity_t>(_list101.size);
            for (int _i102 = 0; _i102 < _list101.size; ++_i102)
            {
              com.talool.api.thrift.Activity_t _elem103; // required
              _elem103 = new com.talool.api.thrift.Activity_t();
              _elem103.read(iprot);
              struct.success.add(_elem103);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class activityAction_args implements org.apache.thrift.TBase<activityAction_args, activityAction_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activityAction_args");

    private static final org.apache.thrift.protocol.TField ACTIVITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activityId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activityAction_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activityAction_argsTupleSchemeFactory());
    }

    public String activityId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTIVITY_ID((short)1, "activityId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTIVITY_ID
            return ACTIVITY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTIVITY_ID, new org.apache.thrift.meta_data.FieldMetaData("activityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activityAction_args.class, metaDataMap);
    }

    public activityAction_args() {
    }

    public activityAction_args(
      String activityId)
    {
      this();
      this.activityId = activityId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activityAction_args(activityAction_args other) {
      if (other.isSetActivityId()) {
        this.activityId = other.activityId;
      }
    }

    public activityAction_args deepCopy() {
      return new activityAction_args(this);
    }

    public void clear() {
      this.activityId = null;
    }

    public String getActivityId() {
      return this.activityId;
    }

    public activityAction_args setActivityId(String activityId) {
      this.activityId = activityId;
      return this;
    }

    public void unsetActivityId() {
      this.activityId = null;
    }

    /** Returns true if field activityId is set (has been assigned a value) and false otherwise */
    public boolean isSetActivityId() {
      return this.activityId != null;
    }

    public void setActivityIdIsSet(boolean value) {
      if (!value) {
        this.activityId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTIVITY_ID:
        if (value == null) {
          unsetActivityId();
        } else {
          setActivityId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTIVITY_ID:
        return getActivityId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTIVITY_ID:
        return isSetActivityId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activityAction_args)
        return this.equals((activityAction_args)that);
      return false;
    }

    public boolean equals(activityAction_args that) {
      if (that == null)
        return false;

      boolean this_present_activityId = true && this.isSetActivityId();
      boolean that_present_activityId = true && that.isSetActivityId();
      if (this_present_activityId || that_present_activityId) {
        if (!(this_present_activityId && that_present_activityId))
          return false;
        if (!this.activityId.equals(that.activityId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(activityAction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      activityAction_args typedOther = (activityAction_args)other;

      lastComparison = Boolean.valueOf(isSetActivityId()).compareTo(typedOther.isSetActivityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActivityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityId, typedOther.activityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activityAction_args(");
      boolean first = true;

      sb.append("activityId:");
      if (this.activityId == null) {
        sb.append("null");
      } else {
        sb.append(this.activityId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class activityAction_argsStandardSchemeFactory implements SchemeFactory {
      public activityAction_argsStandardScheme getScheme() {
        return new activityAction_argsStandardScheme();
      }
    }

    private static class activityAction_argsStandardScheme extends StandardScheme<activityAction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activityAction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTIVITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.activityId = iprot.readString();
                struct.setActivityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activityAction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.activityId != null) {
          oprot.writeFieldBegin(ACTIVITY_ID_FIELD_DESC);
          oprot.writeString(struct.activityId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activityAction_argsTupleSchemeFactory implements SchemeFactory {
      public activityAction_argsTupleScheme getScheme() {
        return new activityAction_argsTupleScheme();
      }
    }

    private static class activityAction_argsTupleScheme extends TupleScheme<activityAction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activityAction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetActivityId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetActivityId()) {
          oprot.writeString(struct.activityId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activityAction_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.activityId = iprot.readString();
          struct.setActivityIdIsSet(true);
        }
      }
    }

  }

  public static class activityAction_result implements org.apache.thrift.TBase<activityAction_result, activityAction_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activityAction_result");

    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activityAction_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activityAction_resultTupleSchemeFactory());
    }

    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activityAction_result.class, metaDataMap);
    }

    public activityAction_result() {
    }

    public activityAction_result(
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activityAction_result(activityAction_result other) {
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public activityAction_result deepCopy() {
      return new activityAction_result(this);
    }

    public void clear() {
      this.error = null;
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public activityAction_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activityAction_result)
        return this.equals((activityAction_result)that);
      return false;
    }

    public boolean equals(activityAction_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(activityAction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      activityAction_result typedOther = (activityAction_result)other;

      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activityAction_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class activityAction_resultStandardSchemeFactory implements SchemeFactory {
      public activityAction_resultStandardScheme getScheme() {
        return new activityAction_resultStandardScheme();
      }
    }

    private static class activityAction_resultStandardScheme extends StandardScheme<activityAction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activityAction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activityAction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activityAction_resultTupleSchemeFactory implements SchemeFactory {
      public activityAction_resultTupleScheme getScheme() {
        return new activityAction_resultTupleScheme();
      }
    }

    private static class activityAction_resultTupleScheme extends TupleScheme<activityAction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activityAction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetError()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activityAction_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class sendResetPasswordEmail_args implements org.apache.thrift.TBase<sendResetPasswordEmail_args, sendResetPasswordEmail_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendResetPasswordEmail_args");

    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendResetPasswordEmail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendResetPasswordEmail_argsTupleSchemeFactory());
    }

    public String email; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL((short)1, "email");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL
            return EMAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendResetPasswordEmail_args.class, metaDataMap);
    }

    public sendResetPasswordEmail_args() {
    }

    public sendResetPasswordEmail_args(
      String email)
    {
      this();
      this.email = email;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendResetPasswordEmail_args(sendResetPasswordEmail_args other) {
      if (other.isSetEmail()) {
        this.email = other.email;
      }
    }

    public sendResetPasswordEmail_args deepCopy() {
      return new sendResetPasswordEmail_args(this);
    }

    public void clear() {
      this.email = null;
    }

    public String getEmail() {
      return this.email;
    }

    public sendResetPasswordEmail_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL:
        return getEmail();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL:
        return isSetEmail();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendResetPasswordEmail_args)
        return this.equals((sendResetPasswordEmail_args)that);
      return false;
    }

    public boolean equals(sendResetPasswordEmail_args that) {
      if (that == null)
        return false;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendResetPasswordEmail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendResetPasswordEmail_args typedOther = (sendResetPasswordEmail_args)other;

      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendResetPasswordEmail_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class sendResetPasswordEmail_argsStandardSchemeFactory implements SchemeFactory {
      public sendResetPasswordEmail_argsStandardScheme getScheme() {
        return new sendResetPasswordEmail_argsStandardScheme();
      }
    }

    private static class sendResetPasswordEmail_argsStandardScheme extends StandardScheme<sendResetPasswordEmail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendResetPasswordEmail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendResetPasswordEmail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendResetPasswordEmail_argsTupleSchemeFactory implements SchemeFactory {
      public sendResetPasswordEmail_argsTupleScheme getScheme() {
        return new sendResetPasswordEmail_argsTupleScheme();
      }
    }

    private static class sendResetPasswordEmail_argsTupleScheme extends TupleScheme<sendResetPasswordEmail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendResetPasswordEmail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmail()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendResetPasswordEmail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
      }
    }

  }

  public static class sendResetPasswordEmail_result implements org.apache.thrift.TBase<sendResetPasswordEmail_result, sendResetPasswordEmail_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendResetPasswordEmail_result");

    private static final org.apache.thrift.protocol.TField SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("userException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notFoundException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendResetPasswordEmail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendResetPasswordEmail_resultTupleSchemeFactory());
    }

    public com.talool.api.thrift.TServiceException_t serviceException; // required
    public com.talool.api.thrift.TUserException_t userException; // required
    public com.talool.api.thrift.TNotFoundException_t notFoundException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_EXCEPTION((short)1, "serviceException"),
      USER_EXCEPTION((short)2, "userException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_EXCEPTION
            return SERVICE_EXCEPTION;
          case 2: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("serviceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.USER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("userException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("notFoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendResetPasswordEmail_result.class, metaDataMap);
    }

    public sendResetPasswordEmail_result() {
    }

    public sendResetPasswordEmail_result(
      com.talool.api.thrift.TServiceException_t serviceException,
      com.talool.api.thrift.TUserException_t userException,
      com.talool.api.thrift.TNotFoundException_t notFoundException)
    {
      this();
      this.serviceException = serviceException;
      this.userException = userException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendResetPasswordEmail_result(sendResetPasswordEmail_result other) {
      if (other.isSetServiceException()) {
        this.serviceException = new com.talool.api.thrift.TServiceException_t(other.serviceException);
      }
      if (other.isSetUserException()) {
        this.userException = new com.talool.api.thrift.TUserException_t(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.talool.api.thrift.TNotFoundException_t(other.notFoundException);
      }
    }

    public sendResetPasswordEmail_result deepCopy() {
      return new sendResetPasswordEmail_result(this);
    }

    public void clear() {
      this.serviceException = null;
      this.userException = null;
      this.notFoundException = null;
    }

    public com.talool.api.thrift.TServiceException_t getServiceException() {
      return this.serviceException;
    }

    public sendResetPasswordEmail_result setServiceException(com.talool.api.thrift.TServiceException_t serviceException) {
      this.serviceException = serviceException;
      return this;
    }

    public void unsetServiceException() {
      this.serviceException = null;
    }

    /** Returns true if field serviceException is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceException() {
      return this.serviceException != null;
    }

    public void setServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.serviceException = null;
      }
    }

    public com.talool.api.thrift.TUserException_t getUserException() {
      return this.userException;
    }

    public sendResetPasswordEmail_result setUserException(com.talool.api.thrift.TUserException_t userException) {
      this.userException = userException;
      return this;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been assigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.talool.api.thrift.TNotFoundException_t getNotFoundException() {
      return this.notFoundException;
    }

    public sendResetPasswordEmail_result setNotFoundException(com.talool.api.thrift.TNotFoundException_t notFoundException) {
      this.notFoundException = notFoundException;
      return this;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_EXCEPTION:
        if (value == null) {
          unsetServiceException();
        } else {
          setServiceException((com.talool.api.thrift.TServiceException_t)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.talool.api.thrift.TUserException_t)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.talool.api.thrift.TNotFoundException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_EXCEPTION:
        return getServiceException();

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_EXCEPTION:
        return isSetServiceException();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendResetPasswordEmail_result)
        return this.equals((sendResetPasswordEmail_result)that);
      return false;
    }

    public boolean equals(sendResetPasswordEmail_result that) {
      if (that == null)
        return false;

      boolean this_present_serviceException = true && this.isSetServiceException();
      boolean that_present_serviceException = true && that.isSetServiceException();
      if (this_present_serviceException || that_present_serviceException) {
        if (!(this_present_serviceException && that_present_serviceException))
          return false;
        if (!this.serviceException.equals(that.serviceException))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendResetPasswordEmail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendResetPasswordEmail_result typedOther = (sendResetPasswordEmail_result)other;

      lastComparison = Boolean.valueOf(isSetServiceException()).compareTo(typedOther.isSetServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceException, typedOther.serviceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendResetPasswordEmail_result(");
      boolean first = true;

      sb.append("serviceException:");
      if (this.serviceException == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class sendResetPasswordEmail_resultStandardSchemeFactory implements SchemeFactory {
      public sendResetPasswordEmail_resultStandardScheme getScheme() {
        return new sendResetPasswordEmail_resultStandardScheme();
      }
    }

    private static class sendResetPasswordEmail_resultStandardScheme extends StandardScheme<sendResetPasswordEmail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendResetPasswordEmail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serviceException = new com.talool.api.thrift.TServiceException_t();
                struct.serviceException.read(iprot);
                struct.setServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userException = new com.talool.api.thrift.TUserException_t();
                struct.userException.read(iprot);
                struct.setUserExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOT_FOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFoundException = new com.talool.api.thrift.TNotFoundException_t();
                struct.notFoundException.read(iprot);
                struct.setNotFoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendResetPasswordEmail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceException != null) {
          oprot.writeFieldBegin(SERVICE_EXCEPTION_FIELD_DESC);
          struct.serviceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userException != null) {
          oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
          struct.userException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFoundException != null) {
          oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
          struct.notFoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendResetPasswordEmail_resultTupleSchemeFactory implements SchemeFactory {
      public sendResetPasswordEmail_resultTupleScheme getScheme() {
        return new sendResetPasswordEmail_resultTupleScheme();
      }
    }

    private static class sendResetPasswordEmail_resultTupleScheme extends TupleScheme<sendResetPasswordEmail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendResetPasswordEmail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServiceException()) {
          optionals.set(0);
        }
        if (struct.isSetUserException()) {
          optionals.set(1);
        }
        if (struct.isSetNotFoundException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServiceException()) {
          struct.serviceException.write(oprot);
        }
        if (struct.isSetUserException()) {
          struct.userException.write(oprot);
        }
        if (struct.isSetNotFoundException()) {
          struct.notFoundException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendResetPasswordEmail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serviceException = new com.talool.api.thrift.TServiceException_t();
          struct.serviceException.read(iprot);
          struct.setServiceExceptionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userException = new com.talool.api.thrift.TUserException_t();
          struct.userException.read(iprot);
          struct.setUserExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.notFoundException = new com.talool.api.thrift.TNotFoundException_t();
          struct.notFoundException.read(iprot);
          struct.setNotFoundExceptionIsSet(true);
        }
      }
    }

  }

  public static class resetPassword_args implements org.apache.thrift.TBase<resetPassword_args, resetPassword_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resetPassword_args");

    private static final org.apache.thrift.protocol.TField CUSTOMER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("customerId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RESET_PASSWORD_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("resetPasswordCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NEW_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("newPassword", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resetPassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resetPassword_argsTupleSchemeFactory());
    }

    public String customerId; // required
    public String resetPasswordCode; // required
    public String newPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CUSTOMER_ID((short)1, "customerId"),
      RESET_PASSWORD_CODE((short)2, "resetPasswordCode"),
      NEW_PASSWORD((short)3, "newPassword");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CUSTOMER_ID
            return CUSTOMER_ID;
          case 2: // RESET_PASSWORD_CODE
            return RESET_PASSWORD_CODE;
          case 3: // NEW_PASSWORD
            return NEW_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CUSTOMER_ID, new org.apache.thrift.meta_data.FieldMetaData("customerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RESET_PASSWORD_CODE, new org.apache.thrift.meta_data.FieldMetaData("resetPasswordCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("newPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resetPassword_args.class, metaDataMap);
    }

    public resetPassword_args() {
    }

    public resetPassword_args(
      String customerId,
      String resetPasswordCode,
      String newPassword)
    {
      this();
      this.customerId = customerId;
      this.resetPasswordCode = resetPasswordCode;
      this.newPassword = newPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resetPassword_args(resetPassword_args other) {
      if (other.isSetCustomerId()) {
        this.customerId = other.customerId;
      }
      if (other.isSetResetPasswordCode()) {
        this.resetPasswordCode = other.resetPasswordCode;
      }
      if (other.isSetNewPassword()) {
        this.newPassword = other.newPassword;
      }
    }

    public resetPassword_args deepCopy() {
      return new resetPassword_args(this);
    }

    public void clear() {
      this.customerId = null;
      this.resetPasswordCode = null;
      this.newPassword = null;
    }

    public String getCustomerId() {
      return this.customerId;
    }

    public resetPassword_args setCustomerId(String customerId) {
      this.customerId = customerId;
      return this;
    }

    public void unsetCustomerId() {
      this.customerId = null;
    }

    /** Returns true if field customerId is set (has been assigned a value) and false otherwise */
    public boolean isSetCustomerId() {
      return this.customerId != null;
    }

    public void setCustomerIdIsSet(boolean value) {
      if (!value) {
        this.customerId = null;
      }
    }

    public String getResetPasswordCode() {
      return this.resetPasswordCode;
    }

    public resetPassword_args setResetPasswordCode(String resetPasswordCode) {
      this.resetPasswordCode = resetPasswordCode;
      return this;
    }

    public void unsetResetPasswordCode() {
      this.resetPasswordCode = null;
    }

    /** Returns true if field resetPasswordCode is set (has been assigned a value) and false otherwise */
    public boolean isSetResetPasswordCode() {
      return this.resetPasswordCode != null;
    }

    public void setResetPasswordCodeIsSet(boolean value) {
      if (!value) {
        this.resetPasswordCode = null;
      }
    }

    public String getNewPassword() {
      return this.newPassword;
    }

    public resetPassword_args setNewPassword(String newPassword) {
      this.newPassword = newPassword;
      return this;
    }

    public void unsetNewPassword() {
      this.newPassword = null;
    }

    /** Returns true if field newPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPassword() {
      return this.newPassword != null;
    }

    public void setNewPasswordIsSet(boolean value) {
      if (!value) {
        this.newPassword = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CUSTOMER_ID:
        if (value == null) {
          unsetCustomerId();
        } else {
          setCustomerId((String)value);
        }
        break;

      case RESET_PASSWORD_CODE:
        if (value == null) {
          unsetResetPasswordCode();
        } else {
          setResetPasswordCode((String)value);
        }
        break;

      case NEW_PASSWORD:
        if (value == null) {
          unsetNewPassword();
        } else {
          setNewPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CUSTOMER_ID:
        return getCustomerId();

      case RESET_PASSWORD_CODE:
        return getResetPasswordCode();

      case NEW_PASSWORD:
        return getNewPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CUSTOMER_ID:
        return isSetCustomerId();
      case RESET_PASSWORD_CODE:
        return isSetResetPasswordCode();
      case NEW_PASSWORD:
        return isSetNewPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resetPassword_args)
        return this.equals((resetPassword_args)that);
      return false;
    }

    public boolean equals(resetPassword_args that) {
      if (that == null)
        return false;

      boolean this_present_customerId = true && this.isSetCustomerId();
      boolean that_present_customerId = true && that.isSetCustomerId();
      if (this_present_customerId || that_present_customerId) {
        if (!(this_present_customerId && that_present_customerId))
          return false;
        if (!this.customerId.equals(that.customerId))
          return false;
      }

      boolean this_present_resetPasswordCode = true && this.isSetResetPasswordCode();
      boolean that_present_resetPasswordCode = true && that.isSetResetPasswordCode();
      if (this_present_resetPasswordCode || that_present_resetPasswordCode) {
        if (!(this_present_resetPasswordCode && that_present_resetPasswordCode))
          return false;
        if (!this.resetPasswordCode.equals(that.resetPasswordCode))
          return false;
      }

      boolean this_present_newPassword = true && this.isSetNewPassword();
      boolean that_present_newPassword = true && that.isSetNewPassword();
      if (this_present_newPassword || that_present_newPassword) {
        if (!(this_present_newPassword && that_present_newPassword))
          return false;
        if (!this.newPassword.equals(that.newPassword))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(resetPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      resetPassword_args typedOther = (resetPassword_args)other;

      lastComparison = Boolean.valueOf(isSetCustomerId()).compareTo(typedOther.isSetCustomerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCustomerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerId, typedOther.customerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResetPasswordCode()).compareTo(typedOther.isSetResetPasswordCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResetPasswordCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resetPasswordCode, typedOther.resetPasswordCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewPassword()).compareTo(typedOther.isSetNewPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPassword, typedOther.newPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resetPassword_args(");
      boolean first = true;

      sb.append("customerId:");
      if (this.customerId == null) {
        sb.append("null");
      } else {
        sb.append(this.customerId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resetPasswordCode:");
      if (this.resetPasswordCode == null) {
        sb.append("null");
      } else {
        sb.append(this.resetPasswordCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPassword:");
      if (this.newPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.newPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class resetPassword_argsStandardSchemeFactory implements SchemeFactory {
      public resetPassword_argsStandardScheme getScheme() {
        return new resetPassword_argsStandardScheme();
      }
    }

    private static class resetPassword_argsStandardScheme extends StandardScheme<resetPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resetPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CUSTOMER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.customerId = iprot.readString();
                struct.setCustomerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RESET_PASSWORD_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.resetPasswordCode = iprot.readString();
                struct.setResetPasswordCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NEW_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newPassword = iprot.readString();
                struct.setNewPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resetPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.customerId != null) {
          oprot.writeFieldBegin(CUSTOMER_ID_FIELD_DESC);
          oprot.writeString(struct.customerId);
          oprot.writeFieldEnd();
        }
        if (struct.resetPasswordCode != null) {
          oprot.writeFieldBegin(RESET_PASSWORD_CODE_FIELD_DESC);
          oprot.writeString(struct.resetPasswordCode);
          oprot.writeFieldEnd();
        }
        if (struct.newPassword != null) {
          oprot.writeFieldBegin(NEW_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.newPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resetPassword_argsTupleSchemeFactory implements SchemeFactory {
      public resetPassword_argsTupleScheme getScheme() {
        return new resetPassword_argsTupleScheme();
      }
    }

    private static class resetPassword_argsTupleScheme extends TupleScheme<resetPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resetPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCustomerId()) {
          optionals.set(0);
        }
        if (struct.isSetResetPasswordCode()) {
          optionals.set(1);
        }
        if (struct.isSetNewPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCustomerId()) {
          oprot.writeString(struct.customerId);
        }
        if (struct.isSetResetPasswordCode()) {
          oprot.writeString(struct.resetPasswordCode);
        }
        if (struct.isSetNewPassword()) {
          oprot.writeString(struct.newPassword);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resetPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.customerId = iprot.readString();
          struct.setCustomerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.resetPasswordCode = iprot.readString();
          struct.setResetPasswordCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.newPassword = iprot.readString();
          struct.setNewPasswordIsSet(true);
        }
      }
    }

  }

  public static class resetPassword_result implements org.apache.thrift.TBase<resetPassword_result, resetPassword_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resetPassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("userException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notFoundException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resetPassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resetPassword_resultTupleSchemeFactory());
    }

    public CTokenAccess_t success; // required
    public com.talool.api.thrift.TServiceException_t serviceException; // required
    public com.talool.api.thrift.TUserException_t userException; // required
    public com.talool.api.thrift.TNotFoundException_t notFoundException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SERVICE_EXCEPTION((short)1, "serviceException"),
      USER_EXCEPTION((short)2, "userException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SERVICE_EXCEPTION
            return SERVICE_EXCEPTION;
          case 2: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CTokenAccess_t.class)));
      tmpMap.put(_Fields.SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("serviceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.USER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("userException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("notFoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resetPassword_result.class, metaDataMap);
    }

    public resetPassword_result() {
    }

    public resetPassword_result(
      CTokenAccess_t success,
      com.talool.api.thrift.TServiceException_t serviceException,
      com.talool.api.thrift.TUserException_t userException,
      com.talool.api.thrift.TNotFoundException_t notFoundException)
    {
      this();
      this.success = success;
      this.serviceException = serviceException;
      this.userException = userException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resetPassword_result(resetPassword_result other) {
      if (other.isSetSuccess()) {
        this.success = new CTokenAccess_t(other.success);
      }
      if (other.isSetServiceException()) {
        this.serviceException = new com.talool.api.thrift.TServiceException_t(other.serviceException);
      }
      if (other.isSetUserException()) {
        this.userException = new com.talool.api.thrift.TUserException_t(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.talool.api.thrift.TNotFoundException_t(other.notFoundException);
      }
    }

    public resetPassword_result deepCopy() {
      return new resetPassword_result(this);
    }

    public void clear() {
      this.success = null;
      this.serviceException = null;
      this.userException = null;
      this.notFoundException = null;
    }

    public CTokenAccess_t getSuccess() {
      return this.success;
    }

    public resetPassword_result setSuccess(CTokenAccess_t success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.TServiceException_t getServiceException() {
      return this.serviceException;
    }

    public resetPassword_result setServiceException(com.talool.api.thrift.TServiceException_t serviceException) {
      this.serviceException = serviceException;
      return this;
    }

    public void unsetServiceException() {
      this.serviceException = null;
    }

    /** Returns true if field serviceException is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceException() {
      return this.serviceException != null;
    }

    public void setServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.serviceException = null;
      }
    }

    public com.talool.api.thrift.TUserException_t getUserException() {
      return this.userException;
    }

    public resetPassword_result setUserException(com.talool.api.thrift.TUserException_t userException) {
      this.userException = userException;
      return this;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been assigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.talool.api.thrift.TNotFoundException_t getNotFoundException() {
      return this.notFoundException;
    }

    public resetPassword_result setNotFoundException(com.talool.api.thrift.TNotFoundException_t notFoundException) {
      this.notFoundException = notFoundException;
      return this;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CTokenAccess_t)value);
        }
        break;

      case SERVICE_EXCEPTION:
        if (value == null) {
          unsetServiceException();
        } else {
          setServiceException((com.talool.api.thrift.TServiceException_t)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.talool.api.thrift.TUserException_t)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.talool.api.thrift.TNotFoundException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SERVICE_EXCEPTION:
        return getServiceException();

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SERVICE_EXCEPTION:
        return isSetServiceException();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resetPassword_result)
        return this.equals((resetPassword_result)that);
      return false;
    }

    public boolean equals(resetPassword_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_serviceException = true && this.isSetServiceException();
      boolean that_present_serviceException = true && that.isSetServiceException();
      if (this_present_serviceException || that_present_serviceException) {
        if (!(this_present_serviceException && that_present_serviceException))
          return false;
        if (!this.serviceException.equals(that.serviceException))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(resetPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      resetPassword_result typedOther = (resetPassword_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceException()).compareTo(typedOther.isSetServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceException, typedOther.serviceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resetPassword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceException:");
      if (this.serviceException == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class resetPassword_resultStandardSchemeFactory implements SchemeFactory {
      public resetPassword_resultStandardScheme getScheme() {
        return new resetPassword_resultStandardScheme();
      }
    }

    private static class resetPassword_resultStandardScheme extends StandardScheme<resetPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resetPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CTokenAccess_t();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serviceException = new com.talool.api.thrift.TServiceException_t();
                struct.serviceException.read(iprot);
                struct.setServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userException = new com.talool.api.thrift.TUserException_t();
                struct.userException.read(iprot);
                struct.setUserExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOT_FOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFoundException = new com.talool.api.thrift.TNotFoundException_t();
                struct.notFoundException.read(iprot);
                struct.setNotFoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resetPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.serviceException != null) {
          oprot.writeFieldBegin(SERVICE_EXCEPTION_FIELD_DESC);
          struct.serviceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userException != null) {
          oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
          struct.userException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFoundException != null) {
          oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
          struct.notFoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resetPassword_resultTupleSchemeFactory implements SchemeFactory {
      public resetPassword_resultTupleScheme getScheme() {
        return new resetPassword_resultTupleScheme();
      }
    }

    private static class resetPassword_resultTupleScheme extends TupleScheme<resetPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resetPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetUserException()) {
          optionals.set(2);
        }
        if (struct.isSetNotFoundException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetServiceException()) {
          struct.serviceException.write(oprot);
        }
        if (struct.isSetUserException()) {
          struct.userException.write(oprot);
        }
        if (struct.isSetNotFoundException()) {
          struct.notFoundException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resetPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new CTokenAccess_t();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serviceException = new com.talool.api.thrift.TServiceException_t();
          struct.serviceException.read(iprot);
          struct.setServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userException = new com.talool.api.thrift.TUserException_t();
          struct.userException.read(iprot);
          struct.setUserExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.notFoundException = new com.talool.api.thrift.TNotFoundException_t();
          struct.notFoundException.read(iprot);
          struct.setNotFoundExceptionIsSet(true);
        }
      }
    }

  }

  public static class purchaseByCard_args implements org.apache.thrift.TBase<purchaseByCard_args, purchaseByCard_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purchaseByCard_args");

    private static final org.apache.thrift.protocol.TField DEAL_OFFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealOfferId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAYMENT_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentDetail", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purchaseByCard_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purchaseByCard_argsTupleSchemeFactory());
    }

    public String dealOfferId; // required
    public com.talool.api.thrift.PaymentDetail_t paymentDetail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEAL_OFFER_ID((short)1, "dealOfferId"),
      PAYMENT_DETAIL((short)2, "paymentDetail");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEAL_OFFER_ID
            return DEAL_OFFER_ID;
          case 2: // PAYMENT_DETAIL
            return PAYMENT_DETAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEAL_OFFER_ID, new org.apache.thrift.meta_data.FieldMetaData("dealOfferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAYMENT_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("paymentDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.PaymentDetail_t.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purchaseByCard_args.class, metaDataMap);
    }

    public purchaseByCard_args() {
    }

    public purchaseByCard_args(
      String dealOfferId,
      com.talool.api.thrift.PaymentDetail_t paymentDetail)
    {
      this();
      this.dealOfferId = dealOfferId;
      this.paymentDetail = paymentDetail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purchaseByCard_args(purchaseByCard_args other) {
      if (other.isSetDealOfferId()) {
        this.dealOfferId = other.dealOfferId;
      }
      if (other.isSetPaymentDetail()) {
        this.paymentDetail = new com.talool.api.thrift.PaymentDetail_t(other.paymentDetail);
      }
    }

    public purchaseByCard_args deepCopy() {
      return new purchaseByCard_args(this);
    }

    public void clear() {
      this.dealOfferId = null;
      this.paymentDetail = null;
    }

    public String getDealOfferId() {
      return this.dealOfferId;
    }

    public purchaseByCard_args setDealOfferId(String dealOfferId) {
      this.dealOfferId = dealOfferId;
      return this;
    }

    public void unsetDealOfferId() {
      this.dealOfferId = null;
    }

    /** Returns true if field dealOfferId is set (has been assigned a value) and false otherwise */
    public boolean isSetDealOfferId() {
      return this.dealOfferId != null;
    }

    public void setDealOfferIdIsSet(boolean value) {
      if (!value) {
        this.dealOfferId = null;
      }
    }

    public com.talool.api.thrift.PaymentDetail_t getPaymentDetail() {
      return this.paymentDetail;
    }

    public purchaseByCard_args setPaymentDetail(com.talool.api.thrift.PaymentDetail_t paymentDetail) {
      this.paymentDetail = paymentDetail;
      return this;
    }

    public void unsetPaymentDetail() {
      this.paymentDetail = null;
    }

    /** Returns true if field paymentDetail is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentDetail() {
      return this.paymentDetail != null;
    }

    public void setPaymentDetailIsSet(boolean value) {
      if (!value) {
        this.paymentDetail = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEAL_OFFER_ID:
        if (value == null) {
          unsetDealOfferId();
        } else {
          setDealOfferId((String)value);
        }
        break;

      case PAYMENT_DETAIL:
        if (value == null) {
          unsetPaymentDetail();
        } else {
          setPaymentDetail((com.talool.api.thrift.PaymentDetail_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEAL_OFFER_ID:
        return getDealOfferId();

      case PAYMENT_DETAIL:
        return getPaymentDetail();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEAL_OFFER_ID:
        return isSetDealOfferId();
      case PAYMENT_DETAIL:
        return isSetPaymentDetail();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purchaseByCard_args)
        return this.equals((purchaseByCard_args)that);
      return false;
    }

    public boolean equals(purchaseByCard_args that) {
      if (that == null)
        return false;

      boolean this_present_dealOfferId = true && this.isSetDealOfferId();
      boolean that_present_dealOfferId = true && that.isSetDealOfferId();
      if (this_present_dealOfferId || that_present_dealOfferId) {
        if (!(this_present_dealOfferId && that_present_dealOfferId))
          return false;
        if (!this.dealOfferId.equals(that.dealOfferId))
          return false;
      }

      boolean this_present_paymentDetail = true && this.isSetPaymentDetail();
      boolean that_present_paymentDetail = true && that.isSetPaymentDetail();
      if (this_present_paymentDetail || that_present_paymentDetail) {
        if (!(this_present_paymentDetail && that_present_paymentDetail))
          return false;
        if (!this.paymentDetail.equals(that.paymentDetail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(purchaseByCard_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      purchaseByCard_args typedOther = (purchaseByCard_args)other;

      lastComparison = Boolean.valueOf(isSetDealOfferId()).compareTo(typedOther.isSetDealOfferId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDealOfferId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealOfferId, typedOther.dealOfferId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPaymentDetail()).compareTo(typedOther.isSetPaymentDetail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentDetail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentDetail, typedOther.paymentDetail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purchaseByCard_args(");
      boolean first = true;

      sb.append("dealOfferId:");
      if (this.dealOfferId == null) {
        sb.append("null");
      } else {
        sb.append(this.dealOfferId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paymentDetail:");
      if (this.paymentDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentDetail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (paymentDetail != null) {
        paymentDetail.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class purchaseByCard_argsStandardSchemeFactory implements SchemeFactory {
      public purchaseByCard_argsStandardScheme getScheme() {
        return new purchaseByCard_argsStandardScheme();
      }
    }

    private static class purchaseByCard_argsStandardScheme extends StandardScheme<purchaseByCard_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purchaseByCard_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEAL_OFFER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dealOfferId = iprot.readString();
                struct.setDealOfferIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAYMENT_DETAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.paymentDetail = new com.talool.api.thrift.PaymentDetail_t();
                struct.paymentDetail.read(iprot);
                struct.setPaymentDetailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purchaseByCard_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dealOfferId != null) {
          oprot.writeFieldBegin(DEAL_OFFER_ID_FIELD_DESC);
          oprot.writeString(struct.dealOfferId);
          oprot.writeFieldEnd();
        }
        if (struct.paymentDetail != null) {
          oprot.writeFieldBegin(PAYMENT_DETAIL_FIELD_DESC);
          struct.paymentDetail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purchaseByCard_argsTupleSchemeFactory implements SchemeFactory {
      public purchaseByCard_argsTupleScheme getScheme() {
        return new purchaseByCard_argsTupleScheme();
      }
    }

    private static class purchaseByCard_argsTupleScheme extends TupleScheme<purchaseByCard_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purchaseByCard_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDealOfferId()) {
          optionals.set(0);
        }
        if (struct.isSetPaymentDetail()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDealOfferId()) {
          oprot.writeString(struct.dealOfferId);
        }
        if (struct.isSetPaymentDetail()) {
          struct.paymentDetail.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purchaseByCard_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dealOfferId = iprot.readString();
          struct.setDealOfferIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.paymentDetail = new com.talool.api.thrift.PaymentDetail_t();
          struct.paymentDetail.read(iprot);
          struct.setPaymentDetailIsSet(true);
        }
      }
    }

  }

  public static class purchaseByCard_result implements org.apache.thrift.TBase<purchaseByCard_result, purchaseByCard_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purchaseByCard_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("userException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notFoundException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purchaseByCard_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purchaseByCard_resultTupleSchemeFactory());
    }

    public com.talool.api.thrift.TransactionResult_t success; // required
    public com.talool.api.thrift.TServiceException_t serviceException; // required
    public com.talool.api.thrift.TUserException_t userException; // required
    public com.talool.api.thrift.TNotFoundException_t notFoundException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SERVICE_EXCEPTION((short)1, "serviceException"),
      USER_EXCEPTION((short)2, "userException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SERVICE_EXCEPTION
            return SERVICE_EXCEPTION;
          case 2: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.TransactionResult_t.class)));
      tmpMap.put(_Fields.SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("serviceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.USER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("userException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("notFoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purchaseByCard_result.class, metaDataMap);
    }

    public purchaseByCard_result() {
    }

    public purchaseByCard_result(
      com.talool.api.thrift.TransactionResult_t success,
      com.talool.api.thrift.TServiceException_t serviceException,
      com.talool.api.thrift.TUserException_t userException,
      com.talool.api.thrift.TNotFoundException_t notFoundException)
    {
      this();
      this.success = success;
      this.serviceException = serviceException;
      this.userException = userException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purchaseByCard_result(purchaseByCard_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.talool.api.thrift.TransactionResult_t(other.success);
      }
      if (other.isSetServiceException()) {
        this.serviceException = new com.talool.api.thrift.TServiceException_t(other.serviceException);
      }
      if (other.isSetUserException()) {
        this.userException = new com.talool.api.thrift.TUserException_t(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.talool.api.thrift.TNotFoundException_t(other.notFoundException);
      }
    }

    public purchaseByCard_result deepCopy() {
      return new purchaseByCard_result(this);
    }

    public void clear() {
      this.success = null;
      this.serviceException = null;
      this.userException = null;
      this.notFoundException = null;
    }

    public com.talool.api.thrift.TransactionResult_t getSuccess() {
      return this.success;
    }

    public purchaseByCard_result setSuccess(com.talool.api.thrift.TransactionResult_t success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.TServiceException_t getServiceException() {
      return this.serviceException;
    }

    public purchaseByCard_result setServiceException(com.talool.api.thrift.TServiceException_t serviceException) {
      this.serviceException = serviceException;
      return this;
    }

    public void unsetServiceException() {
      this.serviceException = null;
    }

    /** Returns true if field serviceException is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceException() {
      return this.serviceException != null;
    }

    public void setServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.serviceException = null;
      }
    }

    public com.talool.api.thrift.TUserException_t getUserException() {
      return this.userException;
    }

    public purchaseByCard_result setUserException(com.talool.api.thrift.TUserException_t userException) {
      this.userException = userException;
      return this;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been assigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.talool.api.thrift.TNotFoundException_t getNotFoundException() {
      return this.notFoundException;
    }

    public purchaseByCard_result setNotFoundException(com.talool.api.thrift.TNotFoundException_t notFoundException) {
      this.notFoundException = notFoundException;
      return this;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.talool.api.thrift.TransactionResult_t)value);
        }
        break;

      case SERVICE_EXCEPTION:
        if (value == null) {
          unsetServiceException();
        } else {
          setServiceException((com.talool.api.thrift.TServiceException_t)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.talool.api.thrift.TUserException_t)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.talool.api.thrift.TNotFoundException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SERVICE_EXCEPTION:
        return getServiceException();

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SERVICE_EXCEPTION:
        return isSetServiceException();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purchaseByCard_result)
        return this.equals((purchaseByCard_result)that);
      return false;
    }

    public boolean equals(purchaseByCard_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_serviceException = true && this.isSetServiceException();
      boolean that_present_serviceException = true && that.isSetServiceException();
      if (this_present_serviceException || that_present_serviceException) {
        if (!(this_present_serviceException && that_present_serviceException))
          return false;
        if (!this.serviceException.equals(that.serviceException))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(purchaseByCard_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      purchaseByCard_result typedOther = (purchaseByCard_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceException()).compareTo(typedOther.isSetServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceException, typedOther.serviceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purchaseByCard_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceException:");
      if (this.serviceException == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class purchaseByCard_resultStandardSchemeFactory implements SchemeFactory {
      public purchaseByCard_resultStandardScheme getScheme() {
        return new purchaseByCard_resultStandardScheme();
      }
    }

    private static class purchaseByCard_resultStandardScheme extends StandardScheme<purchaseByCard_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purchaseByCard_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.talool.api.thrift.TransactionResult_t();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serviceException = new com.talool.api.thrift.TServiceException_t();
                struct.serviceException.read(iprot);
                struct.setServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userException = new com.talool.api.thrift.TUserException_t();
                struct.userException.read(iprot);
                struct.setUserExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOT_FOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFoundException = new com.talool.api.thrift.TNotFoundException_t();
                struct.notFoundException.read(iprot);
                struct.setNotFoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purchaseByCard_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.serviceException != null) {
          oprot.writeFieldBegin(SERVICE_EXCEPTION_FIELD_DESC);
          struct.serviceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userException != null) {
          oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
          struct.userException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFoundException != null) {
          oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
          struct.notFoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purchaseByCard_resultTupleSchemeFactory implements SchemeFactory {
      public purchaseByCard_resultTupleScheme getScheme() {
        return new purchaseByCard_resultTupleScheme();
      }
    }

    private static class purchaseByCard_resultTupleScheme extends TupleScheme<purchaseByCard_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purchaseByCard_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetUserException()) {
          optionals.set(2);
        }
        if (struct.isSetNotFoundException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetServiceException()) {
          struct.serviceException.write(oprot);
        }
        if (struct.isSetUserException()) {
          struct.userException.write(oprot);
        }
        if (struct.isSetNotFoundException()) {
          struct.notFoundException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purchaseByCard_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new com.talool.api.thrift.TransactionResult_t();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serviceException = new com.talool.api.thrift.TServiceException_t();
          struct.serviceException.read(iprot);
          struct.setServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userException = new com.talool.api.thrift.TUserException_t();
          struct.userException.read(iprot);
          struct.setUserExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.notFoundException = new com.talool.api.thrift.TNotFoundException_t();
          struct.notFoundException.read(iprot);
          struct.setNotFoundExceptionIsSet(true);
        }
      }
    }

  }

  public static class purchaseByCode_args implements org.apache.thrift.TBase<purchaseByCode_args, purchaseByCode_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purchaseByCode_args");

    private static final org.apache.thrift.protocol.TField DEAL_OFFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealOfferId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAYMENT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purchaseByCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purchaseByCode_argsTupleSchemeFactory());
    }

    public String dealOfferId; // required
    public String paymentCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEAL_OFFER_ID((short)1, "dealOfferId"),
      PAYMENT_CODE((short)2, "paymentCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEAL_OFFER_ID
            return DEAL_OFFER_ID;
          case 2: // PAYMENT_CODE
            return PAYMENT_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEAL_OFFER_ID, new org.apache.thrift.meta_data.FieldMetaData("dealOfferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAYMENT_CODE, new org.apache.thrift.meta_data.FieldMetaData("paymentCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purchaseByCode_args.class, metaDataMap);
    }

    public purchaseByCode_args() {
    }

    public purchaseByCode_args(
      String dealOfferId,
      String paymentCode)
    {
      this();
      this.dealOfferId = dealOfferId;
      this.paymentCode = paymentCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purchaseByCode_args(purchaseByCode_args other) {
      if (other.isSetDealOfferId()) {
        this.dealOfferId = other.dealOfferId;
      }
      if (other.isSetPaymentCode()) {
        this.paymentCode = other.paymentCode;
      }
    }

    public purchaseByCode_args deepCopy() {
      return new purchaseByCode_args(this);
    }

    public void clear() {
      this.dealOfferId = null;
      this.paymentCode = null;
    }

    public String getDealOfferId() {
      return this.dealOfferId;
    }

    public purchaseByCode_args setDealOfferId(String dealOfferId) {
      this.dealOfferId = dealOfferId;
      return this;
    }

    public void unsetDealOfferId() {
      this.dealOfferId = null;
    }

    /** Returns true if field dealOfferId is set (has been assigned a value) and false otherwise */
    public boolean isSetDealOfferId() {
      return this.dealOfferId != null;
    }

    public void setDealOfferIdIsSet(boolean value) {
      if (!value) {
        this.dealOfferId = null;
      }
    }

    public String getPaymentCode() {
      return this.paymentCode;
    }

    public purchaseByCode_args setPaymentCode(String paymentCode) {
      this.paymentCode = paymentCode;
      return this;
    }

    public void unsetPaymentCode() {
      this.paymentCode = null;
    }

    /** Returns true if field paymentCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentCode() {
      return this.paymentCode != null;
    }

    public void setPaymentCodeIsSet(boolean value) {
      if (!value) {
        this.paymentCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEAL_OFFER_ID:
        if (value == null) {
          unsetDealOfferId();
        } else {
          setDealOfferId((String)value);
        }
        break;

      case PAYMENT_CODE:
        if (value == null) {
          unsetPaymentCode();
        } else {
          setPaymentCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEAL_OFFER_ID:
        return getDealOfferId();

      case PAYMENT_CODE:
        return getPaymentCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEAL_OFFER_ID:
        return isSetDealOfferId();
      case PAYMENT_CODE:
        return isSetPaymentCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purchaseByCode_args)
        return this.equals((purchaseByCode_args)that);
      return false;
    }

    public boolean equals(purchaseByCode_args that) {
      if (that == null)
        return false;

      boolean this_present_dealOfferId = true && this.isSetDealOfferId();
      boolean that_present_dealOfferId = true && that.isSetDealOfferId();
      if (this_present_dealOfferId || that_present_dealOfferId) {
        if (!(this_present_dealOfferId && that_present_dealOfferId))
          return false;
        if (!this.dealOfferId.equals(that.dealOfferId))
          return false;
      }

      boolean this_present_paymentCode = true && this.isSetPaymentCode();
      boolean that_present_paymentCode = true && that.isSetPaymentCode();
      if (this_present_paymentCode || that_present_paymentCode) {
        if (!(this_present_paymentCode && that_present_paymentCode))
          return false;
        if (!this.paymentCode.equals(that.paymentCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(purchaseByCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      purchaseByCode_args typedOther = (purchaseByCode_args)other;

      lastComparison = Boolean.valueOf(isSetDealOfferId()).compareTo(typedOther.isSetDealOfferId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDealOfferId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealOfferId, typedOther.dealOfferId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPaymentCode()).compareTo(typedOther.isSetPaymentCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentCode, typedOther.paymentCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purchaseByCode_args(");
      boolean first = true;

      sb.append("dealOfferId:");
      if (this.dealOfferId == null) {
        sb.append("null");
      } else {
        sb.append(this.dealOfferId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paymentCode:");
      if (this.paymentCode == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class purchaseByCode_argsStandardSchemeFactory implements SchemeFactory {
      public purchaseByCode_argsStandardScheme getScheme() {
        return new purchaseByCode_argsStandardScheme();
      }
    }

    private static class purchaseByCode_argsStandardScheme extends StandardScheme<purchaseByCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purchaseByCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEAL_OFFER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dealOfferId = iprot.readString();
                struct.setDealOfferIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAYMENT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentCode = iprot.readString();
                struct.setPaymentCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purchaseByCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dealOfferId != null) {
          oprot.writeFieldBegin(DEAL_OFFER_ID_FIELD_DESC);
          oprot.writeString(struct.dealOfferId);
          oprot.writeFieldEnd();
        }
        if (struct.paymentCode != null) {
          oprot.writeFieldBegin(PAYMENT_CODE_FIELD_DESC);
          oprot.writeString(struct.paymentCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purchaseByCode_argsTupleSchemeFactory implements SchemeFactory {
      public purchaseByCode_argsTupleScheme getScheme() {
        return new purchaseByCode_argsTupleScheme();
      }
    }

    private static class purchaseByCode_argsTupleScheme extends TupleScheme<purchaseByCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purchaseByCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDealOfferId()) {
          optionals.set(0);
        }
        if (struct.isSetPaymentCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDealOfferId()) {
          oprot.writeString(struct.dealOfferId);
        }
        if (struct.isSetPaymentCode()) {
          oprot.writeString(struct.paymentCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purchaseByCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dealOfferId = iprot.readString();
          struct.setDealOfferIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.paymentCode = iprot.readString();
          struct.setPaymentCodeIsSet(true);
        }
      }
    }

  }

  public static class purchaseByCode_result implements org.apache.thrift.TBase<purchaseByCode_result, purchaseByCode_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purchaseByCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("userException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notFoundException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purchaseByCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purchaseByCode_resultTupleSchemeFactory());
    }

    public com.talool.api.thrift.TransactionResult_t success; // required
    public com.talool.api.thrift.TServiceException_t serviceException; // required
    public com.talool.api.thrift.TUserException_t userException; // required
    public com.talool.api.thrift.TNotFoundException_t notFoundException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SERVICE_EXCEPTION((short)1, "serviceException"),
      USER_EXCEPTION((short)2, "userException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SERVICE_EXCEPTION
            return SERVICE_EXCEPTION;
          case 2: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.TransactionResult_t.class)));
      tmpMap.put(_Fields.SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("serviceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.USER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("userException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("notFoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purchaseByCode_result.class, metaDataMap);
    }

    public purchaseByCode_result() {
    }

    public purchaseByCode_result(
      com.talool.api.thrift.TransactionResult_t success,
      com.talool.api.thrift.TServiceException_t serviceException,
      com.talool.api.thrift.TUserException_t userException,
      com.talool.api.thrift.TNotFoundException_t notFoundException)
    {
      this();
      this.success = success;
      this.serviceException = serviceException;
      this.userException = userException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purchaseByCode_result(purchaseByCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.talool.api.thrift.TransactionResult_t(other.success);
      }
      if (other.isSetServiceException()) {
        this.serviceException = new com.talool.api.thrift.TServiceException_t(other.serviceException);
      }
      if (other.isSetUserException()) {
        this.userException = new com.talool.api.thrift.TUserException_t(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.talool.api.thrift.TNotFoundException_t(other.notFoundException);
      }
    }

    public purchaseByCode_result deepCopy() {
      return new purchaseByCode_result(this);
    }

    public void clear() {
      this.success = null;
      this.serviceException = null;
      this.userException = null;
      this.notFoundException = null;
    }

    public com.talool.api.thrift.TransactionResult_t getSuccess() {
      return this.success;
    }

    public purchaseByCode_result setSuccess(com.talool.api.thrift.TransactionResult_t success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.TServiceException_t getServiceException() {
      return this.serviceException;
    }

    public purchaseByCode_result setServiceException(com.talool.api.thrift.TServiceException_t serviceException) {
      this.serviceException = serviceException;
      return this;
    }

    public void unsetServiceException() {
      this.serviceException = null;
    }

    /** Returns true if field serviceException is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceException() {
      return this.serviceException != null;
    }

    public void setServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.serviceException = null;
      }
    }

    public com.talool.api.thrift.TUserException_t getUserException() {
      return this.userException;
    }

    public purchaseByCode_result setUserException(com.talool.api.thrift.TUserException_t userException) {
      this.userException = userException;
      return this;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been assigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.talool.api.thrift.TNotFoundException_t getNotFoundException() {
      return this.notFoundException;
    }

    public purchaseByCode_result setNotFoundException(com.talool.api.thrift.TNotFoundException_t notFoundException) {
      this.notFoundException = notFoundException;
      return this;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.talool.api.thrift.TransactionResult_t)value);
        }
        break;

      case SERVICE_EXCEPTION:
        if (value == null) {
          unsetServiceException();
        } else {
          setServiceException((com.talool.api.thrift.TServiceException_t)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.talool.api.thrift.TUserException_t)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.talool.api.thrift.TNotFoundException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SERVICE_EXCEPTION:
        return getServiceException();

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SERVICE_EXCEPTION:
        return isSetServiceException();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purchaseByCode_result)
        return this.equals((purchaseByCode_result)that);
      return false;
    }

    public boolean equals(purchaseByCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_serviceException = true && this.isSetServiceException();
      boolean that_present_serviceException = true && that.isSetServiceException();
      if (this_present_serviceException || that_present_serviceException) {
        if (!(this_present_serviceException && that_present_serviceException))
          return false;
        if (!this.serviceException.equals(that.serviceException))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(purchaseByCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      purchaseByCode_result typedOther = (purchaseByCode_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceException()).compareTo(typedOther.isSetServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceException, typedOther.serviceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purchaseByCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceException:");
      if (this.serviceException == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class purchaseByCode_resultStandardSchemeFactory implements SchemeFactory {
      public purchaseByCode_resultStandardScheme getScheme() {
        return new purchaseByCode_resultStandardScheme();
      }
    }

    private static class purchaseByCode_resultStandardScheme extends StandardScheme<purchaseByCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purchaseByCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.talool.api.thrift.TransactionResult_t();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serviceException = new com.talool.api.thrift.TServiceException_t();
                struct.serviceException.read(iprot);
                struct.setServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userException = new com.talool.api.thrift.TUserException_t();
                struct.userException.read(iprot);
                struct.setUserExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOT_FOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFoundException = new com.talool.api.thrift.TNotFoundException_t();
                struct.notFoundException.read(iprot);
                struct.setNotFoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purchaseByCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.serviceException != null) {
          oprot.writeFieldBegin(SERVICE_EXCEPTION_FIELD_DESC);
          struct.serviceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userException != null) {
          oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
          struct.userException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFoundException != null) {
          oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
          struct.notFoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purchaseByCode_resultTupleSchemeFactory implements SchemeFactory {
      public purchaseByCode_resultTupleScheme getScheme() {
        return new purchaseByCode_resultTupleScheme();
      }
    }

    private static class purchaseByCode_resultTupleScheme extends TupleScheme<purchaseByCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purchaseByCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetUserException()) {
          optionals.set(2);
        }
        if (struct.isSetNotFoundException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetServiceException()) {
          struct.serviceException.write(oprot);
        }
        if (struct.isSetUserException()) {
          struct.userException.write(oprot);
        }
        if (struct.isSetNotFoundException()) {
          struct.notFoundException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purchaseByCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new com.talool.api.thrift.TransactionResult_t();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serviceException = new com.talool.api.thrift.TServiceException_t();
          struct.serviceException.read(iprot);
          struct.setServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userException = new com.talool.api.thrift.TUserException_t();
          struct.userException.read(iprot);
          struct.setUserExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.notFoundException = new com.talool.api.thrift.TNotFoundException_t();
          struct.notFoundException.read(iprot);
          struct.setNotFoundExceptionIsSet(true);
        }
      }
    }

  }

  public static class loginFacebook_args implements org.apache.thrift.TBase<loginFacebook_args, loginFacebook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginFacebook_args");

    private static final org.apache.thrift.protocol.TField FACEBOOK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("facebookId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FACEBOOK_ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("facebookAccessToken", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loginFacebook_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loginFacebook_argsTupleSchemeFactory());
    }

    public String facebookId; // required
    public String facebookAccessToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FACEBOOK_ID((short)1, "facebookId"),
      FACEBOOK_ACCESS_TOKEN((short)2, "facebookAccessToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FACEBOOK_ID
            return FACEBOOK_ID;
          case 2: // FACEBOOK_ACCESS_TOKEN
            return FACEBOOK_ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FACEBOOK_ID, new org.apache.thrift.meta_data.FieldMetaData("facebookId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FACEBOOK_ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("facebookAccessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginFacebook_args.class, metaDataMap);
    }

    public loginFacebook_args() {
    }

    public loginFacebook_args(
      String facebookId,
      String facebookAccessToken)
    {
      this();
      this.facebookId = facebookId;
      this.facebookAccessToken = facebookAccessToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginFacebook_args(loginFacebook_args other) {
      if (other.isSetFacebookId()) {
        this.facebookId = other.facebookId;
      }
      if (other.isSetFacebookAccessToken()) {
        this.facebookAccessToken = other.facebookAccessToken;
      }
    }

    public loginFacebook_args deepCopy() {
      return new loginFacebook_args(this);
    }

    public void clear() {
      this.facebookId = null;
      this.facebookAccessToken = null;
    }

    public String getFacebookId() {
      return this.facebookId;
    }

    public loginFacebook_args setFacebookId(String facebookId) {
      this.facebookId = facebookId;
      return this;
    }

    public void unsetFacebookId() {
      this.facebookId = null;
    }

    /** Returns true if field facebookId is set (has been assigned a value) and false otherwise */
    public boolean isSetFacebookId() {
      return this.facebookId != null;
    }

    public void setFacebookIdIsSet(boolean value) {
      if (!value) {
        this.facebookId = null;
      }
    }

    public String getFacebookAccessToken() {
      return this.facebookAccessToken;
    }

    public loginFacebook_args setFacebookAccessToken(String facebookAccessToken) {
      this.facebookAccessToken = facebookAccessToken;
      return this;
    }

    public void unsetFacebookAccessToken() {
      this.facebookAccessToken = null;
    }

    /** Returns true if field facebookAccessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetFacebookAccessToken() {
      return this.facebookAccessToken != null;
    }

    public void setFacebookAccessTokenIsSet(boolean value) {
      if (!value) {
        this.facebookAccessToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FACEBOOK_ID:
        if (value == null) {
          unsetFacebookId();
        } else {
          setFacebookId((String)value);
        }
        break;

      case FACEBOOK_ACCESS_TOKEN:
        if (value == null) {
          unsetFacebookAccessToken();
        } else {
          setFacebookAccessToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FACEBOOK_ID:
        return getFacebookId();

      case FACEBOOK_ACCESS_TOKEN:
        return getFacebookAccessToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FACEBOOK_ID:
        return isSetFacebookId();
      case FACEBOOK_ACCESS_TOKEN:
        return isSetFacebookAccessToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginFacebook_args)
        return this.equals((loginFacebook_args)that);
      return false;
    }

    public boolean equals(loginFacebook_args that) {
      if (that == null)
        return false;

      boolean this_present_facebookId = true && this.isSetFacebookId();
      boolean that_present_facebookId = true && that.isSetFacebookId();
      if (this_present_facebookId || that_present_facebookId) {
        if (!(this_present_facebookId && that_present_facebookId))
          return false;
        if (!this.facebookId.equals(that.facebookId))
          return false;
      }

      boolean this_present_facebookAccessToken = true && this.isSetFacebookAccessToken();
      boolean that_present_facebookAccessToken = true && that.isSetFacebookAccessToken();
      if (this_present_facebookAccessToken || that_present_facebookAccessToken) {
        if (!(this_present_facebookAccessToken && that_present_facebookAccessToken))
          return false;
        if (!this.facebookAccessToken.equals(that.facebookAccessToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loginFacebook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loginFacebook_args typedOther = (loginFacebook_args)other;

      lastComparison = Boolean.valueOf(isSetFacebookId()).compareTo(typedOther.isSetFacebookId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFacebookId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facebookId, typedOther.facebookId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFacebookAccessToken()).compareTo(typedOther.isSetFacebookAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFacebookAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facebookAccessToken, typedOther.facebookAccessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loginFacebook_args(");
      boolean first = true;

      sb.append("facebookId:");
      if (this.facebookId == null) {
        sb.append("null");
      } else {
        sb.append(this.facebookId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("facebookAccessToken:");
      if (this.facebookAccessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.facebookAccessToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class loginFacebook_argsStandardSchemeFactory implements SchemeFactory {
      public loginFacebook_argsStandardScheme getScheme() {
        return new loginFacebook_argsStandardScheme();
      }
    }

    private static class loginFacebook_argsStandardScheme extends StandardScheme<loginFacebook_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginFacebook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FACEBOOK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.facebookId = iprot.readString();
                struct.setFacebookIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FACEBOOK_ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.facebookAccessToken = iprot.readString();
                struct.setFacebookAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginFacebook_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.facebookId != null) {
          oprot.writeFieldBegin(FACEBOOK_ID_FIELD_DESC);
          oprot.writeString(struct.facebookId);
          oprot.writeFieldEnd();
        }
        if (struct.facebookAccessToken != null) {
          oprot.writeFieldBegin(FACEBOOK_ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.facebookAccessToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginFacebook_argsTupleSchemeFactory implements SchemeFactory {
      public loginFacebook_argsTupleScheme getScheme() {
        return new loginFacebook_argsTupleScheme();
      }
    }

    private static class loginFacebook_argsTupleScheme extends TupleScheme<loginFacebook_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginFacebook_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFacebookId()) {
          optionals.set(0);
        }
        if (struct.isSetFacebookAccessToken()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFacebookId()) {
          oprot.writeString(struct.facebookId);
        }
        if (struct.isSetFacebookAccessToken()) {
          oprot.writeString(struct.facebookAccessToken);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginFacebook_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.facebookId = iprot.readString();
          struct.setFacebookIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.facebookAccessToken = iprot.readString();
          struct.setFacebookAccessTokenIsSet(true);
        }
      }
    }

  }

  public static class loginFacebook_result implements org.apache.thrift.TBase<loginFacebook_result, loginFacebook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginFacebook_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loginFacebook_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loginFacebook_resultTupleSchemeFactory());
    }

    public CTokenAccessResponse_t success; // required
    public com.talool.api.thrift.TServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CTokenAccessResponse_t.class)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginFacebook_result.class, metaDataMap);
    }

    public loginFacebook_result() {
    }

    public loginFacebook_result(
      CTokenAccessResponse_t success,
      com.talool.api.thrift.TServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginFacebook_result(loginFacebook_result other) {
      if (other.isSetSuccess()) {
        this.success = new CTokenAccessResponse_t(other.success);
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.TServiceException_t(other.error);
      }
    }

    public loginFacebook_result deepCopy() {
      return new loginFacebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public CTokenAccessResponse_t getSuccess() {
      return this.success;
    }

    public loginFacebook_result setSuccess(CTokenAccessResponse_t success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.TServiceException_t getError() {
      return this.error;
    }

    public loginFacebook_result setError(com.talool.api.thrift.TServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CTokenAccessResponse_t)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.TServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginFacebook_result)
        return this.equals((loginFacebook_result)that);
      return false;
    }

    public boolean equals(loginFacebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loginFacebook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loginFacebook_result typedOther = (loginFacebook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loginFacebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class loginFacebook_resultStandardSchemeFactory implements SchemeFactory {
      public loginFacebook_resultStandardScheme getScheme() {
        return new loginFacebook_resultStandardScheme();
      }
    }

    private static class loginFacebook_resultStandardScheme extends StandardScheme<loginFacebook_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginFacebook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CTokenAccessResponse_t();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.TServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginFacebook_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginFacebook_resultTupleSchemeFactory implements SchemeFactory {
      public loginFacebook_resultTupleScheme getScheme() {
        return new loginFacebook_resultTupleScheme();
      }
    }

    private static class loginFacebook_resultTupleScheme extends TupleScheme<loginFacebook_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginFacebook_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginFacebook_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CTokenAccessResponse_t();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.TServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getDealOfferGeoSummariesWithin_args implements org.apache.thrift.TBase<getDealOfferGeoSummariesWithin_args, getDealOfferGeoSummariesWithin_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDealOfferGeoSummariesWithin_args");

    private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MAX_MILES_FIELD_DESC = new org.apache.thrift.protocol.TField("maxMiles", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SEARCH_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("searchOptions", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField FALLBACK_SEARCH_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("fallbackSearchOptions", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDealOfferGeoSummariesWithin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDealOfferGeoSummariesWithin_argsTupleSchemeFactory());
    }

    public com.talool.api.thrift.Location_t location; // required
    public int maxMiles; // required
    public com.talool.api.thrift.SearchOptions_t searchOptions; // required
    public com.talool.api.thrift.SearchOptions_t fallbackSearchOptions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCATION((short)1, "location"),
      MAX_MILES((short)2, "maxMiles"),
      SEARCH_OPTIONS((short)3, "searchOptions"),
      FALLBACK_SEARCH_OPTIONS((short)4, "fallbackSearchOptions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCATION
            return LOCATION;
          case 2: // MAX_MILES
            return MAX_MILES;
          case 3: // SEARCH_OPTIONS
            return SEARCH_OPTIONS;
          case 4: // FALLBACK_SEARCH_OPTIONS
            return FALLBACK_SEARCH_OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MAXMILES_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.Location_t.class)));
      tmpMap.put(_Fields.MAX_MILES, new org.apache.thrift.meta_data.FieldMetaData("maxMiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SEARCH_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("searchOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.SearchOptions_t.class)));
      tmpMap.put(_Fields.FALLBACK_SEARCH_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("fallbackSearchOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.SearchOptions_t.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDealOfferGeoSummariesWithin_args.class, metaDataMap);
    }

    public getDealOfferGeoSummariesWithin_args() {
    }

    public getDealOfferGeoSummariesWithin_args(
      com.talool.api.thrift.Location_t location,
      int maxMiles,
      com.talool.api.thrift.SearchOptions_t searchOptions,
      com.talool.api.thrift.SearchOptions_t fallbackSearchOptions)
    {
      this();
      this.location = location;
      this.maxMiles = maxMiles;
      setMaxMilesIsSet(true);
      this.searchOptions = searchOptions;
      this.fallbackSearchOptions = fallbackSearchOptions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDealOfferGeoSummariesWithin_args(getDealOfferGeoSummariesWithin_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetLocation()) {
        this.location = new com.talool.api.thrift.Location_t(other.location);
      }
      this.maxMiles = other.maxMiles;
      if (other.isSetSearchOptions()) {
        this.searchOptions = new com.talool.api.thrift.SearchOptions_t(other.searchOptions);
      }
      if (other.isSetFallbackSearchOptions()) {
        this.fallbackSearchOptions = new com.talool.api.thrift.SearchOptions_t(other.fallbackSearchOptions);
      }
    }

    public getDealOfferGeoSummariesWithin_args deepCopy() {
      return new getDealOfferGeoSummariesWithin_args(this);
    }

    public void clear() {
      this.location = null;
      setMaxMilesIsSet(false);
      this.maxMiles = 0;
      this.searchOptions = null;
      this.fallbackSearchOptions = null;
    }

    public com.talool.api.thrift.Location_t getLocation() {
      return this.location;
    }

    public getDealOfferGeoSummariesWithin_args setLocation(com.talool.api.thrift.Location_t location) {
      this.location = location;
      return this;
    }

    public void unsetLocation() {
      this.location = null;
    }

    /** Returns true if field location is set (has been assigned a value) and false otherwise */
    public boolean isSetLocation() {
      return this.location != null;
    }

    public void setLocationIsSet(boolean value) {
      if (!value) {
        this.location = null;
      }
    }

    public int getMaxMiles() {
      return this.maxMiles;
    }

    public getDealOfferGeoSummariesWithin_args setMaxMiles(int maxMiles) {
      this.maxMiles = maxMiles;
      setMaxMilesIsSet(true);
      return this;
    }

    public void unsetMaxMiles() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXMILES_ISSET_ID);
    }

    /** Returns true if field maxMiles is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxMiles() {
      return EncodingUtils.testBit(__isset_bitfield, __MAXMILES_ISSET_ID);
    }

    public void setMaxMilesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXMILES_ISSET_ID, value);
    }

    public com.talool.api.thrift.SearchOptions_t getSearchOptions() {
      return this.searchOptions;
    }

    public getDealOfferGeoSummariesWithin_args setSearchOptions(com.talool.api.thrift.SearchOptions_t searchOptions) {
      this.searchOptions = searchOptions;
      return this;
    }

    public void unsetSearchOptions() {
      this.searchOptions = null;
    }

    /** Returns true if field searchOptions is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchOptions() {
      return this.searchOptions != null;
    }

    public void setSearchOptionsIsSet(boolean value) {
      if (!value) {
        this.searchOptions = null;
      }
    }

    public com.talool.api.thrift.SearchOptions_t getFallbackSearchOptions() {
      return this.fallbackSearchOptions;
    }

    public getDealOfferGeoSummariesWithin_args setFallbackSearchOptions(com.talool.api.thrift.SearchOptions_t fallbackSearchOptions) {
      this.fallbackSearchOptions = fallbackSearchOptions;
      return this;
    }

    public void unsetFallbackSearchOptions() {
      this.fallbackSearchOptions = null;
    }

    /** Returns true if field fallbackSearchOptions is set (has been assigned a value) and false otherwise */
    public boolean isSetFallbackSearchOptions() {
      return this.fallbackSearchOptions != null;
    }

    public void setFallbackSearchOptionsIsSet(boolean value) {
      if (!value) {
        this.fallbackSearchOptions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          setLocation((com.talool.api.thrift.Location_t)value);
        }
        break;

      case MAX_MILES:
        if (value == null) {
          unsetMaxMiles();
        } else {
          setMaxMiles((Integer)value);
        }
        break;

      case SEARCH_OPTIONS:
        if (value == null) {
          unsetSearchOptions();
        } else {
          setSearchOptions((com.talool.api.thrift.SearchOptions_t)value);
        }
        break;

      case FALLBACK_SEARCH_OPTIONS:
        if (value == null) {
          unsetFallbackSearchOptions();
        } else {
          setFallbackSearchOptions((com.talool.api.thrift.SearchOptions_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCATION:
        return getLocation();

      case MAX_MILES:
        return Integer.valueOf(getMaxMiles());

      case SEARCH_OPTIONS:
        return getSearchOptions();

      case FALLBACK_SEARCH_OPTIONS:
        return getFallbackSearchOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOCATION:
        return isSetLocation();
      case MAX_MILES:
        return isSetMaxMiles();
      case SEARCH_OPTIONS:
        return isSetSearchOptions();
      case FALLBACK_SEARCH_OPTIONS:
        return isSetFallbackSearchOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDealOfferGeoSummariesWithin_args)
        return this.equals((getDealOfferGeoSummariesWithin_args)that);
      return false;
    }

    public boolean equals(getDealOfferGeoSummariesWithin_args that) {
      if (that == null)
        return false;

      boolean this_present_location = true && this.isSetLocation();
      boolean that_present_location = true && that.isSetLocation();
      if (this_present_location || that_present_location) {
        if (!(this_present_location && that_present_location))
          return false;
        if (!this.location.equals(that.location))
          return false;
      }

      boolean this_present_maxMiles = true;
      boolean that_present_maxMiles = true;
      if (this_present_maxMiles || that_present_maxMiles) {
        if (!(this_present_maxMiles && that_present_maxMiles))
          return false;
        if (this.maxMiles != that.maxMiles)
          return false;
      }

      boolean this_present_searchOptions = true && this.isSetSearchOptions();
      boolean that_present_searchOptions = true && that.isSetSearchOptions();
      if (this_present_searchOptions || that_present_searchOptions) {
        if (!(this_present_searchOptions && that_present_searchOptions))
          return false;
        if (!this.searchOptions.equals(that.searchOptions))
          return false;
      }

      boolean this_present_fallbackSearchOptions = true && this.isSetFallbackSearchOptions();
      boolean that_present_fallbackSearchOptions = true && that.isSetFallbackSearchOptions();
      if (this_present_fallbackSearchOptions || that_present_fallbackSearchOptions) {
        if (!(this_present_fallbackSearchOptions && that_present_fallbackSearchOptions))
          return false;
        if (!this.fallbackSearchOptions.equals(that.fallbackSearchOptions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDealOfferGeoSummariesWithin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDealOfferGeoSummariesWithin_args typedOther = (getDealOfferGeoSummariesWithin_args)other;

      lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxMiles()).compareTo(typedOther.isSetMaxMiles());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxMiles()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxMiles, typedOther.maxMiles);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSearchOptions()).compareTo(typedOther.isSetSearchOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchOptions, typedOther.searchOptions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFallbackSearchOptions()).compareTo(typedOther.isSetFallbackSearchOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFallbackSearchOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fallbackSearchOptions, typedOther.fallbackSearchOptions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDealOfferGeoSummariesWithin_args(");
      boolean first = true;

      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxMiles:");
      sb.append(this.maxMiles);
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchOptions:");
      if (this.searchOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.searchOptions);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fallbackSearchOptions:");
      if (this.fallbackSearchOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.fallbackSearchOptions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (location != null) {
        location.validate();
      }
      if (searchOptions != null) {
        searchOptions.validate();
      }
      if (fallbackSearchOptions != null) {
        fallbackSearchOptions.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getDealOfferGeoSummariesWithin_argsStandardSchemeFactory implements SchemeFactory {
      public getDealOfferGeoSummariesWithin_argsStandardScheme getScheme() {
        return new getDealOfferGeoSummariesWithin_argsStandardScheme();
      }
    }

    private static class getDealOfferGeoSummariesWithin_argsStandardScheme extends StandardScheme<getDealOfferGeoSummariesWithin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDealOfferGeoSummariesWithin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.location = new com.talool.api.thrift.Location_t();
                struct.location.read(iprot);
                struct.setLocationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MAX_MILES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.maxMiles = iprot.readI32();
                struct.setMaxMilesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SEARCH_OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
                struct.searchOptions.read(iprot);
                struct.setSearchOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FALLBACK_SEARCH_OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fallbackSearchOptions = new com.talool.api.thrift.SearchOptions_t();
                struct.fallbackSearchOptions.read(iprot);
                struct.setFallbackSearchOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDealOfferGeoSummariesWithin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.location != null) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          struct.location.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MAX_MILES_FIELD_DESC);
        oprot.writeI32(struct.maxMiles);
        oprot.writeFieldEnd();
        if (struct.searchOptions != null) {
          oprot.writeFieldBegin(SEARCH_OPTIONS_FIELD_DESC);
          struct.searchOptions.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fallbackSearchOptions != null) {
          oprot.writeFieldBegin(FALLBACK_SEARCH_OPTIONS_FIELD_DESC);
          struct.fallbackSearchOptions.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDealOfferGeoSummariesWithin_argsTupleSchemeFactory implements SchemeFactory {
      public getDealOfferGeoSummariesWithin_argsTupleScheme getScheme() {
        return new getDealOfferGeoSummariesWithin_argsTupleScheme();
      }
    }

    private static class getDealOfferGeoSummariesWithin_argsTupleScheme extends TupleScheme<getDealOfferGeoSummariesWithin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDealOfferGeoSummariesWithin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLocation()) {
          optionals.set(0);
        }
        if (struct.isSetMaxMiles()) {
          optionals.set(1);
        }
        if (struct.isSetSearchOptions()) {
          optionals.set(2);
        }
        if (struct.isSetFallbackSearchOptions()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetLocation()) {
          struct.location.write(oprot);
        }
        if (struct.isSetMaxMiles()) {
          oprot.writeI32(struct.maxMiles);
        }
        if (struct.isSetSearchOptions()) {
          struct.searchOptions.write(oprot);
        }
        if (struct.isSetFallbackSearchOptions()) {
          struct.fallbackSearchOptions.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDealOfferGeoSummariesWithin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.location = new com.talool.api.thrift.Location_t();
          struct.location.read(iprot);
          struct.setLocationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.maxMiles = iprot.readI32();
          struct.setMaxMilesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
          struct.searchOptions.read(iprot);
          struct.setSearchOptionsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.fallbackSearchOptions = new com.talool.api.thrift.SearchOptions_t();
          struct.fallbackSearchOptions.read(iprot);
          struct.setFallbackSearchOptionsIsSet(true);
        }
      }
    }

  }

  public static class getDealOfferGeoSummariesWithin_result implements org.apache.thrift.TBase<getDealOfferGeoSummariesWithin_result, getDealOfferGeoSummariesWithin_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDealOfferGeoSummariesWithin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDealOfferGeoSummariesWithin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDealOfferGeoSummariesWithin_resultTupleSchemeFactory());
    }

    public DealOfferGeoSummariesResponse_t success; // required
    public com.talool.api.thrift.TServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DealOfferGeoSummariesResponse_t.class)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDealOfferGeoSummariesWithin_result.class, metaDataMap);
    }

    public getDealOfferGeoSummariesWithin_result() {
    }

    public getDealOfferGeoSummariesWithin_result(
      DealOfferGeoSummariesResponse_t success,
      com.talool.api.thrift.TServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDealOfferGeoSummariesWithin_result(getDealOfferGeoSummariesWithin_result other) {
      if (other.isSetSuccess()) {
        this.success = new DealOfferGeoSummariesResponse_t(other.success);
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.TServiceException_t(other.error);
      }
    }

    public getDealOfferGeoSummariesWithin_result deepCopy() {
      return new getDealOfferGeoSummariesWithin_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public DealOfferGeoSummariesResponse_t getSuccess() {
      return this.success;
    }

    public getDealOfferGeoSummariesWithin_result setSuccess(DealOfferGeoSummariesResponse_t success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.TServiceException_t getError() {
      return this.error;
    }

    public getDealOfferGeoSummariesWithin_result setError(com.talool.api.thrift.TServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DealOfferGeoSummariesResponse_t)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.TServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDealOfferGeoSummariesWithin_result)
        return this.equals((getDealOfferGeoSummariesWithin_result)that);
      return false;
    }

    public boolean equals(getDealOfferGeoSummariesWithin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDealOfferGeoSummariesWithin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDealOfferGeoSummariesWithin_result typedOther = (getDealOfferGeoSummariesWithin_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDealOfferGeoSummariesWithin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getDealOfferGeoSummariesWithin_resultStandardSchemeFactory implements SchemeFactory {
      public getDealOfferGeoSummariesWithin_resultStandardScheme getScheme() {
        return new getDealOfferGeoSummariesWithin_resultStandardScheme();
      }
    }

    private static class getDealOfferGeoSummariesWithin_resultStandardScheme extends StandardScheme<getDealOfferGeoSummariesWithin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDealOfferGeoSummariesWithin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DealOfferGeoSummariesResponse_t();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.TServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDealOfferGeoSummariesWithin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDealOfferGeoSummariesWithin_resultTupleSchemeFactory implements SchemeFactory {
      public getDealOfferGeoSummariesWithin_resultTupleScheme getScheme() {
        return new getDealOfferGeoSummariesWithin_resultTupleScheme();
      }
    }

    private static class getDealOfferGeoSummariesWithin_resultTupleScheme extends TupleScheme<getDealOfferGeoSummariesWithin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDealOfferGeoSummariesWithin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDealOfferGeoSummariesWithin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new DealOfferGeoSummariesResponse_t();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.TServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class getMerchantsByDealOfferId_args implements org.apache.thrift.TBase<getMerchantsByDealOfferId_args, getMerchantsByDealOfferId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantsByDealOfferId_args");

    private static final org.apache.thrift.protocol.TField DEAL_OFFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealOfferId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SEARCH_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("searchOptions", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantsByDealOfferId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantsByDealOfferId_argsTupleSchemeFactory());
    }

    public String dealOfferId; // required
    public com.talool.api.thrift.SearchOptions_t searchOptions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEAL_OFFER_ID((short)1, "dealOfferId"),
      SEARCH_OPTIONS((short)2, "searchOptions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEAL_OFFER_ID
            return DEAL_OFFER_ID;
          case 2: // SEARCH_OPTIONS
            return SEARCH_OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEAL_OFFER_ID, new org.apache.thrift.meta_data.FieldMetaData("dealOfferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEARCH_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("searchOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.SearchOptions_t.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantsByDealOfferId_args.class, metaDataMap);
    }

    public getMerchantsByDealOfferId_args() {
    }

    public getMerchantsByDealOfferId_args(
      String dealOfferId,
      com.talool.api.thrift.SearchOptions_t searchOptions)
    {
      this();
      this.dealOfferId = dealOfferId;
      this.searchOptions = searchOptions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantsByDealOfferId_args(getMerchantsByDealOfferId_args other) {
      if (other.isSetDealOfferId()) {
        this.dealOfferId = other.dealOfferId;
      }
      if (other.isSetSearchOptions()) {
        this.searchOptions = new com.talool.api.thrift.SearchOptions_t(other.searchOptions);
      }
    }

    public getMerchantsByDealOfferId_args deepCopy() {
      return new getMerchantsByDealOfferId_args(this);
    }

    public void clear() {
      this.dealOfferId = null;
      this.searchOptions = null;
    }

    public String getDealOfferId() {
      return this.dealOfferId;
    }

    public getMerchantsByDealOfferId_args setDealOfferId(String dealOfferId) {
      this.dealOfferId = dealOfferId;
      return this;
    }

    public void unsetDealOfferId() {
      this.dealOfferId = null;
    }

    /** Returns true if field dealOfferId is set (has been assigned a value) and false otherwise */
    public boolean isSetDealOfferId() {
      return this.dealOfferId != null;
    }

    public void setDealOfferIdIsSet(boolean value) {
      if (!value) {
        this.dealOfferId = null;
      }
    }

    public com.talool.api.thrift.SearchOptions_t getSearchOptions() {
      return this.searchOptions;
    }

    public getMerchantsByDealOfferId_args setSearchOptions(com.talool.api.thrift.SearchOptions_t searchOptions) {
      this.searchOptions = searchOptions;
      return this;
    }

    public void unsetSearchOptions() {
      this.searchOptions = null;
    }

    /** Returns true if field searchOptions is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchOptions() {
      return this.searchOptions != null;
    }

    public void setSearchOptionsIsSet(boolean value) {
      if (!value) {
        this.searchOptions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEAL_OFFER_ID:
        if (value == null) {
          unsetDealOfferId();
        } else {
          setDealOfferId((String)value);
        }
        break;

      case SEARCH_OPTIONS:
        if (value == null) {
          unsetSearchOptions();
        } else {
          setSearchOptions((com.talool.api.thrift.SearchOptions_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEAL_OFFER_ID:
        return getDealOfferId();

      case SEARCH_OPTIONS:
        return getSearchOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEAL_OFFER_ID:
        return isSetDealOfferId();
      case SEARCH_OPTIONS:
        return isSetSearchOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantsByDealOfferId_args)
        return this.equals((getMerchantsByDealOfferId_args)that);
      return false;
    }

    public boolean equals(getMerchantsByDealOfferId_args that) {
      if (that == null)
        return false;

      boolean this_present_dealOfferId = true && this.isSetDealOfferId();
      boolean that_present_dealOfferId = true && that.isSetDealOfferId();
      if (this_present_dealOfferId || that_present_dealOfferId) {
        if (!(this_present_dealOfferId && that_present_dealOfferId))
          return false;
        if (!this.dealOfferId.equals(that.dealOfferId))
          return false;
      }

      boolean this_present_searchOptions = true && this.isSetSearchOptions();
      boolean that_present_searchOptions = true && that.isSetSearchOptions();
      if (this_present_searchOptions || that_present_searchOptions) {
        if (!(this_present_searchOptions && that_present_searchOptions))
          return false;
        if (!this.searchOptions.equals(that.searchOptions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMerchantsByDealOfferId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMerchantsByDealOfferId_args typedOther = (getMerchantsByDealOfferId_args)other;

      lastComparison = Boolean.valueOf(isSetDealOfferId()).compareTo(typedOther.isSetDealOfferId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDealOfferId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealOfferId, typedOther.dealOfferId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSearchOptions()).compareTo(typedOther.isSetSearchOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchOptions, typedOther.searchOptions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantsByDealOfferId_args(");
      boolean first = true;

      sb.append("dealOfferId:");
      if (this.dealOfferId == null) {
        sb.append("null");
      } else {
        sb.append(this.dealOfferId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchOptions:");
      if (this.searchOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.searchOptions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (searchOptions != null) {
        searchOptions.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMerchantsByDealOfferId_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantsByDealOfferId_argsStandardScheme getScheme() {
        return new getMerchantsByDealOfferId_argsStandardScheme();
      }
    }

    private static class getMerchantsByDealOfferId_argsStandardScheme extends StandardScheme<getMerchantsByDealOfferId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantsByDealOfferId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEAL_OFFER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dealOfferId = iprot.readString();
                struct.setDealOfferIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEARCH_OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
                struct.searchOptions.read(iprot);
                struct.setSearchOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantsByDealOfferId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dealOfferId != null) {
          oprot.writeFieldBegin(DEAL_OFFER_ID_FIELD_DESC);
          oprot.writeString(struct.dealOfferId);
          oprot.writeFieldEnd();
        }
        if (struct.searchOptions != null) {
          oprot.writeFieldBegin(SEARCH_OPTIONS_FIELD_DESC);
          struct.searchOptions.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantsByDealOfferId_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantsByDealOfferId_argsTupleScheme getScheme() {
        return new getMerchantsByDealOfferId_argsTupleScheme();
      }
    }

    private static class getMerchantsByDealOfferId_argsTupleScheme extends TupleScheme<getMerchantsByDealOfferId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantsByDealOfferId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDealOfferId()) {
          optionals.set(0);
        }
        if (struct.isSetSearchOptions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDealOfferId()) {
          oprot.writeString(struct.dealOfferId);
        }
        if (struct.isSetSearchOptions()) {
          struct.searchOptions.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantsByDealOfferId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dealOfferId = iprot.readString();
          struct.setDealOfferIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.searchOptions = new com.talool.api.thrift.SearchOptions_t();
          struct.searchOptions.read(iprot);
          struct.setSearchOptionsIsSet(true);
        }
      }
    }

  }

  public static class getMerchantsByDealOfferId_result implements org.apache.thrift.TBase<getMerchantsByDealOfferId_result, getMerchantsByDealOfferId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantsByDealOfferId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantsByDealOfferId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantsByDealOfferId_resultTupleSchemeFactory());
    }

    public MerchantsResponse_t success; // required
    public com.talool.api.thrift.ServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MerchantsResponse_t.class)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantsByDealOfferId_result.class, metaDataMap);
    }

    public getMerchantsByDealOfferId_result() {
    }

    public getMerchantsByDealOfferId_result(
      MerchantsResponse_t success,
      com.talool.api.thrift.ServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantsByDealOfferId_result(getMerchantsByDealOfferId_result other) {
      if (other.isSetSuccess()) {
        this.success = new MerchantsResponse_t(other.success);
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.ServiceException_t(other.error);
      }
    }

    public getMerchantsByDealOfferId_result deepCopy() {
      return new getMerchantsByDealOfferId_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public MerchantsResponse_t getSuccess() {
      return this.success;
    }

    public getMerchantsByDealOfferId_result setSuccess(MerchantsResponse_t success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.ServiceException_t getError() {
      return this.error;
    }

    public getMerchantsByDealOfferId_result setError(com.talool.api.thrift.ServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MerchantsResponse_t)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.ServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantsByDealOfferId_result)
        return this.equals((getMerchantsByDealOfferId_result)that);
      return false;
    }

    public boolean equals(getMerchantsByDealOfferId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMerchantsByDealOfferId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMerchantsByDealOfferId_result typedOther = (getMerchantsByDealOfferId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantsByDealOfferId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class getMerchantsByDealOfferId_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantsByDealOfferId_resultStandardScheme getScheme() {
        return new getMerchantsByDealOfferId_resultStandardScheme();
      }
    }

    private static class getMerchantsByDealOfferId_resultStandardScheme extends StandardScheme<getMerchantsByDealOfferId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantsByDealOfferId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MerchantsResponse_t();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.ServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantsByDealOfferId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantsByDealOfferId_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantsByDealOfferId_resultTupleScheme getScheme() {
        return new getMerchantsByDealOfferId_resultTupleScheme();
      }
    }

    private static class getMerchantsByDealOfferId_resultTupleScheme extends TupleScheme<getMerchantsByDealOfferId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantsByDealOfferId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantsByDealOfferId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new MerchantsResponse_t();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.ServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class validateCode_args implements org.apache.thrift.TBase<validateCode_args, validateCode_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateCode_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEAL_OFFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealOfferId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validateCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validateCode_argsTupleSchemeFactory());
    }

    public String code; // required
    public String dealOfferId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code"),
      DEAL_OFFER_ID((short)2, "dealOfferId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          case 2: // DEAL_OFFER_ID
            return DEAL_OFFER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEAL_OFFER_ID, new org.apache.thrift.meta_data.FieldMetaData("dealOfferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateCode_args.class, metaDataMap);
    }

    public validateCode_args() {
    }

    public validateCode_args(
      String code,
      String dealOfferId)
    {
      this();
      this.code = code;
      this.dealOfferId = dealOfferId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateCode_args(validateCode_args other) {
      if (other.isSetCode()) {
        this.code = other.code;
      }
      if (other.isSetDealOfferId()) {
        this.dealOfferId = other.dealOfferId;
      }
    }

    public validateCode_args deepCopy() {
      return new validateCode_args(this);
    }

    public void clear() {
      this.code = null;
      this.dealOfferId = null;
    }

    public String getCode() {
      return this.code;
    }

    public validateCode_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public String getDealOfferId() {
      return this.dealOfferId;
    }

    public validateCode_args setDealOfferId(String dealOfferId) {
      this.dealOfferId = dealOfferId;
      return this;
    }

    public void unsetDealOfferId() {
      this.dealOfferId = null;
    }

    /** Returns true if field dealOfferId is set (has been assigned a value) and false otherwise */
    public boolean isSetDealOfferId() {
      return this.dealOfferId != null;
    }

    public void setDealOfferIdIsSet(boolean value) {
      if (!value) {
        this.dealOfferId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case DEAL_OFFER_ID:
        if (value == null) {
          unsetDealOfferId();
        } else {
          setDealOfferId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return getCode();

      case DEAL_OFFER_ID:
        return getDealOfferId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return isSetCode();
      case DEAL_OFFER_ID:
        return isSetDealOfferId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateCode_args)
        return this.equals((validateCode_args)that);
      return false;
    }

    public boolean equals(validateCode_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_dealOfferId = true && this.isSetDealOfferId();
      boolean that_present_dealOfferId = true && that.isSetDealOfferId();
      if (this_present_dealOfferId || that_present_dealOfferId) {
        if (!(this_present_dealOfferId && that_present_dealOfferId))
          return false;
        if (!this.dealOfferId.equals(that.dealOfferId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(validateCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      validateCode_args typedOther = (validateCode_args)other;

      lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, typedOther.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDealOfferId()).compareTo(typedOther.isSetDealOfferId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDealOfferId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealOfferId, typedOther.dealOfferId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validateCode_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dealOfferId:");
      if (this.dealOfferId == null) {
        sb.append("null");
      } else {
        sb.append(this.dealOfferId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class validateCode_argsStandardSchemeFactory implements SchemeFactory {
      public validateCode_argsStandardScheme getScheme() {
        return new validateCode_argsStandardScheme();
      }
    }

    private static class validateCode_argsStandardScheme extends StandardScheme<validateCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validateCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEAL_OFFER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dealOfferId = iprot.readString();
                struct.setDealOfferIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validateCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        if (struct.dealOfferId != null) {
          oprot.writeFieldBegin(DEAL_OFFER_ID_FIELD_DESC);
          oprot.writeString(struct.dealOfferId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validateCode_argsTupleSchemeFactory implements SchemeFactory {
      public validateCode_argsTupleScheme getScheme() {
        return new validateCode_argsTupleScheme();
      }
    }

    private static class validateCode_argsTupleScheme extends TupleScheme<validateCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validateCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCode()) {
          optionals.set(0);
        }
        if (struct.isSetDealOfferId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetDealOfferId()) {
          oprot.writeString(struct.dealOfferId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validateCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dealOfferId = iprot.readString();
          struct.setDealOfferIdIsSet(true);
        }
      }
    }

  }

  public static class validateCode_result implements org.apache.thrift.TBase<validateCode_result, validateCode_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validateCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validateCode_resultTupleSchemeFactory());
    }

    public ValidateCodeResponse_t success; // required
    public com.talool.api.thrift.TServiceException_t error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ValidateCodeResponse_t.class)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateCode_result.class, metaDataMap);
    }

    public validateCode_result() {
    }

    public validateCode_result(
      ValidateCodeResponse_t success,
      com.talool.api.thrift.TServiceException_t error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateCode_result(validateCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new ValidateCodeResponse_t(other.success);
      }
      if (other.isSetError()) {
        this.error = new com.talool.api.thrift.TServiceException_t(other.error);
      }
    }

    public validateCode_result deepCopy() {
      return new validateCode_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    public ValidateCodeResponse_t getSuccess() {
      return this.success;
    }

    public validateCode_result setSuccess(ValidateCodeResponse_t success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.TServiceException_t getError() {
      return this.error;
    }

    public validateCode_result setError(com.talool.api.thrift.TServiceException_t error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ValidateCodeResponse_t)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.talool.api.thrift.TServiceException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateCode_result)
        return this.equals((validateCode_result)that);
      return false;
    }

    public boolean equals(validateCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(validateCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      validateCode_result typedOther = (validateCode_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validateCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class validateCode_resultStandardSchemeFactory implements SchemeFactory {
      public validateCode_resultStandardScheme getScheme() {
        return new validateCode_resultStandardScheme();
      }
    }

    private static class validateCode_resultStandardScheme extends StandardScheme<validateCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validateCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ValidateCodeResponse_t();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.talool.api.thrift.TServiceException_t();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validateCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validateCode_resultTupleSchemeFactory implements SchemeFactory {
      public validateCode_resultTupleScheme getScheme() {
        return new validateCode_resultTupleScheme();
      }
    }

    private static class validateCode_resultTupleScheme extends TupleScheme<validateCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validateCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validateCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ValidateCodeResponse_t();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.talool.api.thrift.TServiceException_t();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
      }
    }

  }

  public static class purchaseWithCard_args implements org.apache.thrift.TBase<purchaseWithCard_args, purchaseWithCard_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purchaseWithCard_args");

    private static final org.apache.thrift.protocol.TField DEAL_OFFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealOfferId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAYMENT_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentDetail", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAYMENT_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentProperties", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purchaseWithCard_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purchaseWithCard_argsTupleSchemeFactory());
    }

    public String dealOfferId; // required
    public com.talool.api.thrift.PaymentDetail_t paymentDetail; // required
    public Map<String,String> paymentProperties; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEAL_OFFER_ID((short)1, "dealOfferId"),
      PAYMENT_DETAIL((short)2, "paymentDetail"),
      PAYMENT_PROPERTIES((short)3, "paymentProperties");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEAL_OFFER_ID
            return DEAL_OFFER_ID;
          case 2: // PAYMENT_DETAIL
            return PAYMENT_DETAIL;
          case 3: // PAYMENT_PROPERTIES
            return PAYMENT_PROPERTIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEAL_OFFER_ID, new org.apache.thrift.meta_data.FieldMetaData("dealOfferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAYMENT_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("paymentDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.PaymentDetail_t.class)));
      tmpMap.put(_Fields.PAYMENT_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("paymentProperties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purchaseWithCard_args.class, metaDataMap);
    }

    public purchaseWithCard_args() {
    }

    public purchaseWithCard_args(
      String dealOfferId,
      com.talool.api.thrift.PaymentDetail_t paymentDetail,
      Map<String,String> paymentProperties)
    {
      this();
      this.dealOfferId = dealOfferId;
      this.paymentDetail = paymentDetail;
      this.paymentProperties = paymentProperties;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purchaseWithCard_args(purchaseWithCard_args other) {
      if (other.isSetDealOfferId()) {
        this.dealOfferId = other.dealOfferId;
      }
      if (other.isSetPaymentDetail()) {
        this.paymentDetail = new com.talool.api.thrift.PaymentDetail_t(other.paymentDetail);
      }
      if (other.isSetPaymentProperties()) {
        Map<String,String> __this__paymentProperties = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.paymentProperties.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__paymentProperties_copy_key = other_element_key;

          String __this__paymentProperties_copy_value = other_element_value;

          __this__paymentProperties.put(__this__paymentProperties_copy_key, __this__paymentProperties_copy_value);
        }
        this.paymentProperties = __this__paymentProperties;
      }
    }

    public purchaseWithCard_args deepCopy() {
      return new purchaseWithCard_args(this);
    }

    public void clear() {
      this.dealOfferId = null;
      this.paymentDetail = null;
      this.paymentProperties = null;
    }

    public String getDealOfferId() {
      return this.dealOfferId;
    }

    public purchaseWithCard_args setDealOfferId(String dealOfferId) {
      this.dealOfferId = dealOfferId;
      return this;
    }

    public void unsetDealOfferId() {
      this.dealOfferId = null;
    }

    /** Returns true if field dealOfferId is set (has been assigned a value) and false otherwise */
    public boolean isSetDealOfferId() {
      return this.dealOfferId != null;
    }

    public void setDealOfferIdIsSet(boolean value) {
      if (!value) {
        this.dealOfferId = null;
      }
    }

    public com.talool.api.thrift.PaymentDetail_t getPaymentDetail() {
      return this.paymentDetail;
    }

    public purchaseWithCard_args setPaymentDetail(com.talool.api.thrift.PaymentDetail_t paymentDetail) {
      this.paymentDetail = paymentDetail;
      return this;
    }

    public void unsetPaymentDetail() {
      this.paymentDetail = null;
    }

    /** Returns true if field paymentDetail is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentDetail() {
      return this.paymentDetail != null;
    }

    public void setPaymentDetailIsSet(boolean value) {
      if (!value) {
        this.paymentDetail = null;
      }
    }

    public int getPaymentPropertiesSize() {
      return (this.paymentProperties == null) ? 0 : this.paymentProperties.size();
    }

    public void putToPaymentProperties(String key, String val) {
      if (this.paymentProperties == null) {
        this.paymentProperties = new HashMap<String,String>();
      }
      this.paymentProperties.put(key, val);
    }

    public Map<String,String> getPaymentProperties() {
      return this.paymentProperties;
    }

    public purchaseWithCard_args setPaymentProperties(Map<String,String> paymentProperties) {
      this.paymentProperties = paymentProperties;
      return this;
    }

    public void unsetPaymentProperties() {
      this.paymentProperties = null;
    }

    /** Returns true if field paymentProperties is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentProperties() {
      return this.paymentProperties != null;
    }

    public void setPaymentPropertiesIsSet(boolean value) {
      if (!value) {
        this.paymentProperties = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEAL_OFFER_ID:
        if (value == null) {
          unsetDealOfferId();
        } else {
          setDealOfferId((String)value);
        }
        break;

      case PAYMENT_DETAIL:
        if (value == null) {
          unsetPaymentDetail();
        } else {
          setPaymentDetail((com.talool.api.thrift.PaymentDetail_t)value);
        }
        break;

      case PAYMENT_PROPERTIES:
        if (value == null) {
          unsetPaymentProperties();
        } else {
          setPaymentProperties((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEAL_OFFER_ID:
        return getDealOfferId();

      case PAYMENT_DETAIL:
        return getPaymentDetail();

      case PAYMENT_PROPERTIES:
        return getPaymentProperties();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEAL_OFFER_ID:
        return isSetDealOfferId();
      case PAYMENT_DETAIL:
        return isSetPaymentDetail();
      case PAYMENT_PROPERTIES:
        return isSetPaymentProperties();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purchaseWithCard_args)
        return this.equals((purchaseWithCard_args)that);
      return false;
    }

    public boolean equals(purchaseWithCard_args that) {
      if (that == null)
        return false;

      boolean this_present_dealOfferId = true && this.isSetDealOfferId();
      boolean that_present_dealOfferId = true && that.isSetDealOfferId();
      if (this_present_dealOfferId || that_present_dealOfferId) {
        if (!(this_present_dealOfferId && that_present_dealOfferId))
          return false;
        if (!this.dealOfferId.equals(that.dealOfferId))
          return false;
      }

      boolean this_present_paymentDetail = true && this.isSetPaymentDetail();
      boolean that_present_paymentDetail = true && that.isSetPaymentDetail();
      if (this_present_paymentDetail || that_present_paymentDetail) {
        if (!(this_present_paymentDetail && that_present_paymentDetail))
          return false;
        if (!this.paymentDetail.equals(that.paymentDetail))
          return false;
      }

      boolean this_present_paymentProperties = true && this.isSetPaymentProperties();
      boolean that_present_paymentProperties = true && that.isSetPaymentProperties();
      if (this_present_paymentProperties || that_present_paymentProperties) {
        if (!(this_present_paymentProperties && that_present_paymentProperties))
          return false;
        if (!this.paymentProperties.equals(that.paymentProperties))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(purchaseWithCard_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      purchaseWithCard_args typedOther = (purchaseWithCard_args)other;

      lastComparison = Boolean.valueOf(isSetDealOfferId()).compareTo(typedOther.isSetDealOfferId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDealOfferId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealOfferId, typedOther.dealOfferId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPaymentDetail()).compareTo(typedOther.isSetPaymentDetail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentDetail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentDetail, typedOther.paymentDetail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPaymentProperties()).compareTo(typedOther.isSetPaymentProperties());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentProperties()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentProperties, typedOther.paymentProperties);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purchaseWithCard_args(");
      boolean first = true;

      sb.append("dealOfferId:");
      if (this.dealOfferId == null) {
        sb.append("null");
      } else {
        sb.append(this.dealOfferId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paymentDetail:");
      if (this.paymentDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentDetail);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paymentProperties:");
      if (this.paymentProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentProperties);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (paymentDetail != null) {
        paymentDetail.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class purchaseWithCard_argsStandardSchemeFactory implements SchemeFactory {
      public purchaseWithCard_argsStandardScheme getScheme() {
        return new purchaseWithCard_argsStandardScheme();
      }
    }

    private static class purchaseWithCard_argsStandardScheme extends StandardScheme<purchaseWithCard_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purchaseWithCard_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEAL_OFFER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dealOfferId = iprot.readString();
                struct.setDealOfferIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAYMENT_DETAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.paymentDetail = new com.talool.api.thrift.PaymentDetail_t();
                struct.paymentDetail.read(iprot);
                struct.setPaymentDetailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAYMENT_PROPERTIES
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map104 = iprot.readMapBegin();
                  struct.paymentProperties = new HashMap<String,String>(2*_map104.size);
                  for (int _i105 = 0; _i105 < _map104.size; ++_i105)
                  {
                    String _key106; // required
                    String _val107; // required
                    _key106 = iprot.readString();
                    _val107 = iprot.readString();
                    struct.paymentProperties.put(_key106, _val107);
                  }
                  iprot.readMapEnd();
                }
                struct.setPaymentPropertiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purchaseWithCard_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dealOfferId != null) {
          oprot.writeFieldBegin(DEAL_OFFER_ID_FIELD_DESC);
          oprot.writeString(struct.dealOfferId);
          oprot.writeFieldEnd();
        }
        if (struct.paymentDetail != null) {
          oprot.writeFieldBegin(PAYMENT_DETAIL_FIELD_DESC);
          struct.paymentDetail.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.paymentProperties != null) {
          oprot.writeFieldBegin(PAYMENT_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paymentProperties.size()));
            for (Map.Entry<String, String> _iter108 : struct.paymentProperties.entrySet())
            {
              oprot.writeString(_iter108.getKey());
              oprot.writeString(_iter108.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purchaseWithCard_argsTupleSchemeFactory implements SchemeFactory {
      public purchaseWithCard_argsTupleScheme getScheme() {
        return new purchaseWithCard_argsTupleScheme();
      }
    }

    private static class purchaseWithCard_argsTupleScheme extends TupleScheme<purchaseWithCard_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purchaseWithCard_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDealOfferId()) {
          optionals.set(0);
        }
        if (struct.isSetPaymentDetail()) {
          optionals.set(1);
        }
        if (struct.isSetPaymentProperties()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDealOfferId()) {
          oprot.writeString(struct.dealOfferId);
        }
        if (struct.isSetPaymentDetail()) {
          struct.paymentDetail.write(oprot);
        }
        if (struct.isSetPaymentProperties()) {
          {
            oprot.writeI32(struct.paymentProperties.size());
            for (Map.Entry<String, String> _iter109 : struct.paymentProperties.entrySet())
            {
              oprot.writeString(_iter109.getKey());
              oprot.writeString(_iter109.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purchaseWithCard_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dealOfferId = iprot.readString();
          struct.setDealOfferIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.paymentDetail = new com.talool.api.thrift.PaymentDetail_t();
          struct.paymentDetail.read(iprot);
          struct.setPaymentDetailIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map110 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paymentProperties = new HashMap<String,String>(2*_map110.size);
            for (int _i111 = 0; _i111 < _map110.size; ++_i111)
            {
              String _key112; // required
              String _val113; // required
              _key112 = iprot.readString();
              _val113 = iprot.readString();
              struct.paymentProperties.put(_key112, _val113);
            }
          }
          struct.setPaymentPropertiesIsSet(true);
        }
      }
    }

  }

  public static class purchaseWithCard_result implements org.apache.thrift.TBase<purchaseWithCard_result, purchaseWithCard_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purchaseWithCard_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("userException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notFoundException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purchaseWithCard_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purchaseWithCard_resultTupleSchemeFactory());
    }

    public com.talool.api.thrift.TransactionResult_t success; // required
    public com.talool.api.thrift.TServiceException_t serviceException; // required
    public com.talool.api.thrift.TUserException_t userException; // required
    public com.talool.api.thrift.TNotFoundException_t notFoundException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SERVICE_EXCEPTION((short)1, "serviceException"),
      USER_EXCEPTION((short)2, "userException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SERVICE_EXCEPTION
            return SERVICE_EXCEPTION;
          case 2: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.TransactionResult_t.class)));
      tmpMap.put(_Fields.SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("serviceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.USER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("userException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("notFoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purchaseWithCard_result.class, metaDataMap);
    }

    public purchaseWithCard_result() {
    }

    public purchaseWithCard_result(
      com.talool.api.thrift.TransactionResult_t success,
      com.talool.api.thrift.TServiceException_t serviceException,
      com.talool.api.thrift.TUserException_t userException,
      com.talool.api.thrift.TNotFoundException_t notFoundException)
    {
      this();
      this.success = success;
      this.serviceException = serviceException;
      this.userException = userException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purchaseWithCard_result(purchaseWithCard_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.talool.api.thrift.TransactionResult_t(other.success);
      }
      if (other.isSetServiceException()) {
        this.serviceException = new com.talool.api.thrift.TServiceException_t(other.serviceException);
      }
      if (other.isSetUserException()) {
        this.userException = new com.talool.api.thrift.TUserException_t(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.talool.api.thrift.TNotFoundException_t(other.notFoundException);
      }
    }

    public purchaseWithCard_result deepCopy() {
      return new purchaseWithCard_result(this);
    }

    public void clear() {
      this.success = null;
      this.serviceException = null;
      this.userException = null;
      this.notFoundException = null;
    }

    public com.talool.api.thrift.TransactionResult_t getSuccess() {
      return this.success;
    }

    public purchaseWithCard_result setSuccess(com.talool.api.thrift.TransactionResult_t success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.TServiceException_t getServiceException() {
      return this.serviceException;
    }

    public purchaseWithCard_result setServiceException(com.talool.api.thrift.TServiceException_t serviceException) {
      this.serviceException = serviceException;
      return this;
    }

    public void unsetServiceException() {
      this.serviceException = null;
    }

    /** Returns true if field serviceException is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceException() {
      return this.serviceException != null;
    }

    public void setServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.serviceException = null;
      }
    }

    public com.talool.api.thrift.TUserException_t getUserException() {
      return this.userException;
    }

    public purchaseWithCard_result setUserException(com.talool.api.thrift.TUserException_t userException) {
      this.userException = userException;
      return this;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been assigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.talool.api.thrift.TNotFoundException_t getNotFoundException() {
      return this.notFoundException;
    }

    public purchaseWithCard_result setNotFoundException(com.talool.api.thrift.TNotFoundException_t notFoundException) {
      this.notFoundException = notFoundException;
      return this;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.talool.api.thrift.TransactionResult_t)value);
        }
        break;

      case SERVICE_EXCEPTION:
        if (value == null) {
          unsetServiceException();
        } else {
          setServiceException((com.talool.api.thrift.TServiceException_t)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.talool.api.thrift.TUserException_t)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.talool.api.thrift.TNotFoundException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SERVICE_EXCEPTION:
        return getServiceException();

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SERVICE_EXCEPTION:
        return isSetServiceException();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purchaseWithCard_result)
        return this.equals((purchaseWithCard_result)that);
      return false;
    }

    public boolean equals(purchaseWithCard_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_serviceException = true && this.isSetServiceException();
      boolean that_present_serviceException = true && that.isSetServiceException();
      if (this_present_serviceException || that_present_serviceException) {
        if (!(this_present_serviceException && that_present_serviceException))
          return false;
        if (!this.serviceException.equals(that.serviceException))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(purchaseWithCard_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      purchaseWithCard_result typedOther = (purchaseWithCard_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceException()).compareTo(typedOther.isSetServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceException, typedOther.serviceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purchaseWithCard_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceException:");
      if (this.serviceException == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class purchaseWithCard_resultStandardSchemeFactory implements SchemeFactory {
      public purchaseWithCard_resultStandardScheme getScheme() {
        return new purchaseWithCard_resultStandardScheme();
      }
    }

    private static class purchaseWithCard_resultStandardScheme extends StandardScheme<purchaseWithCard_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purchaseWithCard_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.talool.api.thrift.TransactionResult_t();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serviceException = new com.talool.api.thrift.TServiceException_t();
                struct.serviceException.read(iprot);
                struct.setServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userException = new com.talool.api.thrift.TUserException_t();
                struct.userException.read(iprot);
                struct.setUserExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOT_FOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFoundException = new com.talool.api.thrift.TNotFoundException_t();
                struct.notFoundException.read(iprot);
                struct.setNotFoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purchaseWithCard_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.serviceException != null) {
          oprot.writeFieldBegin(SERVICE_EXCEPTION_FIELD_DESC);
          struct.serviceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userException != null) {
          oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
          struct.userException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFoundException != null) {
          oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
          struct.notFoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purchaseWithCard_resultTupleSchemeFactory implements SchemeFactory {
      public purchaseWithCard_resultTupleScheme getScheme() {
        return new purchaseWithCard_resultTupleScheme();
      }
    }

    private static class purchaseWithCard_resultTupleScheme extends TupleScheme<purchaseWithCard_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purchaseWithCard_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetUserException()) {
          optionals.set(2);
        }
        if (struct.isSetNotFoundException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetServiceException()) {
          struct.serviceException.write(oprot);
        }
        if (struct.isSetUserException()) {
          struct.userException.write(oprot);
        }
        if (struct.isSetNotFoundException()) {
          struct.notFoundException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purchaseWithCard_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new com.talool.api.thrift.TransactionResult_t();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serviceException = new com.talool.api.thrift.TServiceException_t();
          struct.serviceException.read(iprot);
          struct.setServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userException = new com.talool.api.thrift.TUserException_t();
          struct.userException.read(iprot);
          struct.setUserExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.notFoundException = new com.talool.api.thrift.TNotFoundException_t();
          struct.notFoundException.read(iprot);
          struct.setNotFoundExceptionIsSet(true);
        }
      }
    }

  }

  public static class purchaseWithCode_args implements org.apache.thrift.TBase<purchaseWithCode_args, purchaseWithCode_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purchaseWithCode_args");

    private static final org.apache.thrift.protocol.TField DEAL_OFFER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dealOfferId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAYMENT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAYMENT_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentProperties", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purchaseWithCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purchaseWithCode_argsTupleSchemeFactory());
    }

    public String dealOfferId; // required
    public String paymentCode; // required
    public Map<String,String> paymentProperties; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEAL_OFFER_ID((short)1, "dealOfferId"),
      PAYMENT_CODE((short)2, "paymentCode"),
      PAYMENT_PROPERTIES((short)3, "paymentProperties");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEAL_OFFER_ID
            return DEAL_OFFER_ID;
          case 2: // PAYMENT_CODE
            return PAYMENT_CODE;
          case 3: // PAYMENT_PROPERTIES
            return PAYMENT_PROPERTIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEAL_OFFER_ID, new org.apache.thrift.meta_data.FieldMetaData("dealOfferId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAYMENT_CODE, new org.apache.thrift.meta_data.FieldMetaData("paymentCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAYMENT_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("paymentProperties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purchaseWithCode_args.class, metaDataMap);
    }

    public purchaseWithCode_args() {
    }

    public purchaseWithCode_args(
      String dealOfferId,
      String paymentCode,
      Map<String,String> paymentProperties)
    {
      this();
      this.dealOfferId = dealOfferId;
      this.paymentCode = paymentCode;
      this.paymentProperties = paymentProperties;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purchaseWithCode_args(purchaseWithCode_args other) {
      if (other.isSetDealOfferId()) {
        this.dealOfferId = other.dealOfferId;
      }
      if (other.isSetPaymentCode()) {
        this.paymentCode = other.paymentCode;
      }
      if (other.isSetPaymentProperties()) {
        Map<String,String> __this__paymentProperties = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.paymentProperties.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__paymentProperties_copy_key = other_element_key;

          String __this__paymentProperties_copy_value = other_element_value;

          __this__paymentProperties.put(__this__paymentProperties_copy_key, __this__paymentProperties_copy_value);
        }
        this.paymentProperties = __this__paymentProperties;
      }
    }

    public purchaseWithCode_args deepCopy() {
      return new purchaseWithCode_args(this);
    }

    public void clear() {
      this.dealOfferId = null;
      this.paymentCode = null;
      this.paymentProperties = null;
    }

    public String getDealOfferId() {
      return this.dealOfferId;
    }

    public purchaseWithCode_args setDealOfferId(String dealOfferId) {
      this.dealOfferId = dealOfferId;
      return this;
    }

    public void unsetDealOfferId() {
      this.dealOfferId = null;
    }

    /** Returns true if field dealOfferId is set (has been assigned a value) and false otherwise */
    public boolean isSetDealOfferId() {
      return this.dealOfferId != null;
    }

    public void setDealOfferIdIsSet(boolean value) {
      if (!value) {
        this.dealOfferId = null;
      }
    }

    public String getPaymentCode() {
      return this.paymentCode;
    }

    public purchaseWithCode_args setPaymentCode(String paymentCode) {
      this.paymentCode = paymentCode;
      return this;
    }

    public void unsetPaymentCode() {
      this.paymentCode = null;
    }

    /** Returns true if field paymentCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentCode() {
      return this.paymentCode != null;
    }

    public void setPaymentCodeIsSet(boolean value) {
      if (!value) {
        this.paymentCode = null;
      }
    }

    public int getPaymentPropertiesSize() {
      return (this.paymentProperties == null) ? 0 : this.paymentProperties.size();
    }

    public void putToPaymentProperties(String key, String val) {
      if (this.paymentProperties == null) {
        this.paymentProperties = new HashMap<String,String>();
      }
      this.paymentProperties.put(key, val);
    }

    public Map<String,String> getPaymentProperties() {
      return this.paymentProperties;
    }

    public purchaseWithCode_args setPaymentProperties(Map<String,String> paymentProperties) {
      this.paymentProperties = paymentProperties;
      return this;
    }

    public void unsetPaymentProperties() {
      this.paymentProperties = null;
    }

    /** Returns true if field paymentProperties is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentProperties() {
      return this.paymentProperties != null;
    }

    public void setPaymentPropertiesIsSet(boolean value) {
      if (!value) {
        this.paymentProperties = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEAL_OFFER_ID:
        if (value == null) {
          unsetDealOfferId();
        } else {
          setDealOfferId((String)value);
        }
        break;

      case PAYMENT_CODE:
        if (value == null) {
          unsetPaymentCode();
        } else {
          setPaymentCode((String)value);
        }
        break;

      case PAYMENT_PROPERTIES:
        if (value == null) {
          unsetPaymentProperties();
        } else {
          setPaymentProperties((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEAL_OFFER_ID:
        return getDealOfferId();

      case PAYMENT_CODE:
        return getPaymentCode();

      case PAYMENT_PROPERTIES:
        return getPaymentProperties();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEAL_OFFER_ID:
        return isSetDealOfferId();
      case PAYMENT_CODE:
        return isSetPaymentCode();
      case PAYMENT_PROPERTIES:
        return isSetPaymentProperties();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purchaseWithCode_args)
        return this.equals((purchaseWithCode_args)that);
      return false;
    }

    public boolean equals(purchaseWithCode_args that) {
      if (that == null)
        return false;

      boolean this_present_dealOfferId = true && this.isSetDealOfferId();
      boolean that_present_dealOfferId = true && that.isSetDealOfferId();
      if (this_present_dealOfferId || that_present_dealOfferId) {
        if (!(this_present_dealOfferId && that_present_dealOfferId))
          return false;
        if (!this.dealOfferId.equals(that.dealOfferId))
          return false;
      }

      boolean this_present_paymentCode = true && this.isSetPaymentCode();
      boolean that_present_paymentCode = true && that.isSetPaymentCode();
      if (this_present_paymentCode || that_present_paymentCode) {
        if (!(this_present_paymentCode && that_present_paymentCode))
          return false;
        if (!this.paymentCode.equals(that.paymentCode))
          return false;
      }

      boolean this_present_paymentProperties = true && this.isSetPaymentProperties();
      boolean that_present_paymentProperties = true && that.isSetPaymentProperties();
      if (this_present_paymentProperties || that_present_paymentProperties) {
        if (!(this_present_paymentProperties && that_present_paymentProperties))
          return false;
        if (!this.paymentProperties.equals(that.paymentProperties))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(purchaseWithCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      purchaseWithCode_args typedOther = (purchaseWithCode_args)other;

      lastComparison = Boolean.valueOf(isSetDealOfferId()).compareTo(typedOther.isSetDealOfferId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDealOfferId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealOfferId, typedOther.dealOfferId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPaymentCode()).compareTo(typedOther.isSetPaymentCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentCode, typedOther.paymentCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPaymentProperties()).compareTo(typedOther.isSetPaymentProperties());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentProperties()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentProperties, typedOther.paymentProperties);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purchaseWithCode_args(");
      boolean first = true;

      sb.append("dealOfferId:");
      if (this.dealOfferId == null) {
        sb.append("null");
      } else {
        sb.append(this.dealOfferId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paymentCode:");
      if (this.paymentCode == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paymentProperties:");
      if (this.paymentProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentProperties);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class purchaseWithCode_argsStandardSchemeFactory implements SchemeFactory {
      public purchaseWithCode_argsStandardScheme getScheme() {
        return new purchaseWithCode_argsStandardScheme();
      }
    }

    private static class purchaseWithCode_argsStandardScheme extends StandardScheme<purchaseWithCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purchaseWithCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEAL_OFFER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dealOfferId = iprot.readString();
                struct.setDealOfferIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAYMENT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentCode = iprot.readString();
                struct.setPaymentCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAYMENT_PROPERTIES
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map114 = iprot.readMapBegin();
                  struct.paymentProperties = new HashMap<String,String>(2*_map114.size);
                  for (int _i115 = 0; _i115 < _map114.size; ++_i115)
                  {
                    String _key116; // required
                    String _val117; // required
                    _key116 = iprot.readString();
                    _val117 = iprot.readString();
                    struct.paymentProperties.put(_key116, _val117);
                  }
                  iprot.readMapEnd();
                }
                struct.setPaymentPropertiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purchaseWithCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dealOfferId != null) {
          oprot.writeFieldBegin(DEAL_OFFER_ID_FIELD_DESC);
          oprot.writeString(struct.dealOfferId);
          oprot.writeFieldEnd();
        }
        if (struct.paymentCode != null) {
          oprot.writeFieldBegin(PAYMENT_CODE_FIELD_DESC);
          oprot.writeString(struct.paymentCode);
          oprot.writeFieldEnd();
        }
        if (struct.paymentProperties != null) {
          oprot.writeFieldBegin(PAYMENT_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paymentProperties.size()));
            for (Map.Entry<String, String> _iter118 : struct.paymentProperties.entrySet())
            {
              oprot.writeString(_iter118.getKey());
              oprot.writeString(_iter118.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purchaseWithCode_argsTupleSchemeFactory implements SchemeFactory {
      public purchaseWithCode_argsTupleScheme getScheme() {
        return new purchaseWithCode_argsTupleScheme();
      }
    }

    private static class purchaseWithCode_argsTupleScheme extends TupleScheme<purchaseWithCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purchaseWithCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDealOfferId()) {
          optionals.set(0);
        }
        if (struct.isSetPaymentCode()) {
          optionals.set(1);
        }
        if (struct.isSetPaymentProperties()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDealOfferId()) {
          oprot.writeString(struct.dealOfferId);
        }
        if (struct.isSetPaymentCode()) {
          oprot.writeString(struct.paymentCode);
        }
        if (struct.isSetPaymentProperties()) {
          {
            oprot.writeI32(struct.paymentProperties.size());
            for (Map.Entry<String, String> _iter119 : struct.paymentProperties.entrySet())
            {
              oprot.writeString(_iter119.getKey());
              oprot.writeString(_iter119.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purchaseWithCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dealOfferId = iprot.readString();
          struct.setDealOfferIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.paymentCode = iprot.readString();
          struct.setPaymentCodeIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map120 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paymentProperties = new HashMap<String,String>(2*_map120.size);
            for (int _i121 = 0; _i121 < _map120.size; ++_i121)
            {
              String _key122; // required
              String _val123; // required
              _key122 = iprot.readString();
              _val123 = iprot.readString();
              struct.paymentProperties.put(_key122, _val123);
            }
          }
          struct.setPaymentPropertiesIsSet(true);
        }
      }
    }

  }

  public static class purchaseWithCode_result implements org.apache.thrift.TBase<purchaseWithCode_result, purchaseWithCode_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("purchaseWithCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("userException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notFoundException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new purchaseWithCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new purchaseWithCode_resultTupleSchemeFactory());
    }

    public com.talool.api.thrift.TransactionResult_t success; // required
    public com.talool.api.thrift.TServiceException_t serviceException; // required
    public com.talool.api.thrift.TUserException_t userException; // required
    public com.talool.api.thrift.TNotFoundException_t notFoundException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SERVICE_EXCEPTION((short)1, "serviceException"),
      USER_EXCEPTION((short)2, "userException"),
      NOT_FOUND_EXCEPTION((short)3, "notFoundException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SERVICE_EXCEPTION
            return SERVICE_EXCEPTION;
          case 2: // USER_EXCEPTION
            return USER_EXCEPTION;
          case 3: // NOT_FOUND_EXCEPTION
            return NOT_FOUND_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.talool.api.thrift.TransactionResult_t.class)));
      tmpMap.put(_Fields.SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("serviceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.USER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("userException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("notFoundException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(purchaseWithCode_result.class, metaDataMap);
    }

    public purchaseWithCode_result() {
    }

    public purchaseWithCode_result(
      com.talool.api.thrift.TransactionResult_t success,
      com.talool.api.thrift.TServiceException_t serviceException,
      com.talool.api.thrift.TUserException_t userException,
      com.talool.api.thrift.TNotFoundException_t notFoundException)
    {
      this();
      this.success = success;
      this.serviceException = serviceException;
      this.userException = userException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public purchaseWithCode_result(purchaseWithCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.talool.api.thrift.TransactionResult_t(other.success);
      }
      if (other.isSetServiceException()) {
        this.serviceException = new com.talool.api.thrift.TServiceException_t(other.serviceException);
      }
      if (other.isSetUserException()) {
        this.userException = new com.talool.api.thrift.TUserException_t(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.talool.api.thrift.TNotFoundException_t(other.notFoundException);
      }
    }

    public purchaseWithCode_result deepCopy() {
      return new purchaseWithCode_result(this);
    }

    public void clear() {
      this.success = null;
      this.serviceException = null;
      this.userException = null;
      this.notFoundException = null;
    }

    public com.talool.api.thrift.TransactionResult_t getSuccess() {
      return this.success;
    }

    public purchaseWithCode_result setSuccess(com.talool.api.thrift.TransactionResult_t success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.talool.api.thrift.TServiceException_t getServiceException() {
      return this.serviceException;
    }

    public purchaseWithCode_result setServiceException(com.talool.api.thrift.TServiceException_t serviceException) {
      this.serviceException = serviceException;
      return this;
    }

    public void unsetServiceException() {
      this.serviceException = null;
    }

    /** Returns true if field serviceException is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceException() {
      return this.serviceException != null;
    }

    public void setServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.serviceException = null;
      }
    }

    public com.talool.api.thrift.TUserException_t getUserException() {
      return this.userException;
    }

    public purchaseWithCode_result setUserException(com.talool.api.thrift.TUserException_t userException) {
      this.userException = userException;
      return this;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been assigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.talool.api.thrift.TNotFoundException_t getNotFoundException() {
      return this.notFoundException;
    }

    public purchaseWithCode_result setNotFoundException(com.talool.api.thrift.TNotFoundException_t notFoundException) {
      this.notFoundException = notFoundException;
      return this;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.talool.api.thrift.TransactionResult_t)value);
        }
        break;

      case SERVICE_EXCEPTION:
        if (value == null) {
          unsetServiceException();
        } else {
          setServiceException((com.talool.api.thrift.TServiceException_t)value);
        }
        break;

      case USER_EXCEPTION:
        if (value == null) {
          unsetUserException();
        } else {
          setUserException((com.talool.api.thrift.TUserException_t)value);
        }
        break;

      case NOT_FOUND_EXCEPTION:
        if (value == null) {
          unsetNotFoundException();
        } else {
          setNotFoundException((com.talool.api.thrift.TNotFoundException_t)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SERVICE_EXCEPTION:
        return getServiceException();

      case USER_EXCEPTION:
        return getUserException();

      case NOT_FOUND_EXCEPTION:
        return getNotFoundException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SERVICE_EXCEPTION:
        return isSetServiceException();
      case USER_EXCEPTION:
        return isSetUserException();
      case NOT_FOUND_EXCEPTION:
        return isSetNotFoundException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof purchaseWithCode_result)
        return this.equals((purchaseWithCode_result)that);
      return false;
    }

    public boolean equals(purchaseWithCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_serviceException = true && this.isSetServiceException();
      boolean that_present_serviceException = true && that.isSetServiceException();
      if (this_present_serviceException || that_present_serviceException) {
        if (!(this_present_serviceException && that_present_serviceException))
          return false;
        if (!this.serviceException.equals(that.serviceException))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(purchaseWithCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      purchaseWithCode_result typedOther = (purchaseWithCode_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceException()).compareTo(typedOther.isSetServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceException, typedOther.serviceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userException, typedOther.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("purchaseWithCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceException:");
      if (this.serviceException == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private static class purchaseWithCode_resultStandardSchemeFactory implements SchemeFactory {
      public purchaseWithCode_resultStandardScheme getScheme() {
        return new purchaseWithCode_resultStandardScheme();
      }
    }

    private static class purchaseWithCode_resultStandardScheme extends StandardScheme<purchaseWithCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, purchaseWithCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.talool.api.thrift.TransactionResult_t();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serviceException = new com.talool.api.thrift.TServiceException_t();
                struct.serviceException.read(iprot);
                struct.setServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userException = new com.talool.api.thrift.TUserException_t();
                struct.userException.read(iprot);
                struct.setUserExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOT_FOUND_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFoundException = new com.talool.api.thrift.TNotFoundException_t();
                struct.notFoundException.read(iprot);
                struct.setNotFoundExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, purchaseWithCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.serviceException != null) {
          oprot.writeFieldBegin(SERVICE_EXCEPTION_FIELD_DESC);
          struct.serviceException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.userException != null) {
          oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
          struct.userException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFoundException != null) {
          oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
          struct.notFoundException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class purchaseWithCode_resultTupleSchemeFactory implements SchemeFactory {
      public purchaseWithCode_resultTupleScheme getScheme() {
        return new purchaseWithCode_resultTupleScheme();
      }
    }

    private static class purchaseWithCode_resultTupleScheme extends TupleScheme<purchaseWithCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, purchaseWithCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetServiceException()) {
          optionals.set(1);
        }
        if (struct.isSetUserException()) {
          optionals.set(2);
        }
        if (struct.isSetNotFoundException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetServiceException()) {
          struct.serviceException.write(oprot);
        }
        if (struct.isSetUserException()) {
          struct.userException.write(oprot);
        }
        if (struct.isSetNotFoundException()) {
          struct.notFoundException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, purchaseWithCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new com.talool.api.thrift.TransactionResult_t();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serviceException = new com.talool.api.thrift.TServiceException_t();
          struct.serviceException.read(iprot);
          struct.setServiceExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userException = new com.talool.api.thrift.TUserException_t();
          struct.userException.read(iprot);
          struct.setUserExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.notFoundException = new com.talool.api.thrift.TNotFoundException_t();
          struct.notFoundException.read(iprot);
          struct.setNotFoundExceptionIsSet(true);
        }
      }
    }

  }

}
