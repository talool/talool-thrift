/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.talool.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ActivityLink_t implements org.apache.thrift.TBase<ActivityLink_t, ActivityLink_t._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActivityLink_t");

  private static final org.apache.thrift.protocol.TField LINK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("linkType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LINK_ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("linkElement", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActivityLink_tStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActivityLink_tTupleSchemeFactory());
  }

  /**
   * 
   * @see LinkType
   */
  public LinkType linkType; // required
  public String linkElement; // required
  public Map<String,String> properties; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see LinkType
     */
    LINK_TYPE((short)1, "linkType"),
    LINK_ELEMENT((short)2, "linkElement"),
    PROPERTIES((short)3, "properties");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LINK_TYPE
          return LINK_TYPE;
        case 2: // LINK_ELEMENT
          return LINK_ELEMENT;
        case 3: // PROPERTIES
          return PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.PROPERTIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LINK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("linkType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LinkType.class)));
    tmpMap.put(_Fields.LINK_ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("linkElement", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActivityLink_t.class, metaDataMap);
  }

  public ActivityLink_t() {
  }

  public ActivityLink_t(
    LinkType linkType,
    String linkElement)
  {
    this();
    this.linkType = linkType;
    this.linkElement = linkElement;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActivityLink_t(ActivityLink_t other) {
    if (other.isSetLinkType()) {
      this.linkType = other.linkType;
    }
    if (other.isSetLinkElement()) {
      this.linkElement = other.linkElement;
    }
    if (other.isSetProperties()) {
      Map<String,String> __this__properties = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.properties.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__properties_copy_key = other_element_key;

        String __this__properties_copy_value = other_element_value;

        __this__properties.put(__this__properties_copy_key, __this__properties_copy_value);
      }
      this.properties = __this__properties;
    }
  }

  public ActivityLink_t deepCopy() {
    return new ActivityLink_t(this);
  }

  public void clear() {
    this.linkType = null;
    this.linkElement = null;
    this.properties = null;
  }

  /**
   * 
   * @see LinkType
   */
  public LinkType getLinkType() {
    return this.linkType;
  }

  /**
   * 
   * @see LinkType
   */
  public ActivityLink_t setLinkType(LinkType linkType) {
    this.linkType = linkType;
    return this;
  }

  public void unsetLinkType() {
    this.linkType = null;
  }

  /** Returns true if field linkType is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkType() {
    return this.linkType != null;
  }

  public void setLinkTypeIsSet(boolean value) {
    if (!value) {
      this.linkType = null;
    }
  }

  public String getLinkElement() {
    return this.linkElement;
  }

  public ActivityLink_t setLinkElement(String linkElement) {
    this.linkElement = linkElement;
    return this;
  }

  public void unsetLinkElement() {
    this.linkElement = null;
  }

  /** Returns true if field linkElement is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkElement() {
    return this.linkElement != null;
  }

  public void setLinkElementIsSet(boolean value) {
    if (!value) {
      this.linkElement = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(String key, String val) {
    if (this.properties == null) {
      this.properties = new HashMap<String,String>();
    }
    this.properties.put(key, val);
  }

  public Map<String,String> getProperties() {
    return this.properties;
  }

  public ActivityLink_t setProperties(Map<String,String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LINK_TYPE:
      if (value == null) {
        unsetLinkType();
      } else {
        setLinkType((LinkType)value);
      }
      break;

    case LINK_ELEMENT:
      if (value == null) {
        unsetLinkElement();
      } else {
        setLinkElement((String)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LINK_TYPE:
      return getLinkType();

    case LINK_ELEMENT:
      return getLinkElement();

    case PROPERTIES:
      return getProperties();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LINK_TYPE:
      return isSetLinkType();
    case LINK_ELEMENT:
      return isSetLinkElement();
    case PROPERTIES:
      return isSetProperties();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActivityLink_t)
      return this.equals((ActivityLink_t)that);
    return false;
  }

  public boolean equals(ActivityLink_t that) {
    if (that == null)
      return false;

    boolean this_present_linkType = true && this.isSetLinkType();
    boolean that_present_linkType = true && that.isSetLinkType();
    if (this_present_linkType || that_present_linkType) {
      if (!(this_present_linkType && that_present_linkType))
        return false;
      if (!this.linkType.equals(that.linkType))
        return false;
    }

    boolean this_present_linkElement = true && this.isSetLinkElement();
    boolean that_present_linkElement = true && that.isSetLinkElement();
    if (this_present_linkElement || that_present_linkElement) {
      if (!(this_present_linkElement && that_present_linkElement))
        return false;
      if (!this.linkElement.equals(that.linkElement))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ActivityLink_t other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ActivityLink_t typedOther = (ActivityLink_t)other;

    lastComparison = Boolean.valueOf(isSetLinkType()).compareTo(typedOther.isSetLinkType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkType, typedOther.linkType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinkElement()).compareTo(typedOther.isSetLinkElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkElement, typedOther.linkElement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(typedOther.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, typedOther.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActivityLink_t(");
    boolean first = true;

    sb.append("linkType:");
    if (this.linkType == null) {
      sb.append("null");
    } else {
      sb.append(this.linkType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("linkElement:");
    if (this.linkElement == null) {
      sb.append("null");
    } else {
      sb.append(this.linkElement);
    }
    first = false;
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (linkType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'linkType' was not present! Struct: " + toString());
    }
    if (linkElement == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'linkElement' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class ActivityLink_tStandardSchemeFactory implements SchemeFactory {
    public ActivityLink_tStandardScheme getScheme() {
      return new ActivityLink_tStandardScheme();
    }
  }

  private static class ActivityLink_tStandardScheme extends StandardScheme<ActivityLink_t> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActivityLink_t struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LINK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.linkType = LinkType.findByValue(iprot.readI32());
              struct.setLinkTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LINK_ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkElement = iprot.readString();
              struct.setLinkElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.properties = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  String _val3; // required
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.properties.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActivityLink_t struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.linkType != null) {
        oprot.writeFieldBegin(LINK_TYPE_FIELD_DESC);
        oprot.writeI32(struct.linkType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.linkElement != null) {
        oprot.writeFieldBegin(LINK_ELEMENT_FIELD_DESC);
        oprot.writeString(struct.linkElement);
        oprot.writeFieldEnd();
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (Map.Entry<String, String> _iter4 : struct.properties.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActivityLink_tTupleSchemeFactory implements SchemeFactory {
    public ActivityLink_tTupleScheme getScheme() {
      return new ActivityLink_tTupleScheme();
    }
  }

  private static class ActivityLink_tTupleScheme extends TupleScheme<ActivityLink_t> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActivityLink_t struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.linkType.getValue());
      oprot.writeString(struct.linkElement);
      BitSet optionals = new BitSet();
      if (struct.isSetProperties()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (Map.Entry<String, String> _iter5 : struct.properties.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActivityLink_t struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.linkType = LinkType.findByValue(iprot.readI32());
      struct.setLinkTypeIsSet(true);
      struct.linkElement = iprot.readString();
      struct.setLinkElementIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.properties = new HashMap<String,String>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            String _key8; // required
            String _val9; // required
            _key8 = iprot.readString();
            _val9 = iprot.readString();
            struct.properties.put(_key8, _val9);
          }
        }
        struct.setPropertiesIsSet(true);
      }
    }
  }

}

