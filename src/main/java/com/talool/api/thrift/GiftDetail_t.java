/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.talool.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GiftDetail_t implements org.apache.thrift.TBase<GiftDetail_t, GiftDetail_t._Fields>, java.io.Serializable, Cloneable, Comparable<GiftDetail_t> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GiftDetail_t");

  private static final org.apache.thrift.protocol.TField GIFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("giftId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GIFTED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("giftedTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField FROM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fromName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FROM_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("fromEmail", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TO_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("toName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TO_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("toEmail", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GiftDetail_tStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GiftDetail_tTupleSchemeFactory());
  }

  public String giftId; // required
  public long giftedTime; // required
  public String fromName; // optional
  public String fromEmail; // optional
  public String toName; // optional
  public String toEmail; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GIFT_ID((short)1, "giftId"),
    GIFTED_TIME((short)2, "giftedTime"),
    FROM_NAME((short)3, "fromName"),
    FROM_EMAIL((short)4, "fromEmail"),
    TO_NAME((short)5, "toName"),
    TO_EMAIL((short)6, "toEmail");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GIFT_ID
          return GIFT_ID;
        case 2: // GIFTED_TIME
          return GIFTED_TIME;
        case 3: // FROM_NAME
          return FROM_NAME;
        case 4: // FROM_EMAIL
          return FROM_EMAIL;
        case 5: // TO_NAME
          return TO_NAME;
        case 6: // TO_EMAIL
          return TO_EMAIL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GIFTEDTIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.FROM_NAME,_Fields.FROM_EMAIL,_Fields.TO_NAME,_Fields.TO_EMAIL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GIFT_ID, new org.apache.thrift.meta_data.FieldMetaData("giftId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GIFTED_TIME, new org.apache.thrift.meta_data.FieldMetaData("giftedTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.FROM_NAME, new org.apache.thrift.meta_data.FieldMetaData("fromName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("fromEmail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_NAME, new org.apache.thrift.meta_data.FieldMetaData("toName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("toEmail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GiftDetail_t.class, metaDataMap);
  }

  public GiftDetail_t() {
  }

  public GiftDetail_t(
    String giftId,
    long giftedTime)
  {
    this();
    this.giftId = giftId;
    this.giftedTime = giftedTime;
    setGiftedTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GiftDetail_t(GiftDetail_t other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGiftId()) {
      this.giftId = other.giftId;
    }
    this.giftedTime = other.giftedTime;
    if (other.isSetFromName()) {
      this.fromName = other.fromName;
    }
    if (other.isSetFromEmail()) {
      this.fromEmail = other.fromEmail;
    }
    if (other.isSetToName()) {
      this.toName = other.toName;
    }
    if (other.isSetToEmail()) {
      this.toEmail = other.toEmail;
    }
  }

  public GiftDetail_t deepCopy() {
    return new GiftDetail_t(this);
  }

  public void clear() {
    this.giftId = null;
    setGiftedTimeIsSet(false);
    this.giftedTime = 0;
    this.fromName = null;
    this.fromEmail = null;
    this.toName = null;
    this.toEmail = null;
  }

  public String getGiftId() {
    return this.giftId;
  }

  public GiftDetail_t setGiftId(String giftId) {
    this.giftId = giftId;
    return this;
  }

  public void unsetGiftId() {
    this.giftId = null;
  }

  /** Returns true if field giftId is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftId() {
    return this.giftId != null;
  }

  public void setGiftIdIsSet(boolean value) {
    if (!value) {
      this.giftId = null;
    }
  }

  public long getGiftedTime() {
    return this.giftedTime;
  }

  public GiftDetail_t setGiftedTime(long giftedTime) {
    this.giftedTime = giftedTime;
    setGiftedTimeIsSet(true);
    return this;
  }

  public void unsetGiftedTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFTEDTIME_ISSET_ID);
  }

  /** Returns true if field giftedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftedTime() {
    return EncodingUtils.testBit(__isset_bitfield, __GIFTEDTIME_ISSET_ID);
  }

  public void setGiftedTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFTEDTIME_ISSET_ID, value);
  }

  public String getFromName() {
    return this.fromName;
  }

  public GiftDetail_t setFromName(String fromName) {
    this.fromName = fromName;
    return this;
  }

  public void unsetFromName() {
    this.fromName = null;
  }

  /** Returns true if field fromName is set (has been assigned a value) and false otherwise */
  public boolean isSetFromName() {
    return this.fromName != null;
  }

  public void setFromNameIsSet(boolean value) {
    if (!value) {
      this.fromName = null;
    }
  }

  public String getFromEmail() {
    return this.fromEmail;
  }

  public GiftDetail_t setFromEmail(String fromEmail) {
    this.fromEmail = fromEmail;
    return this;
  }

  public void unsetFromEmail() {
    this.fromEmail = null;
  }

  /** Returns true if field fromEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetFromEmail() {
    return this.fromEmail != null;
  }

  public void setFromEmailIsSet(boolean value) {
    if (!value) {
      this.fromEmail = null;
    }
  }

  public String getToName() {
    return this.toName;
  }

  public GiftDetail_t setToName(String toName) {
    this.toName = toName;
    return this;
  }

  public void unsetToName() {
    this.toName = null;
  }

  /** Returns true if field toName is set (has been assigned a value) and false otherwise */
  public boolean isSetToName() {
    return this.toName != null;
  }

  public void setToNameIsSet(boolean value) {
    if (!value) {
      this.toName = null;
    }
  }

  public String getToEmail() {
    return this.toEmail;
  }

  public GiftDetail_t setToEmail(String toEmail) {
    this.toEmail = toEmail;
    return this;
  }

  public void unsetToEmail() {
    this.toEmail = null;
  }

  /** Returns true if field toEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetToEmail() {
    return this.toEmail != null;
  }

  public void setToEmailIsSet(boolean value) {
    if (!value) {
      this.toEmail = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GIFT_ID:
      if (value == null) {
        unsetGiftId();
      } else {
        setGiftId((String)value);
      }
      break;

    case GIFTED_TIME:
      if (value == null) {
        unsetGiftedTime();
      } else {
        setGiftedTime((Long)value);
      }
      break;

    case FROM_NAME:
      if (value == null) {
        unsetFromName();
      } else {
        setFromName((String)value);
      }
      break;

    case FROM_EMAIL:
      if (value == null) {
        unsetFromEmail();
      } else {
        setFromEmail((String)value);
      }
      break;

    case TO_NAME:
      if (value == null) {
        unsetToName();
      } else {
        setToName((String)value);
      }
      break;

    case TO_EMAIL:
      if (value == null) {
        unsetToEmail();
      } else {
        setToEmail((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GIFT_ID:
      return getGiftId();

    case GIFTED_TIME:
      return Long.valueOf(getGiftedTime());

    case FROM_NAME:
      return getFromName();

    case FROM_EMAIL:
      return getFromEmail();

    case TO_NAME:
      return getToName();

    case TO_EMAIL:
      return getToEmail();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GIFT_ID:
      return isSetGiftId();
    case GIFTED_TIME:
      return isSetGiftedTime();
    case FROM_NAME:
      return isSetFromName();
    case FROM_EMAIL:
      return isSetFromEmail();
    case TO_NAME:
      return isSetToName();
    case TO_EMAIL:
      return isSetToEmail();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GiftDetail_t)
      return this.equals((GiftDetail_t)that);
    return false;
  }

  public boolean equals(GiftDetail_t that) {
    if (that == null)
      return false;

    boolean this_present_giftId = true && this.isSetGiftId();
    boolean that_present_giftId = true && that.isSetGiftId();
    if (this_present_giftId || that_present_giftId) {
      if (!(this_present_giftId && that_present_giftId))
        return false;
      if (!this.giftId.equals(that.giftId))
        return false;
    }

    boolean this_present_giftedTime = true;
    boolean that_present_giftedTime = true;
    if (this_present_giftedTime || that_present_giftedTime) {
      if (!(this_present_giftedTime && that_present_giftedTime))
        return false;
      if (this.giftedTime != that.giftedTime)
        return false;
    }

    boolean this_present_fromName = true && this.isSetFromName();
    boolean that_present_fromName = true && that.isSetFromName();
    if (this_present_fromName || that_present_fromName) {
      if (!(this_present_fromName && that_present_fromName))
        return false;
      if (!this.fromName.equals(that.fromName))
        return false;
    }

    boolean this_present_fromEmail = true && this.isSetFromEmail();
    boolean that_present_fromEmail = true && that.isSetFromEmail();
    if (this_present_fromEmail || that_present_fromEmail) {
      if (!(this_present_fromEmail && that_present_fromEmail))
        return false;
      if (!this.fromEmail.equals(that.fromEmail))
        return false;
    }

    boolean this_present_toName = true && this.isSetToName();
    boolean that_present_toName = true && that.isSetToName();
    if (this_present_toName || that_present_toName) {
      if (!(this_present_toName && that_present_toName))
        return false;
      if (!this.toName.equals(that.toName))
        return false;
    }

    boolean this_present_toEmail = true && this.isSetToEmail();
    boolean that_present_toEmail = true && that.isSetToEmail();
    if (this_present_toEmail || that_present_toEmail) {
      if (!(this_present_toEmail && that_present_toEmail))
        return false;
      if (!this.toEmail.equals(that.toEmail))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(GiftDetail_t other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGiftId()).compareTo(other.isSetGiftId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftId, other.giftId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiftedTime()).compareTo(other.isSetGiftedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftedTime, other.giftedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromName()).compareTo(other.isSetFromName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromName, other.fromName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromEmail()).compareTo(other.isSetFromEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromEmail, other.fromEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToName()).compareTo(other.isSetToName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toName, other.toName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToEmail()).compareTo(other.isSetToEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toEmail, other.toEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GiftDetail_t(");
    boolean first = true;

    sb.append("giftId:");
    if (this.giftId == null) {
      sb.append("null");
    } else {
      sb.append(this.giftId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("giftedTime:");
    sb.append(this.giftedTime);
    first = false;
    if (isSetFromName()) {
      if (!first) sb.append(", ");
      sb.append("fromName:");
      if (this.fromName == null) {
        sb.append("null");
      } else {
        sb.append(this.fromName);
      }
      first = false;
    }
    if (isSetFromEmail()) {
      if (!first) sb.append(", ");
      sb.append("fromEmail:");
      if (this.fromEmail == null) {
        sb.append("null");
      } else {
        sb.append(this.fromEmail);
      }
      first = false;
    }
    if (isSetToName()) {
      if (!first) sb.append(", ");
      sb.append("toName:");
      if (this.toName == null) {
        sb.append("null");
      } else {
        sb.append(this.toName);
      }
      first = false;
    }
    if (isSetToEmail()) {
      if (!first) sb.append(", ");
      sb.append("toEmail:");
      if (this.toEmail == null) {
        sb.append("null");
      } else {
        sb.append(this.toEmail);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (giftId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'giftId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'giftedTime' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class GiftDetail_tStandardSchemeFactory implements SchemeFactory {
    public GiftDetail_tStandardScheme getScheme() {
      return new GiftDetail_tStandardScheme();
    }
  }

  private static class GiftDetail_tStandardScheme extends StandardScheme<GiftDetail_t> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GiftDetail_t struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GIFT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.giftId = iprot.readString();
              struct.setGiftIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GIFTED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.giftedTime = iprot.readI64();
              struct.setGiftedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FROM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromName = iprot.readString();
              struct.setFromNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FROM_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromEmail = iprot.readString();
              struct.setFromEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TO_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toName = iprot.readString();
              struct.setToNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TO_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toEmail = iprot.readString();
              struct.setToEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetGiftedTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'giftedTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GiftDetail_t struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.giftId != null) {
        oprot.writeFieldBegin(GIFT_ID_FIELD_DESC);
        oprot.writeString(struct.giftId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GIFTED_TIME_FIELD_DESC);
      oprot.writeI64(struct.giftedTime);
      oprot.writeFieldEnd();
      if (struct.fromName != null) {
        if (struct.isSetFromName()) {
          oprot.writeFieldBegin(FROM_NAME_FIELD_DESC);
          oprot.writeString(struct.fromName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fromEmail != null) {
        if (struct.isSetFromEmail()) {
          oprot.writeFieldBegin(FROM_EMAIL_FIELD_DESC);
          oprot.writeString(struct.fromEmail);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toName != null) {
        if (struct.isSetToName()) {
          oprot.writeFieldBegin(TO_NAME_FIELD_DESC);
          oprot.writeString(struct.toName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toEmail != null) {
        if (struct.isSetToEmail()) {
          oprot.writeFieldBegin(TO_EMAIL_FIELD_DESC);
          oprot.writeString(struct.toEmail);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GiftDetail_tTupleSchemeFactory implements SchemeFactory {
    public GiftDetail_tTupleScheme getScheme() {
      return new GiftDetail_tTupleScheme();
    }
  }

  private static class GiftDetail_tTupleScheme extends TupleScheme<GiftDetail_t> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GiftDetail_t struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.giftId);
      oprot.writeI64(struct.giftedTime);
      BitSet optionals = new BitSet();
      if (struct.isSetFromName()) {
        optionals.set(0);
      }
      if (struct.isSetFromEmail()) {
        optionals.set(1);
      }
      if (struct.isSetToName()) {
        optionals.set(2);
      }
      if (struct.isSetToEmail()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFromName()) {
        oprot.writeString(struct.fromName);
      }
      if (struct.isSetFromEmail()) {
        oprot.writeString(struct.fromEmail);
      }
      if (struct.isSetToName()) {
        oprot.writeString(struct.toName);
      }
      if (struct.isSetToEmail()) {
        oprot.writeString(struct.toEmail);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GiftDetail_t struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.giftId = iprot.readString();
      struct.setGiftIdIsSet(true);
      struct.giftedTime = iprot.readI64();
      struct.setGiftedTimeIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.fromName = iprot.readString();
        struct.setFromNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fromEmail = iprot.readString();
        struct.setFromEmailIsSet(true);
      }
      if (incoming.get(2)) {
        struct.toName = iprot.readString();
        struct.setToNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.toEmail = iprot.readString();
        struct.setToEmailIsSet(true);
      }
    }
  }

}

