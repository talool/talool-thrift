/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"

#import "Core.h"

#import "Payment.h"

@implementation Card_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAccountNumber: (NSString *) accountNumber expirationMonth: (NSString *) expirationMonth expirationYear: (NSString *) expirationYear securityCode: (NSString *) securityCode zipCode: (NSString *) zipCode
{
  self = [super init];
  __accountNumber = [accountNumber retain_stub];
  __accountNumber_isset = YES;
  __expirationMonth = [expirationMonth retain_stub];
  __expirationMonth_isset = YES;
  __expirationYear = [expirationYear retain_stub];
  __expirationYear_isset = YES;
  __securityCode = [securityCode retain_stub];
  __securityCode_isset = YES;
  __zipCode = [zipCode retain_stub];
  __zipCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"accountNumber"])
  {
    __accountNumber = [[decoder decodeObjectForKey: @"accountNumber"] retain_stub];
    __accountNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"expirationMonth"])
  {
    __expirationMonth = [[decoder decodeObjectForKey: @"expirationMonth"] retain_stub];
    __expirationMonth_isset = YES;
  }
  if ([decoder containsValueForKey: @"expirationYear"])
  {
    __expirationYear = [[decoder decodeObjectForKey: @"expirationYear"] retain_stub];
    __expirationYear_isset = YES;
  }
  if ([decoder containsValueForKey: @"securityCode"])
  {
    __securityCode = [[decoder decodeObjectForKey: @"securityCode"] retain_stub];
    __securityCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"zipCode"])
  {
    __zipCode = [[decoder decodeObjectForKey: @"zipCode"] retain_stub];
    __zipCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__accountNumber_isset)
  {
    [encoder encodeObject: __accountNumber forKey: @"accountNumber"];
  }
  if (__expirationMonth_isset)
  {
    [encoder encodeObject: __expirationMonth forKey: @"expirationMonth"];
  }
  if (__expirationYear_isset)
  {
    [encoder encodeObject: __expirationYear forKey: @"expirationYear"];
  }
  if (__securityCode_isset)
  {
    [encoder encodeObject: __securityCode forKey: @"securityCode"];
  }
  if (__zipCode_isset)
  {
    [encoder encodeObject: __zipCode forKey: @"zipCode"];
  }
}

- (void) dealloc
{
  [__accountNumber release_stub];
  [__expirationMonth release_stub];
  [__expirationYear release_stub];
  [__securityCode release_stub];
  [__zipCode release_stub];
  [super dealloc_stub];
}

- (NSString *) accountNumber {
  return [[__accountNumber retain_stub] autorelease_stub];
}

- (void) setAccountNumber: (NSString *) accountNumber {
  [accountNumber retain_stub];
  [__accountNumber release_stub];
  __accountNumber = accountNumber;
  __accountNumber_isset = YES;
}

- (BOOL) accountNumberIsSet {
  return __accountNumber_isset;
}

- (void) unsetAccountNumber {
  [__accountNumber release_stub];
  __accountNumber = nil;
  __accountNumber_isset = NO;
}

- (NSString *) expirationMonth {
  return [[__expirationMonth retain_stub] autorelease_stub];
}

- (void) setExpirationMonth: (NSString *) expirationMonth {
  [expirationMonth retain_stub];
  [__expirationMonth release_stub];
  __expirationMonth = expirationMonth;
  __expirationMonth_isset = YES;
}

- (BOOL) expirationMonthIsSet {
  return __expirationMonth_isset;
}

- (void) unsetExpirationMonth {
  [__expirationMonth release_stub];
  __expirationMonth = nil;
  __expirationMonth_isset = NO;
}

- (NSString *) expirationYear {
  return [[__expirationYear retain_stub] autorelease_stub];
}

- (void) setExpirationYear: (NSString *) expirationYear {
  [expirationYear retain_stub];
  [__expirationYear release_stub];
  __expirationYear = expirationYear;
  __expirationYear_isset = YES;
}

- (BOOL) expirationYearIsSet {
  return __expirationYear_isset;
}

- (void) unsetExpirationYear {
  [__expirationYear release_stub];
  __expirationYear = nil;
  __expirationYear_isset = NO;
}

- (NSString *) securityCode {
  return [[__securityCode retain_stub] autorelease_stub];
}

- (void) setSecurityCode: (NSString *) securityCode {
  [securityCode retain_stub];
  [__securityCode release_stub];
  __securityCode = securityCode;
  __securityCode_isset = YES;
}

- (BOOL) securityCodeIsSet {
  return __securityCode_isset;
}

- (void) unsetSecurityCode {
  [__securityCode release_stub];
  __securityCode = nil;
  __securityCode_isset = NO;
}

- (NSString *) zipCode {
  return [[__zipCode retain_stub] autorelease_stub];
}

- (void) setZipCode: (NSString *) zipCode {
  [zipCode retain_stub];
  [__zipCode release_stub];
  __zipCode = zipCode;
  __zipCode_isset = YES;
}

- (BOOL) zipCodeIsSet {
  return __zipCode_isset;
}

- (void) unsetZipCode {
  [__zipCode release_stub];
  __zipCode = nil;
  __zipCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccountNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExpirationMonth: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExpirationYear: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSecurityCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setZipCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Card_t"];
  if (__accountNumber_isset) {
    if (__accountNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"accountNumber" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __accountNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expirationMonth_isset) {
    if (__expirationMonth != nil) {
      [outProtocol writeFieldBeginWithName: @"expirationMonth" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __expirationMonth];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expirationYear_isset) {
    if (__expirationYear != nil) {
      [outProtocol writeFieldBeginWithName: @"expirationYear" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __expirationYear];
      [outProtocol writeFieldEnd];
    }
  }
  if (__securityCode_isset) {
    if (__securityCode != nil) {
      [outProtocol writeFieldBeginWithName: @"securityCode" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __securityCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__zipCode_isset) {
    if (__zipCode != nil) {
      [outProtocol writeFieldBeginWithName: @"zipCode" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __zipCode];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__accountNumber_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'accountNumber' is not set."];
  }
  if (!__expirationMonth_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'expirationMonth' is not set."];
  }
  if (!__expirationYear_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'expirationYear' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Card_t("];
  [ms appendString: @"accountNumber:"];
  [ms appendFormat: @"\"%@\"", __accountNumber];
  [ms appendString: @",expirationMonth:"];
  [ms appendFormat: @"\"%@\"", __expirationMonth];
  [ms appendString: @",expirationYear:"];
  [ms appendFormat: @"\"%@\"", __expirationYear];
  [ms appendString: @",securityCode:"];
  [ms appendFormat: @"\"%@\"", __securityCode];
  [ms appendString: @",zipCode:"];
  [ms appendFormat: @"\"%@\"", __zipCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation PaymentDetail_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEncryptedFields: (BOOL) encryptedFields card: (Card_t *) card paymentMetadata: (NSMutableDictionary *) paymentMetadata saveCard: (BOOL) saveCard
{
  self = [super init];
  __encryptedFields = encryptedFields;
  __encryptedFields_isset = YES;
  __card = [card retain_stub];
  __card_isset = YES;
  __paymentMetadata = [paymentMetadata retain_stub];
  __paymentMetadata_isset = YES;
  __saveCard = saveCard;
  __saveCard_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"encryptedFields"])
  {
    __encryptedFields = [decoder decodeBoolForKey: @"encryptedFields"];
    __encryptedFields_isset = YES;
  }
  if ([decoder containsValueForKey: @"card"])
  {
    __card = [[decoder decodeObjectForKey: @"card"] retain_stub];
    __card_isset = YES;
  }
  if ([decoder containsValueForKey: @"paymentMetadata"])
  {
    __paymentMetadata = [[decoder decodeObjectForKey: @"paymentMetadata"] retain_stub];
    __paymentMetadata_isset = YES;
  }
  if ([decoder containsValueForKey: @"saveCard"])
  {
    __saveCard = [decoder decodeBoolForKey: @"saveCard"];
    __saveCard_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__encryptedFields_isset)
  {
    [encoder encodeBool: __encryptedFields forKey: @"encryptedFields"];
  }
  if (__card_isset)
  {
    [encoder encodeObject: __card forKey: @"card"];
  }
  if (__paymentMetadata_isset)
  {
    [encoder encodeObject: __paymentMetadata forKey: @"paymentMetadata"];
  }
  if (__saveCard_isset)
  {
    [encoder encodeBool: __saveCard forKey: @"saveCard"];
  }
}

- (void) dealloc
{
  [__card release_stub];
  [__paymentMetadata release_stub];
  [super dealloc_stub];
}

- (BOOL) encryptedFields {
  return __encryptedFields;
}

- (void) setEncryptedFields: (BOOL) encryptedFields {
  __encryptedFields = encryptedFields;
  __encryptedFields_isset = YES;
}

- (BOOL) encryptedFieldsIsSet {
  return __encryptedFields_isset;
}

- (void) unsetEncryptedFields {
  __encryptedFields_isset = NO;
}

- (Card_t *) card {
  return [[__card retain_stub] autorelease_stub];
}

- (void) setCard: (Card_t *) card {
  [card retain_stub];
  [__card release_stub];
  __card = card;
  __card_isset = YES;
}

- (BOOL) cardIsSet {
  return __card_isset;
}

- (void) unsetCard {
  [__card release_stub];
  __card = nil;
  __card_isset = NO;
}

- (NSMutableDictionary *) paymentMetadata {
  return [[__paymentMetadata retain_stub] autorelease_stub];
}

- (void) setPaymentMetadata: (NSMutableDictionary *) paymentMetadata {
  [paymentMetadata retain_stub];
  [__paymentMetadata release_stub];
  __paymentMetadata = paymentMetadata;
  __paymentMetadata_isset = YES;
}

- (BOOL) paymentMetadataIsSet {
  return __paymentMetadata_isset;
}

- (void) unsetPaymentMetadata {
  [__paymentMetadata release_stub];
  __paymentMetadata = nil;
  __paymentMetadata_isset = NO;
}

- (BOOL) saveCard {
  return __saveCard;
}

- (void) setSaveCard: (BOOL) saveCard {
  __saveCard = saveCard;
  __saveCard_isset = YES;
}

- (BOOL) saveCardIsSet {
  return __saveCard_isset;
}

- (void) unsetSaveCard {
  __saveCard_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setEncryptedFields: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Card_t *fieldValue = [[Card_t alloc] init];
          [fieldValue read: inProtocol];
          [self setCard: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size0;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size0];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _key2 = [inProtocol readString];
            NSString * _val3 = [inProtocol readString];
            [fieldValue setObject: _val3 forKey: _key2];
          }
          [inProtocol readMapEnd];
          [self setPaymentMetadata: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSaveCard: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PaymentDetail_t"];
  if (__encryptedFields_isset) {
    [outProtocol writeFieldBeginWithName: @"encryptedFields" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __encryptedFields];
    [outProtocol writeFieldEnd];
  }
  if (__card_isset) {
    if (__card != nil) {
      [outProtocol writeFieldBeginWithName: @"card" type: TType_STRUCT fieldID: 2];
      [__card write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__paymentMetadata_isset) {
    if (__paymentMetadata != nil) {
      [outProtocol writeFieldBeginWithName: @"paymentMetadata" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__paymentMetadata count]];
        NSEnumerator * _iter4 = [__paymentMetadata keyEnumerator];
        id key5;
        while ((key5 = [_iter4 nextObject]))
        {
          [outProtocol writeString: key5];
          [outProtocol writeString: [__paymentMetadata objectForKey: key5]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__saveCard_isset) {
    [outProtocol writeFieldBeginWithName: @"saveCard" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __saveCard];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__encryptedFields_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'encryptedFields' is not set."];
  }
  if (!__card_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'card' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PaymentDetail_t("];
  [ms appendString: @"encryptedFields:"];
  [ms appendFormat: @"%i", __encryptedFields];
  [ms appendString: @",card:"];
  [ms appendFormat: @"%@", __card];
  [ms appendString: @",paymentMetadata:"];
  [ms appendFormat: @"%@", __paymentMetadata];
  [ms appendString: @",saveCard:"];
  [ms appendFormat: @"%i", __saveCard];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TransactionResult_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success message: (NSString *) message
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TransactionResult_t"];
  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__success_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'success' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TransactionResult_t("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation PaymentConstants
+ (void) initialize {
}
@end

