/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"

#import "Error.h"
#import "Core.h"
#import "Activity.h"
#import "Payment.h"

#import "CustomerService.h"

@implementation CTokenAccess_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCustomer: (Customer_t *) customer token: (NSString *) token
{
  self = [super init];
  __customer = [customer retain_stub];
  __customer_isset = YES;
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"customer"])
  {
    __customer = [[decoder decodeObjectForKey: @"customer"] retain_stub];
    __customer_isset = YES;
  }
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__customer_isset)
  {
    [encoder encodeObject: __customer forKey: @"customer"];
  }
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (void) dealloc
{
  [__customer release_stub];
  [__token release_stub];
  [super dealloc_stub];
}

- (Customer_t *) customer {
  return [[__customer retain_stub] autorelease_stub];
}

- (void) setCustomer: (Customer_t *) customer {
  [customer retain_stub];
  [__customer release_stub];
  __customer = customer;
  __customer_isset = YES;
}

- (BOOL) customerIsSet {
  return __customer_isset;
}

- (void) unsetCustomer {
  [__customer release_stub];
  __customer = nil;
  __customer_isset = NO;
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Customer_t *fieldValue = [[Customer_t alloc] init];
          [fieldValue read: inProtocol];
          [self setCustomer: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CTokenAccess_t"];
  if (__customer_isset) {
    if (__customer != nil) {
      [outProtocol writeFieldBeginWithName: @"customer" type: TType_STRUCT fieldID: 1];
      [__customer write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CTokenAccess_t("];
  [ms appendString: @"customer:"];
  [ms appendFormat: @"%@", __customer];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CTokenAccessResponse_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTokenAccess: (CTokenAccess_t *) tokenAccess
{
  self = [super init];
  __tokenAccess = [tokenAccess retain_stub];
  __tokenAccess_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tokenAccess"])
  {
    __tokenAccess = [[decoder decodeObjectForKey: @"tokenAccess"] retain_stub];
    __tokenAccess_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tokenAccess_isset)
  {
    [encoder encodeObject: __tokenAccess forKey: @"tokenAccess"];
  }
}

- (void) dealloc
{
  [__tokenAccess release_stub];
  [super dealloc_stub];
}

- (CTokenAccess_t *) tokenAccess {
  return [[__tokenAccess retain_stub] autorelease_stub];
}

- (void) setTokenAccess: (CTokenAccess_t *) tokenAccess {
  [tokenAccess retain_stub];
  [__tokenAccess release_stub];
  __tokenAccess = tokenAccess;
  __tokenAccess_isset = YES;
}

- (BOOL) tokenAccessIsSet {
  return __tokenAccess_isset;
}

- (void) unsetTokenAccess {
  [__tokenAccess release_stub];
  __tokenAccess = nil;
  __tokenAccess_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CTokenAccess_t *fieldValue = [[CTokenAccess_t alloc] init];
          [fieldValue read: inProtocol];
          [self setTokenAccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CTokenAccessResponse_t"];
  if (__tokenAccess_isset) {
    if (__tokenAccess != nil) {
      [outProtocol writeFieldBeginWithName: @"tokenAccess" type: TType_STRUCT fieldID: 1];
      [__tokenAccess write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CTokenAccessResponse_t("];
  [ms appendString: @"tokenAccess:"];
  [ms appendFormat: @"%@", __tokenAccess];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DealOfferGeoSummariesResponse_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealOfferGeoSummaries: (NSMutableArray *) dealOfferGeoSummaries fallbackResponse: (BOOL) fallbackResponse
{
  self = [super init];
  __dealOfferGeoSummaries = [dealOfferGeoSummaries retain_stub];
  __dealOfferGeoSummaries_isset = YES;
  __fallbackResponse = fallbackResponse;
  __fallbackResponse_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealOfferGeoSummaries"])
  {
    __dealOfferGeoSummaries = [[decoder decodeObjectForKey: @"dealOfferGeoSummaries"] retain_stub];
    __dealOfferGeoSummaries_isset = YES;
  }
  if ([decoder containsValueForKey: @"fallbackResponse"])
  {
    __fallbackResponse = [decoder decodeBoolForKey: @"fallbackResponse"];
    __fallbackResponse_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealOfferGeoSummaries_isset)
  {
    [encoder encodeObject: __dealOfferGeoSummaries forKey: @"dealOfferGeoSummaries"];
  }
  if (__fallbackResponse_isset)
  {
    [encoder encodeBool: __fallbackResponse forKey: @"fallbackResponse"];
  }
}

- (void) dealloc
{
  [__dealOfferGeoSummaries release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) dealOfferGeoSummaries {
  return [[__dealOfferGeoSummaries retain_stub] autorelease_stub];
}

- (void) setDealOfferGeoSummaries: (NSMutableArray *) dealOfferGeoSummaries {
  [dealOfferGeoSummaries retain_stub];
  [__dealOfferGeoSummaries release_stub];
  __dealOfferGeoSummaries = dealOfferGeoSummaries;
  __dealOfferGeoSummaries_isset = YES;
}

- (BOOL) dealOfferGeoSummariesIsSet {
  return __dealOfferGeoSummaries_isset;
}

- (void) unsetDealOfferGeoSummaries {
  [__dealOfferGeoSummaries release_stub];
  __dealOfferGeoSummaries = nil;
  __dealOfferGeoSummaries_isset = NO;
}

- (BOOL) fallbackResponse {
  return __fallbackResponse;
}

- (void) setFallbackResponse: (BOOL) fallbackResponse {
  __fallbackResponse = fallbackResponse;
  __fallbackResponse_isset = YES;
}

- (BOOL) fallbackResponseIsSet {
  return __fallbackResponse_isset;
}

- (void) unsetFallbackResponse {
  __fallbackResponse_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            DealOfferGeoSummary_t *_elem2 = [[DealOfferGeoSummary_t alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setDealOfferGeoSummaries: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setFallbackResponse: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DealOfferGeoSummariesResponse_t"];
  if (__dealOfferGeoSummaries_isset) {
    if (__dealOfferGeoSummaries != nil) {
      [outProtocol writeFieldBeginWithName: @"dealOfferGeoSummaries" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__dealOfferGeoSummaries count]];
        int i4;
        for (i4 = 0; i4 < [__dealOfferGeoSummaries count]; i4++)
        {
          [[__dealOfferGeoSummaries objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__fallbackResponse_isset) {
    [outProtocol writeFieldBeginWithName: @"fallbackResponse" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __fallbackResponse];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DealOfferGeoSummariesResponse_t("];
  [ms appendString: @"dealOfferGeoSummaries:"];
  [ms appendFormat: @"%@", __dealOfferGeoSummaries];
  [ms appendString: @",fallbackResponse:"];
  [ms appendFormat: @"%i", __fallbackResponse];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MerchantsResponse_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMerchants: (NSMutableArray *) merchants
{
  self = [super init];
  __merchants = [merchants retain_stub];
  __merchants_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"merchants"])
  {
    __merchants = [[decoder decodeObjectForKey: @"merchants"] retain_stub];
    __merchants_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__merchants_isset)
  {
    [encoder encodeObject: __merchants forKey: @"merchants"];
  }
}

- (void) dealloc
{
  [__merchants release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) merchants {
  return [[__merchants retain_stub] autorelease_stub];
}

- (void) setMerchants: (NSMutableArray *) merchants {
  [merchants retain_stub];
  [__merchants release_stub];
  __merchants = merchants;
  __merchants_isset = YES;
}

- (BOOL) merchantsIsSet {
  return __merchants_isset;
}

- (void) unsetMerchants {
  [__merchants release_stub];
  __merchants = nil;
  __merchants_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            Merchant_t *_elem7 = [[Merchant_t alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setMerchants: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MerchantsResponse_t"];
  if (__merchants_isset) {
    if (__merchants != nil) {
      [outProtocol writeFieldBeginWithName: @"merchants" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__merchants count]];
        int i9;
        for (i9 = 0; i9 < [__merchants count]; i9++)
        {
          [[__merchants objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MerchantsResponse_t("];
  [ms appendString: @"merchants:"];
  [ms appendFormat: @"%@", __merchants];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ValidateCodeResponse_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithValid: (BOOL) valid codeType: (NSString *) codeType
{
  self = [super init];
  __valid = valid;
  __valid_isset = YES;
  __codeType = [codeType retain_stub];
  __codeType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"valid"])
  {
    __valid = [decoder decodeBoolForKey: @"valid"];
    __valid_isset = YES;
  }
  if ([decoder containsValueForKey: @"codeType"])
  {
    __codeType = [[decoder decodeObjectForKey: @"codeType"] retain_stub];
    __codeType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__valid_isset)
  {
    [encoder encodeBool: __valid forKey: @"valid"];
  }
  if (__codeType_isset)
  {
    [encoder encodeObject: __codeType forKey: @"codeType"];
  }
}

- (void) dealloc
{
  [__codeType release_stub];
  [super dealloc_stub];
}

- (BOOL) valid {
  return __valid;
}

- (void) setValid: (BOOL) valid {
  __valid = valid;
  __valid_isset = YES;
}

- (BOOL) validIsSet {
  return __valid_isset;
}

- (void) unsetValid {
  __valid_isset = NO;
}

- (NSString *) codeType {
  return [[__codeType retain_stub] autorelease_stub];
}

- (void) setCodeType: (NSString *) codeType {
  [codeType retain_stub];
  [__codeType release_stub];
  __codeType = codeType;
  __codeType_isset = YES;
}

- (BOOL) codeTypeIsSet {
  return __codeType_isset;
}

- (void) unsetCodeType {
  [__codeType release_stub];
  __codeType = nil;
  __codeType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setValid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCodeType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ValidateCodeResponse_t"];
  if (__valid_isset) {
    [outProtocol writeFieldBeginWithName: @"valid" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __valid];
    [outProtocol writeFieldEnd];
  }
  if (__codeType_isset) {
    if (__codeType != nil) {
      [outProtocol writeFieldBeginWithName: @"codeType" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __codeType];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ValidateCodeResponse_t("];
  [ms appendString: @"valid:"];
  [ms appendFormat: @"%i", __valid];
  [ms appendString: @",codeType:"];
  [ms appendFormat: @"\"%@\"", __codeType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EmailMessageResponse_t

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSubject: (NSString *) subject body: (NSString *) body
{
  self = [super init];
  __subject = [subject retain_stub];
  __subject_isset = YES;
  __body = [body retain_stub];
  __body_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"subject"])
  {
    __subject = [[decoder decodeObjectForKey: @"subject"] retain_stub];
    __subject_isset = YES;
  }
  if ([decoder containsValueForKey: @"body"])
  {
    __body = [[decoder decodeObjectForKey: @"body"] retain_stub];
    __body_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__subject_isset)
  {
    [encoder encodeObject: __subject forKey: @"subject"];
  }
  if (__body_isset)
  {
    [encoder encodeObject: __body forKey: @"body"];
  }
}

- (void) dealloc
{
  [__subject release_stub];
  [__body release_stub];
  [super dealloc_stub];
}

- (NSString *) subject {
  return [[__subject retain_stub] autorelease_stub];
}

- (void) setSubject: (NSString *) subject {
  [subject retain_stub];
  [__subject release_stub];
  __subject = subject;
  __subject_isset = YES;
}

- (BOOL) subjectIsSet {
  return __subject_isset;
}

- (void) unsetSubject {
  [__subject release_stub];
  __subject = nil;
  __subject_isset = NO;
}

- (NSString *) body {
  return [[__body retain_stub] autorelease_stub];
}

- (void) setBody: (NSString *) body {
  [body retain_stub];
  [__body release_stub];
  __body = body;
  __body_isset = YES;
}

- (BOOL) bodyIsSet {
  return __body_isset;
}

- (void) unsetBody {
  [__body release_stub];
  __body = nil;
  __body_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSubject: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EmailMessageResponse_t"];
  if (__subject_isset) {
    if (__subject != nil) {
      [outProtocol writeFieldBeginWithName: @"subject" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __subject];
      [outProtocol writeFieldEnd];
    }
  }
  if (__body_isset) {
    if (__body != nil) {
      [outProtocol writeFieldBeginWithName: @"body" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __body];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EmailMessageResponse_t("];
  [ms appendString: @"subject:"];
  [ms appendFormat: @"\"%@\"", __subject];
  [ms appendString: @",body:"];
  [ms appendFormat: @"\"%@\"", __body];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static NSString * CTOKEN_NAME = @"ctok";

@implementation CustomerServiceConstants
+ (void) initialize {
}
+ (NSString *) CTOKEN_NAME{
  return CTOKEN_NAME;
}
@end

@interface createAccount_args : NSObject <NSCoding> {
  Customer_t * __customer;
  NSString * __password;

  BOOL __customer_isset;
  BOOL __password_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=customer, setter=setCustomer:) Customer_t * customer;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
#endif

- (id) init;
- (id) initWithCustomer: (Customer_t *) customer password: (NSString *) password;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (Customer_t *) customer;
- (void) setCustomer: (Customer_t *) customer;
#endif
- (BOOL) customerIsSet;

#if !__has_feature(objc_arc)
- (NSString *) password;
- (void) setPassword: (NSString *) password;
#endif
- (BOOL) passwordIsSet;

@end

@implementation createAccount_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCustomer: (Customer_t *) customer password: (NSString *) password
{
  self = [super init];
  __customer = [customer retain_stub];
  __customer_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"customer"])
  {
    __customer = [[decoder decodeObjectForKey: @"customer"] retain_stub];
    __customer_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__customer_isset)
  {
    [encoder encodeObject: __customer forKey: @"customer"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (void) dealloc
{
  [__customer release_stub];
  [__password release_stub];
  [super dealloc_stub];
}

- (Customer_t *) customer {
  return [[__customer retain_stub] autorelease_stub];
}

- (void) setCustomer: (Customer_t *) customer {
  [customer retain_stub];
  [__customer release_stub];
  __customer = customer;
  __customer_isset = YES;
}

- (BOOL) customerIsSet {
  return __customer_isset;
}

- (void) unsetCustomer {
  [__customer release_stub];
  __customer = nil;
  __customer_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Customer_t *fieldValue = [[Customer_t alloc] init];
          [fieldValue read: inProtocol];
          [self setCustomer: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"createAccount_args"];
  if (__customer_isset) {
    if (__customer != nil) {
      [outProtocol writeFieldBeginWithName: @"customer" type: TType_STRUCT fieldID: 1];
      [__customer write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"createAccount_args("];
  [ms appendString: @"customer:"];
  [ms appendFormat: @"%@", __customer];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CreateAccount_result : NSObject <NSCoding> {
  CTokenAccess_t * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) CTokenAccess_t * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (CTokenAccess_t *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CTokenAccess_t *) success;
- (void) setSuccess: (CTokenAccess_t *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation CreateAccount_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (CTokenAccess_t *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (CTokenAccess_t *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (CTokenAccess_t *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          CTokenAccess_t *fieldValue = [[CTokenAccess_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateAccount_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CreateAccount_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface authenticate_args : NSObject <NSCoding> {
  NSString * __email;
  NSString * __password;

  BOOL __email_isset;
  BOOL __password_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=email, setter=setEmail:) NSString * email;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
#endif

- (id) init;
- (id) initWithEmail: (NSString *) email password: (NSString *) password;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) email;
- (void) setEmail: (NSString *) email;
#endif
- (BOOL) emailIsSet;

#if !__has_feature(objc_arc)
- (NSString *) password;
- (void) setPassword: (NSString *) password;
#endif
- (BOOL) passwordIsSet;

@end

@implementation authenticate_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEmail: (NSString *) email password: (NSString *) password
{
  self = [super init];
  __email = [email retain_stub];
  __email_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (void) dealloc
{
  [__email release_stub];
  [__password release_stub];
  [super dealloc_stub];
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"authenticate_args"];
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"authenticate_args("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Authenticate_result : NSObject <NSCoding> {
  CTokenAccess_t * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) CTokenAccess_t * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (CTokenAccess_t *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CTokenAccess_t *) success;
- (void) setSuccess: (CTokenAccess_t *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation Authenticate_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (CTokenAccess_t *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (CTokenAccess_t *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (CTokenAccess_t *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          CTokenAccess_t *fieldValue = [[CTokenAccess_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Authenticate_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Authenticate_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface customerEmailExists_args : NSObject <NSCoding> {
  NSString * __email;

  BOOL __email_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=email, setter=setEmail:) NSString * email;
#endif

- (id) init;
- (id) initWithEmail: (NSString *) email;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) email;
- (void) setEmail: (NSString *) email;
#endif
- (BOOL) emailIsSet;

@end

@implementation customerEmailExists_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEmail: (NSString *) email
{
  self = [super init];
  __email = [email retain_stub];
  __email_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
}

- (void) dealloc
{
  [__email release_stub];
  [super dealloc_stub];
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"customerEmailExists_args"];
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"customerEmailExists_args("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CustomerEmailExists_result : NSObject <NSCoding> {
  BOOL __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation CustomerEmailExists_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__error release_stub];
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CustomerEmailExists_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CustomerEmailExists_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface addSocialAccount_args : NSObject <NSCoding> {
  SocialAccount_t * __socialAccount;

  BOOL __socialAccount_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=socialAccount, setter=setSocialAccount:) SocialAccount_t * socialAccount;
#endif

- (id) init;
- (id) initWithSocialAccount: (SocialAccount_t *) socialAccount;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (SocialAccount_t *) socialAccount;
- (void) setSocialAccount: (SocialAccount_t *) socialAccount;
#endif
- (BOOL) socialAccountIsSet;

@end

@implementation addSocialAccount_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSocialAccount: (SocialAccount_t *) socialAccount
{
  self = [super init];
  __socialAccount = [socialAccount retain_stub];
  __socialAccount_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"socialAccount"])
  {
    __socialAccount = [[decoder decodeObjectForKey: @"socialAccount"] retain_stub];
    __socialAccount_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__socialAccount_isset)
  {
    [encoder encodeObject: __socialAccount forKey: @"socialAccount"];
  }
}

- (void) dealloc
{
  [__socialAccount release_stub];
  [super dealloc_stub];
}

- (SocialAccount_t *) socialAccount {
  return [[__socialAccount retain_stub] autorelease_stub];
}

- (void) setSocialAccount: (SocialAccount_t *) socialAccount {
  [socialAccount retain_stub];
  [__socialAccount release_stub];
  __socialAccount = socialAccount;
  __socialAccount_isset = YES;
}

- (BOOL) socialAccountIsSet {
  return __socialAccount_isset;
}

- (void) unsetSocialAccount {
  [__socialAccount release_stub];
  __socialAccount = nil;
  __socialAccount_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SocialAccount_t *fieldValue = [[SocialAccount_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSocialAccount: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"addSocialAccount_args"];
  if (__socialAccount_isset) {
    if (__socialAccount != nil) {
      [outProtocol writeFieldBeginWithName: @"socialAccount" type: TType_STRUCT fieldID: 1];
      [__socialAccount write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"addSocialAccount_args("];
  [ms appendString: @"socialAccount:"];
  [ms appendFormat: @"%@", __socialAccount];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AddSocialAccount_result : NSObject <NSCoding> {
  ServiceException_t * __error;

  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithError: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation AddSocialAccount_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithError: (ServiceException_t *) error
{
  self = [super init];
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__error release_stub];
  [super dealloc_stub];
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddSocialAccount_result"];

  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddSocialAccount_result("];
  [ms appendString: @"error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface removeSocialAccount_args : NSObject <NSCoding> {
  int __socialNetwork;

  BOOL __socialNetwork_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=socialNetwork, setter=setSocialNetwork:) int socialNetwork;
#endif

- (id) init;
- (id) initWithSocialNetwork: (int) socialNetwork;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int) socialNetwork;
- (void) setSocialNetwork: (int) socialNetwork;
#endif
- (BOOL) socialNetworkIsSet;

@end

@implementation removeSocialAccount_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSocialNetwork: (int) socialNetwork
{
  self = [super init];
  __socialNetwork = socialNetwork;
  __socialNetwork_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"socialNetwork"])
  {
    __socialNetwork = [decoder decodeIntForKey: @"socialNetwork"];
    __socialNetwork_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__socialNetwork_isset)
  {
    [encoder encodeInt: __socialNetwork forKey: @"socialNetwork"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int) socialNetwork {
  return __socialNetwork;
}

- (void) setSocialNetwork: (int) socialNetwork {
  __socialNetwork = socialNetwork;
  __socialNetwork_isset = YES;
}

- (BOOL) socialNetworkIsSet {
  return __socialNetwork_isset;
}

- (void) unsetSocialNetwork {
  __socialNetwork_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSocialNetwork: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"removeSocialAccount_args"];
  if (__socialNetwork_isset) {
    [outProtocol writeFieldBeginWithName: @"socialNetwork" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __socialNetwork];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"removeSocialAccount_args("];
  [ms appendString: @"socialNetwork:"];
  [ms appendFormat: @"%i", __socialNetwork];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RemoveSocialAccount_result : NSObject <NSCoding> {
  ServiceException_t * __error;

  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithError: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation RemoveSocialAccount_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithError: (ServiceException_t *) error
{
  self = [super init];
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__error release_stub];
  [super dealloc_stub];
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveSocialAccount_result"];

  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RemoveSocialAccount_result("];
  [ms appendString: @"error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getMerchantAcquires_args : NSObject <NSCoding> {
  SearchOptions_t * __searchOptions;

  BOOL __searchOptions_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=searchOptions, setter=setSearchOptions:) SearchOptions_t * searchOptions;
#endif

- (id) init;
- (id) initWithSearchOptions: (SearchOptions_t *) searchOptions;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (SearchOptions_t *) searchOptions;
- (void) setSearchOptions: (SearchOptions_t *) searchOptions;
#endif
- (BOOL) searchOptionsIsSet;

@end

@implementation getMerchantAcquires_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSearchOptions: (SearchOptions_t *) searchOptions
{
  self = [super init];
  __searchOptions = [searchOptions retain_stub];
  __searchOptions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"searchOptions"])
  {
    __searchOptions = [[decoder decodeObjectForKey: @"searchOptions"] retain_stub];
    __searchOptions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__searchOptions_isset)
  {
    [encoder encodeObject: __searchOptions forKey: @"searchOptions"];
  }
}

- (void) dealloc
{
  [__searchOptions release_stub];
  [super dealloc_stub];
}

- (SearchOptions_t *) searchOptions {
  return [[__searchOptions retain_stub] autorelease_stub];
}

- (void) setSearchOptions: (SearchOptions_t *) searchOptions {
  [searchOptions retain_stub];
  [__searchOptions release_stub];
  __searchOptions = searchOptions;
  __searchOptions_isset = YES;
}

- (BOOL) searchOptionsIsSet {
  return __searchOptions_isset;
}

- (void) unsetSearchOptions {
  [__searchOptions release_stub];
  __searchOptions = nil;
  __searchOptions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SearchOptions_t *fieldValue = [[SearchOptions_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSearchOptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMerchantAcquires_args"];
  if (__searchOptions_isset) {
    if (__searchOptions != nil) {
      [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 1];
      [__searchOptions write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getMerchantAcquires_args("];
  [ms appendString: @"searchOptions:"];
  [ms appendFormat: @"%@", __searchOptions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMerchantAcquires_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetMerchantAcquires_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            Merchant_t *_elem12 = [[Merchant_t alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMerchantAcquires_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i14;
        for (i14 = 0; i14 < [__success count]; i14++)
        {
          [[__success objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMerchantAcquires_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getMerchantAcquiresWithLocation_args : NSObject <NSCoding> {
  SearchOptions_t * __searchOptions;
  Location_t * __location;

  BOOL __searchOptions_isset;
  BOOL __location_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=searchOptions, setter=setSearchOptions:) SearchOptions_t * searchOptions;
@property (nonatomic, retain, getter=location, setter=setLocation:) Location_t * location;
#endif

- (id) init;
- (id) initWithSearchOptions: (SearchOptions_t *) searchOptions location: (Location_t *) location;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (SearchOptions_t *) searchOptions;
- (void) setSearchOptions: (SearchOptions_t *) searchOptions;
#endif
- (BOOL) searchOptionsIsSet;

#if !__has_feature(objc_arc)
- (Location_t *) location;
- (void) setLocation: (Location_t *) location;
#endif
- (BOOL) locationIsSet;

@end

@implementation getMerchantAcquiresWithLocation_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSearchOptions: (SearchOptions_t *) searchOptions location: (Location_t *) location
{
  self = [super init];
  __searchOptions = [searchOptions retain_stub];
  __searchOptions_isset = YES;
  __location = [location retain_stub];
  __location_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"searchOptions"])
  {
    __searchOptions = [[decoder decodeObjectForKey: @"searchOptions"] retain_stub];
    __searchOptions_isset = YES;
  }
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain_stub];
    __location_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__searchOptions_isset)
  {
    [encoder encodeObject: __searchOptions forKey: @"searchOptions"];
  }
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
}

- (void) dealloc
{
  [__searchOptions release_stub];
  [__location release_stub];
  [super dealloc_stub];
}

- (SearchOptions_t *) searchOptions {
  return [[__searchOptions retain_stub] autorelease_stub];
}

- (void) setSearchOptions: (SearchOptions_t *) searchOptions {
  [searchOptions retain_stub];
  [__searchOptions release_stub];
  __searchOptions = searchOptions;
  __searchOptions_isset = YES;
}

- (BOOL) searchOptionsIsSet {
  return __searchOptions_isset;
}

- (void) unsetSearchOptions {
  [__searchOptions release_stub];
  __searchOptions = nil;
  __searchOptions_isset = NO;
}

- (Location_t *) location {
  return [[__location retain_stub] autorelease_stub];
}

- (void) setLocation: (Location_t *) location {
  [location retain_stub];
  [__location release_stub];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release_stub];
  __location = nil;
  __location_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SearchOptions_t *fieldValue = [[SearchOptions_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSearchOptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Location_t *fieldValue = [[Location_t alloc] init];
          [fieldValue read: inProtocol];
          [self setLocation: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMerchantAcquiresWithLocation_args"];
  if (__searchOptions_isset) {
    if (__searchOptions != nil) {
      [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 1];
      [__searchOptions write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 2];
      [__location write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getMerchantAcquiresWithLocation_args("];
  [ms appendString: @"searchOptions:"];
  [ms appendFormat: @"%@", __searchOptions];
  [ms appendString: @",location:"];
  [ms appendFormat: @"%@", __location];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMerchantAcquiresWithLocation_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetMerchantAcquiresWithLocation_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            Merchant_t *_elem17 = [[Merchant_t alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMerchantAcquiresWithLocation_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i19;
        for (i19 = 0; i19 < [__success count]; i19++)
        {
          [[__success objectAtIndex: i19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMerchantAcquiresWithLocation_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getMerchantAcquiresByCategory_args : NSObject <NSCoding> {
  int32_t __categoryId;
  SearchOptions_t * __searchOptions;

  BOOL __categoryId_isset;
  BOOL __searchOptions_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=categoryId, setter=setCategoryId:) int32_t categoryId;
@property (nonatomic, retain, getter=searchOptions, setter=setSearchOptions:) SearchOptions_t * searchOptions;
#endif

- (id) init;
- (id) initWithCategoryId: (int32_t) categoryId searchOptions: (SearchOptions_t *) searchOptions;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) categoryId;
- (void) setCategoryId: (int32_t) categoryId;
#endif
- (BOOL) categoryIdIsSet;

#if !__has_feature(objc_arc)
- (SearchOptions_t *) searchOptions;
- (void) setSearchOptions: (SearchOptions_t *) searchOptions;
#endif
- (BOOL) searchOptionsIsSet;

@end

@implementation getMerchantAcquiresByCategory_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCategoryId: (int32_t) categoryId searchOptions: (SearchOptions_t *) searchOptions
{
  self = [super init];
  __categoryId = categoryId;
  __categoryId_isset = YES;
  __searchOptions = [searchOptions retain_stub];
  __searchOptions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"categoryId"])
  {
    __categoryId = [decoder decodeInt32ForKey: @"categoryId"];
    __categoryId_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchOptions"])
  {
    __searchOptions = [[decoder decodeObjectForKey: @"searchOptions"] retain_stub];
    __searchOptions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__categoryId_isset)
  {
    [encoder encodeInt32: __categoryId forKey: @"categoryId"];
  }
  if (__searchOptions_isset)
  {
    [encoder encodeObject: __searchOptions forKey: @"searchOptions"];
  }
}

- (void) dealloc
{
  [__searchOptions release_stub];
  [super dealloc_stub];
}

- (int32_t) categoryId {
  return __categoryId;
}

- (void) setCategoryId: (int32_t) categoryId {
  __categoryId = categoryId;
  __categoryId_isset = YES;
}

- (BOOL) categoryIdIsSet {
  return __categoryId_isset;
}

- (void) unsetCategoryId {
  __categoryId_isset = NO;
}

- (SearchOptions_t *) searchOptions {
  return [[__searchOptions retain_stub] autorelease_stub];
}

- (void) setSearchOptions: (SearchOptions_t *) searchOptions {
  [searchOptions retain_stub];
  [__searchOptions release_stub];
  __searchOptions = searchOptions;
  __searchOptions_isset = YES;
}

- (BOOL) searchOptionsIsSet {
  return __searchOptions_isset;
}

- (void) unsetSearchOptions {
  [__searchOptions release_stub];
  __searchOptions = nil;
  __searchOptions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCategoryId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          SearchOptions_t *fieldValue = [[SearchOptions_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSearchOptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMerchantAcquiresByCategory_args"];
  if (__categoryId_isset) {
    [outProtocol writeFieldBeginWithName: @"categoryId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __categoryId];
    [outProtocol writeFieldEnd];
  }
  if (__searchOptions_isset) {
    if (__searchOptions != nil) {
      [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 2];
      [__searchOptions write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getMerchantAcquiresByCategory_args("];
  [ms appendString: @"categoryId:"];
  [ms appendFormat: @"%i", __categoryId];
  [ms appendString: @",searchOptions:"];
  [ms appendFormat: @"%@", __searchOptions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMerchantAcquiresByCategory_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetMerchantAcquiresByCategory_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            Merchant_t *_elem22 = [[Merchant_t alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMerchantAcquiresByCategory_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i24;
        for (i24 = 0; i24 < [__success count]; i24++)
        {
          [[__success objectAtIndex: i24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMerchantAcquiresByCategory_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getDealAcquires_args : NSObject <NSCoding> {
  NSString * __merchantId;
  SearchOptions_t * __searchOptions;

  BOOL __merchantId_isset;
  BOOL __searchOptions_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=merchantId, setter=setMerchantId:) NSString * merchantId;
@property (nonatomic, retain, getter=searchOptions, setter=setSearchOptions:) SearchOptions_t * searchOptions;
#endif

- (id) init;
- (id) initWithMerchantId: (NSString *) merchantId searchOptions: (SearchOptions_t *) searchOptions;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) merchantId;
- (void) setMerchantId: (NSString *) merchantId;
#endif
- (BOOL) merchantIdIsSet;

#if !__has_feature(objc_arc)
- (SearchOptions_t *) searchOptions;
- (void) setSearchOptions: (SearchOptions_t *) searchOptions;
#endif
- (BOOL) searchOptionsIsSet;

@end

@implementation getDealAcquires_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMerchantId: (NSString *) merchantId searchOptions: (SearchOptions_t *) searchOptions
{
  self = [super init];
  __merchantId = [merchantId retain_stub];
  __merchantId_isset = YES;
  __searchOptions = [searchOptions retain_stub];
  __searchOptions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"merchantId"])
  {
    __merchantId = [[decoder decodeObjectForKey: @"merchantId"] retain_stub];
    __merchantId_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchOptions"])
  {
    __searchOptions = [[decoder decodeObjectForKey: @"searchOptions"] retain_stub];
    __searchOptions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__merchantId_isset)
  {
    [encoder encodeObject: __merchantId forKey: @"merchantId"];
  }
  if (__searchOptions_isset)
  {
    [encoder encodeObject: __searchOptions forKey: @"searchOptions"];
  }
}

- (void) dealloc
{
  [__merchantId release_stub];
  [__searchOptions release_stub];
  [super dealloc_stub];
}

- (NSString *) merchantId {
  return [[__merchantId retain_stub] autorelease_stub];
}

- (void) setMerchantId: (NSString *) merchantId {
  [merchantId retain_stub];
  [__merchantId release_stub];
  __merchantId = merchantId;
  __merchantId_isset = YES;
}

- (BOOL) merchantIdIsSet {
  return __merchantId_isset;
}

- (void) unsetMerchantId {
  [__merchantId release_stub];
  __merchantId = nil;
  __merchantId_isset = NO;
}

- (SearchOptions_t *) searchOptions {
  return [[__searchOptions retain_stub] autorelease_stub];
}

- (void) setSearchOptions: (SearchOptions_t *) searchOptions {
  [searchOptions retain_stub];
  [__searchOptions release_stub];
  __searchOptions = searchOptions;
  __searchOptions_isset = YES;
}

- (BOOL) searchOptionsIsSet {
  return __searchOptions_isset;
}

- (void) unsetSearchOptions {
  [__searchOptions release_stub];
  __searchOptions = nil;
  __searchOptions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMerchantId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          SearchOptions_t *fieldValue = [[SearchOptions_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSearchOptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getDealAcquires_args"];
  if (__merchantId_isset) {
    if (__merchantId != nil) {
      [outProtocol writeFieldBeginWithName: @"merchantId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __merchantId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__searchOptions_isset) {
    if (__searchOptions != nil) {
      [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 2];
      [__searchOptions write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getDealAcquires_args("];
  [ms appendString: @"merchantId:"];
  [ms appendFormat: @"\"%@\"", __merchantId];
  [ms appendString: @",searchOptions:"];
  [ms appendFormat: @"%@", __searchOptions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetDealAcquires_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetDealAcquires_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            DealAcquire_t *_elem27 = [[DealAcquire_t alloc] init];
            [_elem27 read: inProtocol];
            [fieldValue addObject: _elem27];
            [_elem27 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDealAcquires_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i29;
        for (i29 = 0; i29 < [__success count]; i29++)
        {
          [[__success objectAtIndex: i29] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetDealAcquires_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface redeem_args : NSObject <NSCoding> {
  NSString * __dealAcquireId;
  Location_t * __location;

  BOOL __dealAcquireId_isset;
  BOOL __location_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=dealAcquireId, setter=setDealAcquireId:) NSString * dealAcquireId;
@property (nonatomic, retain, getter=location, setter=setLocation:) Location_t * location;
#endif

- (id) init;
- (id) initWithDealAcquireId: (NSString *) dealAcquireId location: (Location_t *) location;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) dealAcquireId;
- (void) setDealAcquireId: (NSString *) dealAcquireId;
#endif
- (BOOL) dealAcquireIdIsSet;

#if !__has_feature(objc_arc)
- (Location_t *) location;
- (void) setLocation: (Location_t *) location;
#endif
- (BOOL) locationIsSet;

@end

@implementation redeem_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealAcquireId: (NSString *) dealAcquireId location: (Location_t *) location
{
  self = [super init];
  __dealAcquireId = [dealAcquireId retain_stub];
  __dealAcquireId_isset = YES;
  __location = [location retain_stub];
  __location_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealAcquireId"])
  {
    __dealAcquireId = [[decoder decodeObjectForKey: @"dealAcquireId"] retain_stub];
    __dealAcquireId_isset = YES;
  }
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain_stub];
    __location_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealAcquireId_isset)
  {
    [encoder encodeObject: __dealAcquireId forKey: @"dealAcquireId"];
  }
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
}

- (void) dealloc
{
  [__dealAcquireId release_stub];
  [__location release_stub];
  [super dealloc_stub];
}

- (NSString *) dealAcquireId {
  return [[__dealAcquireId retain_stub] autorelease_stub];
}

- (void) setDealAcquireId: (NSString *) dealAcquireId {
  [dealAcquireId retain_stub];
  [__dealAcquireId release_stub];
  __dealAcquireId = dealAcquireId;
  __dealAcquireId_isset = YES;
}

- (BOOL) dealAcquireIdIsSet {
  return __dealAcquireId_isset;
}

- (void) unsetDealAcquireId {
  [__dealAcquireId release_stub];
  __dealAcquireId = nil;
  __dealAcquireId_isset = NO;
}

- (Location_t *) location {
  return [[__location retain_stub] autorelease_stub];
}

- (void) setLocation: (Location_t *) location {
  [location retain_stub];
  [__location release_stub];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release_stub];
  __location = nil;
  __location_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealAcquireId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Location_t *fieldValue = [[Location_t alloc] init];
          [fieldValue read: inProtocol];
          [self setLocation: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"redeem_args"];
  if (__dealAcquireId_isset) {
    if (__dealAcquireId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealAcquireId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealAcquireId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 2];
      [__location write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"redeem_args("];
  [ms appendString: @"dealAcquireId:"];
  [ms appendFormat: @"\"%@\"", __dealAcquireId];
  [ms appendString: @",location:"];
  [ms appendFormat: @"%@", __location];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Redeem_result : NSObject <NSCoding> {
  NSString * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation Redeem_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Redeem_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Redeem_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getDealOffers_args : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getDealOffers_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getDealOffers_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getDealOffers_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetDealOffers_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetDealOffers_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size30;
          [inProtocol readListBeginReturningElementType: NULL size: &_size30];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            DealOffer_t *_elem32 = [[DealOffer_t alloc] init];
            [_elem32 read: inProtocol];
            [fieldValue addObject: _elem32];
            [_elem32 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDealOffers_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i34;
        for (i34 = 0; i34 < [__success count]; i34++)
        {
          [[__success objectAtIndex: i34] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetDealOffers_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface activateCode_args : NSObject <NSCoding> {
  NSString * __dealOfferid;
  NSString * __code;

  BOOL __dealOfferid_isset;
  BOOL __code_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=dealOfferid, setter=setDealOfferid:) NSString * dealOfferid;
@property (nonatomic, retain, getter=code, setter=setCode:) NSString * code;
#endif

- (id) init;
- (id) initWithDealOfferid: (NSString *) dealOfferid code: (NSString *) code;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) dealOfferid;
- (void) setDealOfferid: (NSString *) dealOfferid;
#endif
- (BOOL) dealOfferidIsSet;

#if !__has_feature(objc_arc)
- (NSString *) code;
- (void) setCode: (NSString *) code;
#endif
- (BOOL) codeIsSet;

@end

@implementation activateCode_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealOfferid: (NSString *) dealOfferid code: (NSString *) code
{
  self = [super init];
  __dealOfferid = [dealOfferid retain_stub];
  __dealOfferid_isset = YES;
  __code = [code retain_stub];
  __code_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealOfferid"])
  {
    __dealOfferid = [[decoder decodeObjectForKey: @"dealOfferid"] retain_stub];
    __dealOfferid_isset = YES;
  }
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [[decoder decodeObjectForKey: @"code"] retain_stub];
    __code_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealOfferid_isset)
  {
    [encoder encodeObject: __dealOfferid forKey: @"dealOfferid"];
  }
  if (__code_isset)
  {
    [encoder encodeObject: __code forKey: @"code"];
  }
}

- (void) dealloc
{
  [__dealOfferid release_stub];
  [__code release_stub];
  [super dealloc_stub];
}

- (NSString *) dealOfferid {
  return [[__dealOfferid retain_stub] autorelease_stub];
}

- (void) setDealOfferid: (NSString *) dealOfferid {
  [dealOfferid retain_stub];
  [__dealOfferid release_stub];
  __dealOfferid = dealOfferid;
  __dealOfferid_isset = YES;
}

- (BOOL) dealOfferidIsSet {
  return __dealOfferid_isset;
}

- (void) unsetDealOfferid {
  [__dealOfferid release_stub];
  __dealOfferid = nil;
  __dealOfferid_isset = NO;
}

- (NSString *) code {
  return [[__code retain_stub] autorelease_stub];
}

- (void) setCode: (NSString *) code {
  [code retain_stub];
  [__code release_stub];
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  [__code release_stub];
  __code = nil;
  __code_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealOfferid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"activateCode_args"];
  if (__dealOfferid_isset) {
    if (__dealOfferid != nil) {
      [outProtocol writeFieldBeginWithName: @"dealOfferid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealOfferid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__code_isset) {
    if (__code != nil) {
      [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __code];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"activateCode_args("];
  [ms appendString: @"dealOfferid:"];
  [ms appendFormat: @"\"%@\"", __dealOfferid];
  [ms appendString: @",code:"];
  [ms appendFormat: @"\"%@\"", __code];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ActivateCode_result : NSObject <NSCoding> {
  ServiceException_t * __error;

  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithError: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation ActivateCode_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithError: (ServiceException_t *) error
{
  self = [super init];
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__error release_stub];
  [super dealloc_stub];
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActivateCode_result"];

  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ActivateCode_result("];
  [ms appendString: @"error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getDealOffer_args : NSObject <NSCoding> {
  NSString * __dealOfferId;

  BOOL __dealOfferId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=dealOfferId, setter=setDealOfferId:) NSString * dealOfferId;
#endif

- (id) init;
- (id) initWithDealOfferId: (NSString *) dealOfferId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) dealOfferId;
- (void) setDealOfferId: (NSString *) dealOfferId;
#endif
- (BOOL) dealOfferIdIsSet;

@end

@implementation getDealOffer_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealOfferId: (NSString *) dealOfferId
{
  self = [super init];
  __dealOfferId = [dealOfferId retain_stub];
  __dealOfferId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealOfferId"])
  {
    __dealOfferId = [[decoder decodeObjectForKey: @"dealOfferId"] retain_stub];
    __dealOfferId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealOfferId_isset)
  {
    [encoder encodeObject: __dealOfferId forKey: @"dealOfferId"];
  }
}

- (void) dealloc
{
  [__dealOfferId release_stub];
  [super dealloc_stub];
}

- (NSString *) dealOfferId {
  return [[__dealOfferId retain_stub] autorelease_stub];
}

- (void) setDealOfferId: (NSString *) dealOfferId {
  [dealOfferId retain_stub];
  [__dealOfferId release_stub];
  __dealOfferId = dealOfferId;
  __dealOfferId_isset = YES;
}

- (BOOL) dealOfferIdIsSet {
  return __dealOfferId_isset;
}

- (void) unsetDealOfferId {
  [__dealOfferId release_stub];
  __dealOfferId = nil;
  __dealOfferId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealOfferId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getDealOffer_args"];
  if (__dealOfferId_isset) {
    if (__dealOfferId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealOfferId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getDealOffer_args("];
  [ms appendString: @"dealOfferId:"];
  [ms appendFormat: @"\"%@\"", __dealOfferId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetDealOffer_result : NSObject <NSCoding> {
  DealOffer_t * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) DealOffer_t * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (DealOffer_t *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (DealOffer_t *) success;
- (void) setSuccess: (DealOffer_t *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetDealOffer_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (DealOffer_t *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (DealOffer_t *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (DealOffer_t *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          DealOffer_t *fieldValue = [[DealOffer_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDealOffer_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetDealOffer_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getDealsByDealOfferId_args : NSObject <NSCoding> {
  NSString * __dealOfferId;
  SearchOptions_t * __searchOptions;

  BOOL __dealOfferId_isset;
  BOOL __searchOptions_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=dealOfferId, setter=setDealOfferId:) NSString * dealOfferId;
@property (nonatomic, retain, getter=searchOptions, setter=setSearchOptions:) SearchOptions_t * searchOptions;
#endif

- (id) init;
- (id) initWithDealOfferId: (NSString *) dealOfferId searchOptions: (SearchOptions_t *) searchOptions;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) dealOfferId;
- (void) setDealOfferId: (NSString *) dealOfferId;
#endif
- (BOOL) dealOfferIdIsSet;

#if !__has_feature(objc_arc)
- (SearchOptions_t *) searchOptions;
- (void) setSearchOptions: (SearchOptions_t *) searchOptions;
#endif
- (BOOL) searchOptionsIsSet;

@end

@implementation getDealsByDealOfferId_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealOfferId: (NSString *) dealOfferId searchOptions: (SearchOptions_t *) searchOptions
{
  self = [super init];
  __dealOfferId = [dealOfferId retain_stub];
  __dealOfferId_isset = YES;
  __searchOptions = [searchOptions retain_stub];
  __searchOptions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealOfferId"])
  {
    __dealOfferId = [[decoder decodeObjectForKey: @"dealOfferId"] retain_stub];
    __dealOfferId_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchOptions"])
  {
    __searchOptions = [[decoder decodeObjectForKey: @"searchOptions"] retain_stub];
    __searchOptions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealOfferId_isset)
  {
    [encoder encodeObject: __dealOfferId forKey: @"dealOfferId"];
  }
  if (__searchOptions_isset)
  {
    [encoder encodeObject: __searchOptions forKey: @"searchOptions"];
  }
}

- (void) dealloc
{
  [__dealOfferId release_stub];
  [__searchOptions release_stub];
  [super dealloc_stub];
}

- (NSString *) dealOfferId {
  return [[__dealOfferId retain_stub] autorelease_stub];
}

- (void) setDealOfferId: (NSString *) dealOfferId {
  [dealOfferId retain_stub];
  [__dealOfferId release_stub];
  __dealOfferId = dealOfferId;
  __dealOfferId_isset = YES;
}

- (BOOL) dealOfferIdIsSet {
  return __dealOfferId_isset;
}

- (void) unsetDealOfferId {
  [__dealOfferId release_stub];
  __dealOfferId = nil;
  __dealOfferId_isset = NO;
}

- (SearchOptions_t *) searchOptions {
  return [[__searchOptions retain_stub] autorelease_stub];
}

- (void) setSearchOptions: (SearchOptions_t *) searchOptions {
  [searchOptions retain_stub];
  [__searchOptions release_stub];
  __searchOptions = searchOptions;
  __searchOptions_isset = YES;
}

- (BOOL) searchOptionsIsSet {
  return __searchOptions_isset;
}

- (void) unsetSearchOptions {
  [__searchOptions release_stub];
  __searchOptions = nil;
  __searchOptions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealOfferId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          SearchOptions_t *fieldValue = [[SearchOptions_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSearchOptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getDealsByDealOfferId_args"];
  if (__dealOfferId_isset) {
    if (__dealOfferId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealOfferId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__searchOptions_isset) {
    if (__searchOptions != nil) {
      [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 2];
      [__searchOptions write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getDealsByDealOfferId_args("];
  [ms appendString: @"dealOfferId:"];
  [ms appendFormat: @"\"%@\"", __dealOfferId];
  [ms appendString: @",searchOptions:"];
  [ms appendFormat: @"%@", __searchOptions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetDealsByDealOfferId_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetDealsByDealOfferId_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size35;
          [inProtocol readListBeginReturningElementType: NULL size: &_size35];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            Deal_t *_elem37 = [[Deal_t alloc] init];
            [_elem37 read: inProtocol];
            [fieldValue addObject: _elem37];
            [_elem37 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDealsByDealOfferId_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i39;
        for (i39 = 0; i39 < [__success count]; i39++)
        {
          [[__success objectAtIndex: i39] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetDealsByDealOfferId_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface purchaseDealOffer_args : NSObject <NSCoding> {
  NSString * __dealOfferId;

  BOOL __dealOfferId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=dealOfferId, setter=setDealOfferId:) NSString * dealOfferId;
#endif

- (id) init;
- (id) initWithDealOfferId: (NSString *) dealOfferId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) dealOfferId;
- (void) setDealOfferId: (NSString *) dealOfferId;
#endif
- (BOOL) dealOfferIdIsSet;

@end

@implementation purchaseDealOffer_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealOfferId: (NSString *) dealOfferId
{
  self = [super init];
  __dealOfferId = [dealOfferId retain_stub];
  __dealOfferId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealOfferId"])
  {
    __dealOfferId = [[decoder decodeObjectForKey: @"dealOfferId"] retain_stub];
    __dealOfferId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealOfferId_isset)
  {
    [encoder encodeObject: __dealOfferId forKey: @"dealOfferId"];
  }
}

- (void) dealloc
{
  [__dealOfferId release_stub];
  [super dealloc_stub];
}

- (NSString *) dealOfferId {
  return [[__dealOfferId retain_stub] autorelease_stub];
}

- (void) setDealOfferId: (NSString *) dealOfferId {
  [dealOfferId retain_stub];
  [__dealOfferId release_stub];
  __dealOfferId = dealOfferId;
  __dealOfferId_isset = YES;
}

- (BOOL) dealOfferIdIsSet {
  return __dealOfferId_isset;
}

- (void) unsetDealOfferId {
  [__dealOfferId release_stub];
  __dealOfferId = nil;
  __dealOfferId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealOfferId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"purchaseDealOffer_args"];
  if (__dealOfferId_isset) {
    if (__dealOfferId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealOfferId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"purchaseDealOffer_args("];
  [ms appendString: @"dealOfferId:"];
  [ms appendFormat: @"\"%@\"", __dealOfferId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface PurchaseDealOffer_result : NSObject <NSCoding> {
  ServiceException_t * __error;

  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithError: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation PurchaseDealOffer_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithError: (ServiceException_t *) error
{
  self = [super init];
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__error release_stub];
  [super dealloc_stub];
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PurchaseDealOffer_result"];

  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PurchaseDealOffer_result("];
  [ms appendString: @"error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getMerchantsWithin_args : NSObject <NSCoding> {
  Location_t * __location;
  int32_t __maxMiles;
  SearchOptions_t * __searchOptions;

  BOOL __location_isset;
  BOOL __maxMiles_isset;
  BOOL __searchOptions_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=location, setter=setLocation:) Location_t * location;
@property (nonatomic, getter=maxMiles, setter=setMaxMiles:) int32_t maxMiles;
@property (nonatomic, retain, getter=searchOptions, setter=setSearchOptions:) SearchOptions_t * searchOptions;
#endif

- (id) init;
- (id) initWithLocation: (Location_t *) location maxMiles: (int32_t) maxMiles searchOptions: (SearchOptions_t *) searchOptions;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (Location_t *) location;
- (void) setLocation: (Location_t *) location;
#endif
- (BOOL) locationIsSet;

#if !__has_feature(objc_arc)
- (int32_t) maxMiles;
- (void) setMaxMiles: (int32_t) maxMiles;
#endif
- (BOOL) maxMilesIsSet;

#if !__has_feature(objc_arc)
- (SearchOptions_t *) searchOptions;
- (void) setSearchOptions: (SearchOptions_t *) searchOptions;
#endif
- (BOOL) searchOptionsIsSet;

@end

@implementation getMerchantsWithin_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithLocation: (Location_t *) location maxMiles: (int32_t) maxMiles searchOptions: (SearchOptions_t *) searchOptions
{
  self = [super init];
  __location = [location retain_stub];
  __location_isset = YES;
  __maxMiles = maxMiles;
  __maxMiles_isset = YES;
  __searchOptions = [searchOptions retain_stub];
  __searchOptions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain_stub];
    __location_isset = YES;
  }
  if ([decoder containsValueForKey: @"maxMiles"])
  {
    __maxMiles = [decoder decodeInt32ForKey: @"maxMiles"];
    __maxMiles_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchOptions"])
  {
    __searchOptions = [[decoder decodeObjectForKey: @"searchOptions"] retain_stub];
    __searchOptions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
  if (__maxMiles_isset)
  {
    [encoder encodeInt32: __maxMiles forKey: @"maxMiles"];
  }
  if (__searchOptions_isset)
  {
    [encoder encodeObject: __searchOptions forKey: @"searchOptions"];
  }
}

- (void) dealloc
{
  [__location release_stub];
  [__searchOptions release_stub];
  [super dealloc_stub];
}

- (Location_t *) location {
  return [[__location retain_stub] autorelease_stub];
}

- (void) setLocation: (Location_t *) location {
  [location retain_stub];
  [__location release_stub];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release_stub];
  __location = nil;
  __location_isset = NO;
}

- (int32_t) maxMiles {
  return __maxMiles;
}

- (void) setMaxMiles: (int32_t) maxMiles {
  __maxMiles = maxMiles;
  __maxMiles_isset = YES;
}

- (BOOL) maxMilesIsSet {
  return __maxMiles_isset;
}

- (void) unsetMaxMiles {
  __maxMiles_isset = NO;
}

- (SearchOptions_t *) searchOptions {
  return [[__searchOptions retain_stub] autorelease_stub];
}

- (void) setSearchOptions: (SearchOptions_t *) searchOptions {
  [searchOptions retain_stub];
  [__searchOptions release_stub];
  __searchOptions = searchOptions;
  __searchOptions_isset = YES;
}

- (BOOL) searchOptionsIsSet {
  return __searchOptions_isset;
}

- (void) unsetSearchOptions {
  [__searchOptions release_stub];
  __searchOptions = nil;
  __searchOptions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Location_t *fieldValue = [[Location_t alloc] init];
          [fieldValue read: inProtocol];
          [self setLocation: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMaxMiles: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          SearchOptions_t *fieldValue = [[SearchOptions_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSearchOptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMerchantsWithin_args"];
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 1];
      [__location write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__maxMiles_isset) {
    [outProtocol writeFieldBeginWithName: @"maxMiles" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __maxMiles];
    [outProtocol writeFieldEnd];
  }
  if (__searchOptions_isset) {
    if (__searchOptions != nil) {
      [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 3];
      [__searchOptions write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getMerchantsWithin_args("];
  [ms appendString: @"location:"];
  [ms appendFormat: @"%@", __location];
  [ms appendString: @",maxMiles:"];
  [ms appendFormat: @"%i", __maxMiles];
  [ms appendString: @",searchOptions:"];
  [ms appendFormat: @"%@", __searchOptions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMerchantsWithin_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetMerchantsWithin_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size40;
          [inProtocol readListBeginReturningElementType: NULL size: &_size40];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
          int _i41;
          for (_i41 = 0; _i41 < _size40; ++_i41)
          {
            Merchant_t *_elem42 = [[Merchant_t alloc] init];
            [_elem42 read: inProtocol];
            [fieldValue addObject: _elem42];
            [_elem42 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMerchantsWithin_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i44;
        for (i44 = 0; i44 < [__success count]; i44++)
        {
          [[__success objectAtIndex: i44] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMerchantsWithin_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface addFavoriteMerchant_args : NSObject <NSCoding> {
  NSString * __merchantId;

  BOOL __merchantId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=merchantId, setter=setMerchantId:) NSString * merchantId;
#endif

- (id) init;
- (id) initWithMerchantId: (NSString *) merchantId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) merchantId;
- (void) setMerchantId: (NSString *) merchantId;
#endif
- (BOOL) merchantIdIsSet;

@end

@implementation addFavoriteMerchant_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMerchantId: (NSString *) merchantId
{
  self = [super init];
  __merchantId = [merchantId retain_stub];
  __merchantId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"merchantId"])
  {
    __merchantId = [[decoder decodeObjectForKey: @"merchantId"] retain_stub];
    __merchantId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__merchantId_isset)
  {
    [encoder encodeObject: __merchantId forKey: @"merchantId"];
  }
}

- (void) dealloc
{
  [__merchantId release_stub];
  [super dealloc_stub];
}

- (NSString *) merchantId {
  return [[__merchantId retain_stub] autorelease_stub];
}

- (void) setMerchantId: (NSString *) merchantId {
  [merchantId retain_stub];
  [__merchantId release_stub];
  __merchantId = merchantId;
  __merchantId_isset = YES;
}

- (BOOL) merchantIdIsSet {
  return __merchantId_isset;
}

- (void) unsetMerchantId {
  [__merchantId release_stub];
  __merchantId = nil;
  __merchantId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMerchantId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"addFavoriteMerchant_args"];
  if (__merchantId_isset) {
    if (__merchantId != nil) {
      [outProtocol writeFieldBeginWithName: @"merchantId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __merchantId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"addFavoriteMerchant_args("];
  [ms appendString: @"merchantId:"];
  [ms appendFormat: @"\"%@\"", __merchantId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AddFavoriteMerchant_result : NSObject <NSCoding> {
  ServiceException_t * __error;

  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithError: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation AddFavoriteMerchant_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithError: (ServiceException_t *) error
{
  self = [super init];
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__error release_stub];
  [super dealloc_stub];
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddFavoriteMerchant_result"];

  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddFavoriteMerchant_result("];
  [ms appendString: @"error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface removeFavoriteMerchant_args : NSObject <NSCoding> {
  NSString * __merchantId;

  BOOL __merchantId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=merchantId, setter=setMerchantId:) NSString * merchantId;
#endif

- (id) init;
- (id) initWithMerchantId: (NSString *) merchantId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) merchantId;
- (void) setMerchantId: (NSString *) merchantId;
#endif
- (BOOL) merchantIdIsSet;

@end

@implementation removeFavoriteMerchant_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMerchantId: (NSString *) merchantId
{
  self = [super init];
  __merchantId = [merchantId retain_stub];
  __merchantId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"merchantId"])
  {
    __merchantId = [[decoder decodeObjectForKey: @"merchantId"] retain_stub];
    __merchantId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__merchantId_isset)
  {
    [encoder encodeObject: __merchantId forKey: @"merchantId"];
  }
}

- (void) dealloc
{
  [__merchantId release_stub];
  [super dealloc_stub];
}

- (NSString *) merchantId {
  return [[__merchantId retain_stub] autorelease_stub];
}

- (void) setMerchantId: (NSString *) merchantId {
  [merchantId retain_stub];
  [__merchantId release_stub];
  __merchantId = merchantId;
  __merchantId_isset = YES;
}

- (BOOL) merchantIdIsSet {
  return __merchantId_isset;
}

- (void) unsetMerchantId {
  [__merchantId release_stub];
  __merchantId = nil;
  __merchantId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMerchantId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"removeFavoriteMerchant_args"];
  if (__merchantId_isset) {
    if (__merchantId != nil) {
      [outProtocol writeFieldBeginWithName: @"merchantId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __merchantId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"removeFavoriteMerchant_args("];
  [ms appendString: @"merchantId:"];
  [ms appendFormat: @"\"%@\"", __merchantId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RemoveFavoriteMerchant_result : NSObject <NSCoding> {
  ServiceException_t * __error;

  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithError: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation RemoveFavoriteMerchant_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithError: (ServiceException_t *) error
{
  self = [super init];
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__error release_stub];
  [super dealloc_stub];
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RemoveFavoriteMerchant_result"];

  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RemoveFavoriteMerchant_result("];
  [ms appendString: @"error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getFavoriteMerchants_args : NSObject <NSCoding> {
  SearchOptions_t * __searchOptions;

  BOOL __searchOptions_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=searchOptions, setter=setSearchOptions:) SearchOptions_t * searchOptions;
#endif

- (id) init;
- (id) initWithSearchOptions: (SearchOptions_t *) searchOptions;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (SearchOptions_t *) searchOptions;
- (void) setSearchOptions: (SearchOptions_t *) searchOptions;
#endif
- (BOOL) searchOptionsIsSet;

@end

@implementation getFavoriteMerchants_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSearchOptions: (SearchOptions_t *) searchOptions
{
  self = [super init];
  __searchOptions = [searchOptions retain_stub];
  __searchOptions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"searchOptions"])
  {
    __searchOptions = [[decoder decodeObjectForKey: @"searchOptions"] retain_stub];
    __searchOptions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__searchOptions_isset)
  {
    [encoder encodeObject: __searchOptions forKey: @"searchOptions"];
  }
}

- (void) dealloc
{
  [__searchOptions release_stub];
  [super dealloc_stub];
}

- (SearchOptions_t *) searchOptions {
  return [[__searchOptions retain_stub] autorelease_stub];
}

- (void) setSearchOptions: (SearchOptions_t *) searchOptions {
  [searchOptions retain_stub];
  [__searchOptions release_stub];
  __searchOptions = searchOptions;
  __searchOptions_isset = YES;
}

- (BOOL) searchOptionsIsSet {
  return __searchOptions_isset;
}

- (void) unsetSearchOptions {
  [__searchOptions release_stub];
  __searchOptions = nil;
  __searchOptions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SearchOptions_t *fieldValue = [[SearchOptions_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSearchOptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getFavoriteMerchants_args"];
  if (__searchOptions_isset) {
    if (__searchOptions != nil) {
      [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 1];
      [__searchOptions write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getFavoriteMerchants_args("];
  [ms appendString: @"searchOptions:"];
  [ms appendFormat: @"%@", __searchOptions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetFavoriteMerchants_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetFavoriteMerchants_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size45;
          [inProtocol readListBeginReturningElementType: NULL size: &_size45];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size45];
          int _i46;
          for (_i46 = 0; _i46 < _size45; ++_i46)
          {
            Merchant_t *_elem47 = [[Merchant_t alloc] init];
            [_elem47 read: inProtocol];
            [fieldValue addObject: _elem47];
            [_elem47 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFavoriteMerchants_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i49;
        for (i49 = 0; i49 < [__success count]; i49++)
        {
          [[__success objectAtIndex: i49] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetFavoriteMerchants_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getCategories_args : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getCategories_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getCategories_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getCategories_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetCategories_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetCategories_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size50;
          [inProtocol readListBeginReturningElementType: NULL size: &_size50];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size50];
          int _i51;
          for (_i51 = 0; _i51 < _size50; ++_i51)
          {
            Category_t *_elem52 = [[Category_t alloc] init];
            [_elem52 read: inProtocol];
            [fieldValue addObject: _elem52];
            [_elem52 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetCategories_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i54;
        for (i54 = 0; i54 < [__success count]; i54++)
        {
          [[__success objectAtIndex: i54] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetCategories_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface giftToFacebook_args : NSObject <NSCoding> {
  NSString * __dealAcquireId;
  NSString * __facebookId;
  NSString * __receipientName;

  BOOL __dealAcquireId_isset;
  BOOL __facebookId_isset;
  BOOL __receipientName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=dealAcquireId, setter=setDealAcquireId:) NSString * dealAcquireId;
@property (nonatomic, retain, getter=facebookId, setter=setFacebookId:) NSString * facebookId;
@property (nonatomic, retain, getter=receipientName, setter=setReceipientName:) NSString * receipientName;
#endif

- (id) init;
- (id) initWithDealAcquireId: (NSString *) dealAcquireId facebookId: (NSString *) facebookId receipientName: (NSString *) receipientName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) dealAcquireId;
- (void) setDealAcquireId: (NSString *) dealAcquireId;
#endif
- (BOOL) dealAcquireIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) facebookId;
- (void) setFacebookId: (NSString *) facebookId;
#endif
- (BOOL) facebookIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) receipientName;
- (void) setReceipientName: (NSString *) receipientName;
#endif
- (BOOL) receipientNameIsSet;

@end

@implementation giftToFacebook_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealAcquireId: (NSString *) dealAcquireId facebookId: (NSString *) facebookId receipientName: (NSString *) receipientName
{
  self = [super init];
  __dealAcquireId = [dealAcquireId retain_stub];
  __dealAcquireId_isset = YES;
  __facebookId = [facebookId retain_stub];
  __facebookId_isset = YES;
  __receipientName = [receipientName retain_stub];
  __receipientName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealAcquireId"])
  {
    __dealAcquireId = [[decoder decodeObjectForKey: @"dealAcquireId"] retain_stub];
    __dealAcquireId_isset = YES;
  }
  if ([decoder containsValueForKey: @"facebookId"])
  {
    __facebookId = [[decoder decodeObjectForKey: @"facebookId"] retain_stub];
    __facebookId_isset = YES;
  }
  if ([decoder containsValueForKey: @"receipientName"])
  {
    __receipientName = [[decoder decodeObjectForKey: @"receipientName"] retain_stub];
    __receipientName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealAcquireId_isset)
  {
    [encoder encodeObject: __dealAcquireId forKey: @"dealAcquireId"];
  }
  if (__facebookId_isset)
  {
    [encoder encodeObject: __facebookId forKey: @"facebookId"];
  }
  if (__receipientName_isset)
  {
    [encoder encodeObject: __receipientName forKey: @"receipientName"];
  }
}

- (void) dealloc
{
  [__dealAcquireId release_stub];
  [__facebookId release_stub];
  [__receipientName release_stub];
  [super dealloc_stub];
}

- (NSString *) dealAcquireId {
  return [[__dealAcquireId retain_stub] autorelease_stub];
}

- (void) setDealAcquireId: (NSString *) dealAcquireId {
  [dealAcquireId retain_stub];
  [__dealAcquireId release_stub];
  __dealAcquireId = dealAcquireId;
  __dealAcquireId_isset = YES;
}

- (BOOL) dealAcquireIdIsSet {
  return __dealAcquireId_isset;
}

- (void) unsetDealAcquireId {
  [__dealAcquireId release_stub];
  __dealAcquireId = nil;
  __dealAcquireId_isset = NO;
}

- (NSString *) facebookId {
  return [[__facebookId retain_stub] autorelease_stub];
}

- (void) setFacebookId: (NSString *) facebookId {
  [facebookId retain_stub];
  [__facebookId release_stub];
  __facebookId = facebookId;
  __facebookId_isset = YES;
}

- (BOOL) facebookIdIsSet {
  return __facebookId_isset;
}

- (void) unsetFacebookId {
  [__facebookId release_stub];
  __facebookId = nil;
  __facebookId_isset = NO;
}

- (NSString *) receipientName {
  return [[__receipientName retain_stub] autorelease_stub];
}

- (void) setReceipientName: (NSString *) receipientName {
  [receipientName retain_stub];
  [__receipientName release_stub];
  __receipientName = receipientName;
  __receipientName_isset = YES;
}

- (BOOL) receipientNameIsSet {
  return __receipientName_isset;
}

- (void) unsetReceipientName {
  [__receipientName release_stub];
  __receipientName = nil;
  __receipientName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealAcquireId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFacebookId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReceipientName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"giftToFacebook_args"];
  if (__dealAcquireId_isset) {
    if (__dealAcquireId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealAcquireId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealAcquireId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__facebookId_isset) {
    if (__facebookId != nil) {
      [outProtocol writeFieldBeginWithName: @"facebookId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __facebookId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__receipientName_isset) {
    if (__receipientName != nil) {
      [outProtocol writeFieldBeginWithName: @"receipientName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __receipientName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"giftToFacebook_args("];
  [ms appendString: @"dealAcquireId:"];
  [ms appendFormat: @"\"%@\"", __dealAcquireId];
  [ms appendString: @",facebookId:"];
  [ms appendFormat: @"\"%@\"", __facebookId];
  [ms appendString: @",receipientName:"];
  [ms appendFormat: @"\"%@\"", __receipientName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GiftToFacebook_result : NSObject <NSCoding> {
  NSString * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GiftToFacebook_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GiftToFacebook_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GiftToFacebook_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface giftToEmail_args : NSObject <NSCoding> {
  NSString * __dealAcquireId;
  NSString * __email;
  NSString * __receipientName;

  BOOL __dealAcquireId_isset;
  BOOL __email_isset;
  BOOL __receipientName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=dealAcquireId, setter=setDealAcquireId:) NSString * dealAcquireId;
@property (nonatomic, retain, getter=email, setter=setEmail:) NSString * email;
@property (nonatomic, retain, getter=receipientName, setter=setReceipientName:) NSString * receipientName;
#endif

- (id) init;
- (id) initWithDealAcquireId: (NSString *) dealAcquireId email: (NSString *) email receipientName: (NSString *) receipientName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) dealAcquireId;
- (void) setDealAcquireId: (NSString *) dealAcquireId;
#endif
- (BOOL) dealAcquireIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) email;
- (void) setEmail: (NSString *) email;
#endif
- (BOOL) emailIsSet;

#if !__has_feature(objc_arc)
- (NSString *) receipientName;
- (void) setReceipientName: (NSString *) receipientName;
#endif
- (BOOL) receipientNameIsSet;

@end

@implementation giftToEmail_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealAcquireId: (NSString *) dealAcquireId email: (NSString *) email receipientName: (NSString *) receipientName
{
  self = [super init];
  __dealAcquireId = [dealAcquireId retain_stub];
  __dealAcquireId_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __receipientName = [receipientName retain_stub];
  __receipientName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealAcquireId"])
  {
    __dealAcquireId = [[decoder decodeObjectForKey: @"dealAcquireId"] retain_stub];
    __dealAcquireId_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"receipientName"])
  {
    __receipientName = [[decoder decodeObjectForKey: @"receipientName"] retain_stub];
    __receipientName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealAcquireId_isset)
  {
    [encoder encodeObject: __dealAcquireId forKey: @"dealAcquireId"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__receipientName_isset)
  {
    [encoder encodeObject: __receipientName forKey: @"receipientName"];
  }
}

- (void) dealloc
{
  [__dealAcquireId release_stub];
  [__email release_stub];
  [__receipientName release_stub];
  [super dealloc_stub];
}

- (NSString *) dealAcquireId {
  return [[__dealAcquireId retain_stub] autorelease_stub];
}

- (void) setDealAcquireId: (NSString *) dealAcquireId {
  [dealAcquireId retain_stub];
  [__dealAcquireId release_stub];
  __dealAcquireId = dealAcquireId;
  __dealAcquireId_isset = YES;
}

- (BOOL) dealAcquireIdIsSet {
  return __dealAcquireId_isset;
}

- (void) unsetDealAcquireId {
  [__dealAcquireId release_stub];
  __dealAcquireId = nil;
  __dealAcquireId_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) receipientName {
  return [[__receipientName retain_stub] autorelease_stub];
}

- (void) setReceipientName: (NSString *) receipientName {
  [receipientName retain_stub];
  [__receipientName release_stub];
  __receipientName = receipientName;
  __receipientName_isset = YES;
}

- (BOOL) receipientNameIsSet {
  return __receipientName_isset;
}

- (void) unsetReceipientName {
  [__receipientName release_stub];
  __receipientName = nil;
  __receipientName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealAcquireId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReceipientName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"giftToEmail_args"];
  if (__dealAcquireId_isset) {
    if (__dealAcquireId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealAcquireId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealAcquireId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__receipientName_isset) {
    if (__receipientName != nil) {
      [outProtocol writeFieldBeginWithName: @"receipientName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __receipientName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"giftToEmail_args("];
  [ms appendString: @"dealAcquireId:"];
  [ms appendFormat: @"\"%@\"", __dealAcquireId];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",receipientName:"];
  [ms appendFormat: @"\"%@\"", __receipientName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GiftToEmail_result : NSObject <NSCoding> {
  NSString * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GiftToEmail_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GiftToEmail_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GiftToEmail_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getGift_args : NSObject <NSCoding> {
  NSString * __giftId;

  BOOL __giftId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=giftId, setter=setGiftId:) NSString * giftId;
#endif

- (id) init;
- (id) initWithGiftId: (NSString *) giftId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) giftId;
- (void) setGiftId: (NSString *) giftId;
#endif
- (BOOL) giftIdIsSet;

@end

@implementation getGift_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithGiftId: (NSString *) giftId
{
  self = [super init];
  __giftId = [giftId retain_stub];
  __giftId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"giftId"])
  {
    __giftId = [[decoder decodeObjectForKey: @"giftId"] retain_stub];
    __giftId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__giftId_isset)
  {
    [encoder encodeObject: __giftId forKey: @"giftId"];
  }
}

- (void) dealloc
{
  [__giftId release_stub];
  [super dealloc_stub];
}

- (NSString *) giftId {
  return [[__giftId retain_stub] autorelease_stub];
}

- (void) setGiftId: (NSString *) giftId {
  [giftId retain_stub];
  [__giftId release_stub];
  __giftId = giftId;
  __giftId_isset = YES;
}

- (BOOL) giftIdIsSet {
  return __giftId_isset;
}

- (void) unsetGiftId {
  [__giftId release_stub];
  __giftId = nil;
  __giftId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGiftId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getGift_args"];
  if (__giftId_isset) {
    if (__giftId != nil) {
      [outProtocol writeFieldBeginWithName: @"giftId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __giftId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getGift_args("];
  [ms appendString: @"giftId:"];
  [ms appendFormat: @"\"%@\"", __giftId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetGift_result : NSObject <NSCoding> {
  Gift_t * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Gift_t * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (Gift_t *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (Gift_t *) success;
- (void) setSuccess: (Gift_t *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetGift_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Gift_t *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (Gift_t *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Gift_t *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Gift_t *fieldValue = [[Gift_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetGift_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetGift_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface acceptGift_args : NSObject <NSCoding> {
  NSString * __giftId;

  BOOL __giftId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=giftId, setter=setGiftId:) NSString * giftId;
#endif

- (id) init;
- (id) initWithGiftId: (NSString *) giftId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) giftId;
- (void) setGiftId: (NSString *) giftId;
#endif
- (BOOL) giftIdIsSet;

@end

@implementation acceptGift_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithGiftId: (NSString *) giftId
{
  self = [super init];
  __giftId = [giftId retain_stub];
  __giftId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"giftId"])
  {
    __giftId = [[decoder decodeObjectForKey: @"giftId"] retain_stub];
    __giftId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__giftId_isset)
  {
    [encoder encodeObject: __giftId forKey: @"giftId"];
  }
}

- (void) dealloc
{
  [__giftId release_stub];
  [super dealloc_stub];
}

- (NSString *) giftId {
  return [[__giftId retain_stub] autorelease_stub];
}

- (void) setGiftId: (NSString *) giftId {
  [giftId retain_stub];
  [__giftId release_stub];
  __giftId = giftId;
  __giftId_isset = YES;
}

- (BOOL) giftIdIsSet {
  return __giftId_isset;
}

- (void) unsetGiftId {
  [__giftId release_stub];
  __giftId = nil;
  __giftId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGiftId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"acceptGift_args"];
  if (__giftId_isset) {
    if (__giftId != nil) {
      [outProtocol writeFieldBeginWithName: @"giftId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __giftId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"acceptGift_args("];
  [ms appendString: @"giftId:"];
  [ms appendFormat: @"\"%@\"", __giftId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AcceptGift_result : NSObject <NSCoding> {
  DealAcquire_t * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) DealAcquire_t * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (DealAcquire_t *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (DealAcquire_t *) success;
- (void) setSuccess: (DealAcquire_t *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation AcceptGift_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (DealAcquire_t *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (DealAcquire_t *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (DealAcquire_t *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          DealAcquire_t *fieldValue = [[DealAcquire_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AcceptGift_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AcceptGift_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface rejectGift_args : NSObject <NSCoding> {
  NSString * __giftId;

  BOOL __giftId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=giftId, setter=setGiftId:) NSString * giftId;
#endif

- (id) init;
- (id) initWithGiftId: (NSString *) giftId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) giftId;
- (void) setGiftId: (NSString *) giftId;
#endif
- (BOOL) giftIdIsSet;

@end

@implementation rejectGift_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithGiftId: (NSString *) giftId
{
  self = [super init];
  __giftId = [giftId retain_stub];
  __giftId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"giftId"])
  {
    __giftId = [[decoder decodeObjectForKey: @"giftId"] retain_stub];
    __giftId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__giftId_isset)
  {
    [encoder encodeObject: __giftId forKey: @"giftId"];
  }
}

- (void) dealloc
{
  [__giftId release_stub];
  [super dealloc_stub];
}

- (NSString *) giftId {
  return [[__giftId retain_stub] autorelease_stub];
}

- (void) setGiftId: (NSString *) giftId {
  [giftId retain_stub];
  [__giftId release_stub];
  __giftId = giftId;
  __giftId_isset = YES;
}

- (BOOL) giftIdIsSet {
  return __giftId_isset;
}

- (void) unsetGiftId {
  [__giftId release_stub];
  __giftId = nil;
  __giftId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGiftId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"rejectGift_args"];
  if (__giftId_isset) {
    if (__giftId != nil) {
      [outProtocol writeFieldBeginWithName: @"giftId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __giftId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"rejectGift_args("];
  [ms appendString: @"giftId:"];
  [ms appendFormat: @"\"%@\"", __giftId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RejectGift_result : NSObject <NSCoding> {
  ServiceException_t * __error;

  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithError: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation RejectGift_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithError: (ServiceException_t *) error
{
  self = [super init];
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__error release_stub];
  [super dealloc_stub];
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RejectGift_result"];

  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RejectGift_result("];
  [ms appendString: @"error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getActivities_args : NSObject <NSCoding> {
  SearchOptions_t * __searchOptions;

  BOOL __searchOptions_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=searchOptions, setter=setSearchOptions:) SearchOptions_t * searchOptions;
#endif

- (id) init;
- (id) initWithSearchOptions: (SearchOptions_t *) searchOptions;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (SearchOptions_t *) searchOptions;
- (void) setSearchOptions: (SearchOptions_t *) searchOptions;
#endif
- (BOOL) searchOptionsIsSet;

@end

@implementation getActivities_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSearchOptions: (SearchOptions_t *) searchOptions
{
  self = [super init];
  __searchOptions = [searchOptions retain_stub];
  __searchOptions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"searchOptions"])
  {
    __searchOptions = [[decoder decodeObjectForKey: @"searchOptions"] retain_stub];
    __searchOptions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__searchOptions_isset)
  {
    [encoder encodeObject: __searchOptions forKey: @"searchOptions"];
  }
}

- (void) dealloc
{
  [__searchOptions release_stub];
  [super dealloc_stub];
}

- (SearchOptions_t *) searchOptions {
  return [[__searchOptions retain_stub] autorelease_stub];
}

- (void) setSearchOptions: (SearchOptions_t *) searchOptions {
  [searchOptions retain_stub];
  [__searchOptions release_stub];
  __searchOptions = searchOptions;
  __searchOptions_isset = YES;
}

- (BOOL) searchOptionsIsSet {
  return __searchOptions_isset;
}

- (void) unsetSearchOptions {
  [__searchOptions release_stub];
  __searchOptions = nil;
  __searchOptions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SearchOptions_t *fieldValue = [[SearchOptions_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSearchOptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getActivities_args"];
  if (__searchOptions_isset) {
    if (__searchOptions != nil) {
      [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 1];
      [__searchOptions write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getActivities_args("];
  [ms appendString: @"searchOptions:"];
  [ms appendFormat: @"%@", __searchOptions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetActivities_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetActivities_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size55;
          [inProtocol readListBeginReturningElementType: NULL size: &_size55];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size55];
          int _i56;
          for (_i56 = 0; _i56 < _size55; ++_i56)
          {
            Activity_t *_elem57 = [[Activity_t alloc] init];
            [_elem57 read: inProtocol];
            [fieldValue addObject: _elem57];
            [_elem57 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetActivities_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i59;
        for (i59 = 0; i59 < [__success count]; i59++)
        {
          [[__success objectAtIndex: i59] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetActivities_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getMessages_args : NSObject <NSCoding> {
  SearchOptions_t * __searchOptions;
  Location_t * __location;

  BOOL __searchOptions_isset;
  BOOL __location_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=searchOptions, setter=setSearchOptions:) SearchOptions_t * searchOptions;
@property (nonatomic, retain, getter=location, setter=setLocation:) Location_t * location;
#endif

- (id) init;
- (id) initWithSearchOptions: (SearchOptions_t *) searchOptions location: (Location_t *) location;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (SearchOptions_t *) searchOptions;
- (void) setSearchOptions: (SearchOptions_t *) searchOptions;
#endif
- (BOOL) searchOptionsIsSet;

#if !__has_feature(objc_arc)
- (Location_t *) location;
- (void) setLocation: (Location_t *) location;
#endif
- (BOOL) locationIsSet;

@end

@implementation getMessages_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSearchOptions: (SearchOptions_t *) searchOptions location: (Location_t *) location
{
  self = [super init];
  __searchOptions = [searchOptions retain_stub];
  __searchOptions_isset = YES;
  __location = [location retain_stub];
  __location_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"searchOptions"])
  {
    __searchOptions = [[decoder decodeObjectForKey: @"searchOptions"] retain_stub];
    __searchOptions_isset = YES;
  }
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain_stub];
    __location_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__searchOptions_isset)
  {
    [encoder encodeObject: __searchOptions forKey: @"searchOptions"];
  }
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
}

- (void) dealloc
{
  [__searchOptions release_stub];
  [__location release_stub];
  [super dealloc_stub];
}

- (SearchOptions_t *) searchOptions {
  return [[__searchOptions retain_stub] autorelease_stub];
}

- (void) setSearchOptions: (SearchOptions_t *) searchOptions {
  [searchOptions retain_stub];
  [__searchOptions release_stub];
  __searchOptions = searchOptions;
  __searchOptions_isset = YES;
}

- (BOOL) searchOptionsIsSet {
  return __searchOptions_isset;
}

- (void) unsetSearchOptions {
  [__searchOptions release_stub];
  __searchOptions = nil;
  __searchOptions_isset = NO;
}

- (Location_t *) location {
  return [[__location retain_stub] autorelease_stub];
}

- (void) setLocation: (Location_t *) location {
  [location retain_stub];
  [__location release_stub];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release_stub];
  __location = nil;
  __location_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SearchOptions_t *fieldValue = [[SearchOptions_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSearchOptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Location_t *fieldValue = [[Location_t alloc] init];
          [fieldValue read: inProtocol];
          [self setLocation: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMessages_args"];
  if (__searchOptions_isset) {
    if (__searchOptions != nil) {
      [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 1];
      [__searchOptions write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 2];
      [__location write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getMessages_args("];
  [ms appendString: @"searchOptions:"];
  [ms appendFormat: @"%@", __searchOptions];
  [ms appendString: @",location:"];
  [ms appendFormat: @"%@", __location];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMessages_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetMessages_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size60;
          [inProtocol readListBeginReturningElementType: NULL size: &_size60];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size60];
          int _i61;
          for (_i61 = 0; _i61 < _size60; ++_i61)
          {
            Activity_t *_elem62 = [[Activity_t alloc] init];
            [_elem62 read: inProtocol];
            [fieldValue addObject: _elem62];
            [_elem62 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMessages_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i64;
        for (i64 = 0; i64 < [__success count]; i64++)
        {
          [[__success objectAtIndex: i64] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMessages_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface activityAction_args : NSObject <NSCoding> {
  NSString * __activityId;

  BOOL __activityId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=activityId, setter=setActivityId:) NSString * activityId;
#endif

- (id) init;
- (id) initWithActivityId: (NSString *) activityId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) activityId;
- (void) setActivityId: (NSString *) activityId;
#endif
- (BOOL) activityIdIsSet;

@end

@implementation activityAction_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithActivityId: (NSString *) activityId
{
  self = [super init];
  __activityId = [activityId retain_stub];
  __activityId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"activityId"])
  {
    __activityId = [[decoder decodeObjectForKey: @"activityId"] retain_stub];
    __activityId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__activityId_isset)
  {
    [encoder encodeObject: __activityId forKey: @"activityId"];
  }
}

- (void) dealloc
{
  [__activityId release_stub];
  [super dealloc_stub];
}

- (NSString *) activityId {
  return [[__activityId retain_stub] autorelease_stub];
}

- (void) setActivityId: (NSString *) activityId {
  [activityId retain_stub];
  [__activityId release_stub];
  __activityId = activityId;
  __activityId_isset = YES;
}

- (BOOL) activityIdIsSet {
  return __activityId_isset;
}

- (void) unsetActivityId {
  [__activityId release_stub];
  __activityId = nil;
  __activityId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setActivityId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"activityAction_args"];
  if (__activityId_isset) {
    if (__activityId != nil) {
      [outProtocol writeFieldBeginWithName: @"activityId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __activityId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"activityAction_args("];
  [ms appendString: @"activityId:"];
  [ms appendFormat: @"\"%@\"", __activityId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ActivityAction_result : NSObject <NSCoding> {
  ServiceException_t * __error;

  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithError: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation ActivityAction_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithError: (ServiceException_t *) error
{
  self = [super init];
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__error release_stub];
  [super dealloc_stub];
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActivityAction_result"];

  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ActivityAction_result("];
  [ms appendString: @"error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface sendResetPasswordEmail_args : NSObject <NSCoding> {
  NSString * __email;

  BOOL __email_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=email, setter=setEmail:) NSString * email;
#endif

- (id) init;
- (id) initWithEmail: (NSString *) email;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) email;
- (void) setEmail: (NSString *) email;
#endif
- (BOOL) emailIsSet;

@end

@implementation sendResetPasswordEmail_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEmail: (NSString *) email
{
  self = [super init];
  __email = [email retain_stub];
  __email_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
}

- (void) dealloc
{
  [__email release_stub];
  [super dealloc_stub];
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"sendResetPasswordEmail_args"];
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"sendResetPasswordEmail_args("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SendResetPasswordEmail_result : NSObject <NSCoding> {
  TServiceException_t * __serviceException;
  TUserException_t * __userException;
  TNotFoundException_t * __notFoundException;

  BOOL __serviceException_isset;
  BOOL __userException_isset;
  BOOL __notFoundException_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=serviceException, setter=setServiceException:) TServiceException_t * serviceException;
@property (nonatomic, retain, getter=userException, setter=setUserException:) TUserException_t * userException;
@property (nonatomic, retain, getter=notFoundException, setter=setNotFoundException:) TNotFoundException_t * notFoundException;
#endif

- (id) init;
- (id) initWithServiceException: (TServiceException_t *) serviceException userException: (TUserException_t *) userException notFoundException: (TNotFoundException_t *) notFoundException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (TServiceException_t *) serviceException;
- (void) setServiceException: (TServiceException_t *) serviceException;
#endif
- (BOOL) serviceExceptionIsSet;

#if !__has_feature(objc_arc)
- (TUserException_t *) userException;
- (void) setUserException: (TUserException_t *) userException;
#endif
- (BOOL) userExceptionIsSet;

#if !__has_feature(objc_arc)
- (TNotFoundException_t *) notFoundException;
- (void) setNotFoundException: (TNotFoundException_t *) notFoundException;
#endif
- (BOOL) notFoundExceptionIsSet;

@end

@implementation SendResetPasswordEmail_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithServiceException: (TServiceException_t *) serviceException userException: (TUserException_t *) userException notFoundException: (TNotFoundException_t *) notFoundException
{
  self = [super init];
  __serviceException = [serviceException retain_stub];
  __serviceException_isset = YES;
  __userException = [userException retain_stub];
  __userException_isset = YES;
  __notFoundException = [notFoundException retain_stub];
  __notFoundException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serviceException"])
  {
    __serviceException = [[decoder decodeObjectForKey: @"serviceException"] retain_stub];
    __serviceException_isset = YES;
  }
  if ([decoder containsValueForKey: @"userException"])
  {
    __userException = [[decoder decodeObjectForKey: @"userException"] retain_stub];
    __userException_isset = YES;
  }
  if ([decoder containsValueForKey: @"notFoundException"])
  {
    __notFoundException = [[decoder decodeObjectForKey: @"notFoundException"] retain_stub];
    __notFoundException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serviceException_isset)
  {
    [encoder encodeObject: __serviceException forKey: @"serviceException"];
  }
  if (__userException_isset)
  {
    [encoder encodeObject: __userException forKey: @"userException"];
  }
  if (__notFoundException_isset)
  {
    [encoder encodeObject: __notFoundException forKey: @"notFoundException"];
  }
}

- (void) dealloc
{
  [__serviceException release_stub];
  [__userException release_stub];
  [__notFoundException release_stub];
  [super dealloc_stub];
}

- (TServiceException_t *) serviceException {
  return [[__serviceException retain_stub] autorelease_stub];
}

- (void) setServiceException: (TServiceException_t *) serviceException {
  [serviceException retain_stub];
  [__serviceException release_stub];
  __serviceException = serviceException;
  __serviceException_isset = YES;
}

- (BOOL) serviceExceptionIsSet {
  return __serviceException_isset;
}

- (void) unsetServiceException {
  [__serviceException release_stub];
  __serviceException = nil;
  __serviceException_isset = NO;
}

- (TUserException_t *) userException {
  return [[__userException retain_stub] autorelease_stub];
}

- (void) setUserException: (TUserException_t *) userException {
  [userException retain_stub];
  [__userException release_stub];
  __userException = userException;
  __userException_isset = YES;
}

- (BOOL) userExceptionIsSet {
  return __userException_isset;
}

- (void) unsetUserException {
  [__userException release_stub];
  __userException = nil;
  __userException_isset = NO;
}

- (TNotFoundException_t *) notFoundException {
  return [[__notFoundException retain_stub] autorelease_stub];
}

- (void) setNotFoundException: (TNotFoundException_t *) notFoundException {
  [notFoundException retain_stub];
  [__notFoundException release_stub];
  __notFoundException = notFoundException;
  __notFoundException_isset = YES;
}

- (BOOL) notFoundExceptionIsSet {
  return __notFoundException_isset;
}

- (void) unsetNotFoundException {
  [__notFoundException release_stub];
  __notFoundException = nil;
  __notFoundException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TServiceException_t *fieldValue = [[TServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setServiceException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TUserException_t *fieldValue = [[TUserException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setUserException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          TNotFoundException_t *fieldValue = [[TNotFoundException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setNotFoundException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SendResetPasswordEmail_result"];

  if (__serviceException_isset) {
    if (__serviceException != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceException" type: TType_STRUCT fieldID: 1];
      [__serviceException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__userException_isset) {
    if (__userException != nil) {
      [outProtocol writeFieldBeginWithName: @"userException" type: TType_STRUCT fieldID: 2];
      [__userException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__notFoundException_isset) {
    if (__notFoundException != nil) {
      [outProtocol writeFieldBeginWithName: @"notFoundException" type: TType_STRUCT fieldID: 3];
      [__notFoundException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SendResetPasswordEmail_result("];
  [ms appendString: @"serviceException:"];
  [ms appendFormat: @"%@", __serviceException];
  [ms appendString: @",userException:"];
  [ms appendFormat: @"%@", __userException];
  [ms appendString: @",notFoundException:"];
  [ms appendFormat: @"%@", __notFoundException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface resetPassword_args : NSObject <NSCoding> {
  NSString * __customerId;
  NSString * __resetPasswordCode;
  NSString * __newPassword;

  BOOL __customerId_isset;
  BOOL __resetPasswordCode_isset;
  BOOL __newPassword_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=customerId, setter=setCustomerId:) NSString * customerId;
@property (nonatomic, retain, getter=resetPasswordCode, setter=setResetPasswordCode:) NSString * resetPasswordCode;
@property (nonatomic, retain, getter=newPassword, setter=setNewPassword:) NSString * newPassword;
#endif

- (id) init;
- (id) initWithCustomerId: (NSString *) customerId resetPasswordCode: (NSString *) resetPasswordCode newPassword: (NSString *) newPassword;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) customerId;
- (void) setCustomerId: (NSString *) customerId;
#endif
- (BOOL) customerIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) resetPasswordCode;
- (void) setResetPasswordCode: (NSString *) resetPasswordCode;
#endif
- (BOOL) resetPasswordCodeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) newPassword;
- (void) setNewPassword: (NSString *) newPassword;
#endif
- (BOOL) newPasswordIsSet;

@end

@implementation resetPassword_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCustomerId: (NSString *) customerId resetPasswordCode: (NSString *) resetPasswordCode newPassword: (NSString *) newPassword
{
  self = [super init];
  __customerId = [customerId retain_stub];
  __customerId_isset = YES;
  __resetPasswordCode = [resetPasswordCode retain_stub];
  __resetPasswordCode_isset = YES;
  __newPassword = [newPassword retain_stub];
  __newPassword_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"customerId"])
  {
    __customerId = [[decoder decodeObjectForKey: @"customerId"] retain_stub];
    __customerId_isset = YES;
  }
  if ([decoder containsValueForKey: @"resetPasswordCode"])
  {
    __resetPasswordCode = [[decoder decodeObjectForKey: @"resetPasswordCode"] retain_stub];
    __resetPasswordCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"newPassword"])
  {
    __newPassword = [[decoder decodeObjectForKey: @"newPassword"] retain_stub];
    __newPassword_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__customerId_isset)
  {
    [encoder encodeObject: __customerId forKey: @"customerId"];
  }
  if (__resetPasswordCode_isset)
  {
    [encoder encodeObject: __resetPasswordCode forKey: @"resetPasswordCode"];
  }
  if (__newPassword_isset)
  {
    [encoder encodeObject: __newPassword forKey: @"newPassword"];
  }
}

- (void) dealloc
{
  [__customerId release_stub];
  [__resetPasswordCode release_stub];
  [__newPassword release_stub];
  [super dealloc_stub];
}

- (NSString *) customerId {
  return [[__customerId retain_stub] autorelease_stub];
}

- (void) setCustomerId: (NSString *) customerId {
  [customerId retain_stub];
  [__customerId release_stub];
  __customerId = customerId;
  __customerId_isset = YES;
}

- (BOOL) customerIdIsSet {
  return __customerId_isset;
}

- (void) unsetCustomerId {
  [__customerId release_stub];
  __customerId = nil;
  __customerId_isset = NO;
}

- (NSString *) resetPasswordCode {
  return [[__resetPasswordCode retain_stub] autorelease_stub];
}

- (void) setResetPasswordCode: (NSString *) resetPasswordCode {
  [resetPasswordCode retain_stub];
  [__resetPasswordCode release_stub];
  __resetPasswordCode = resetPasswordCode;
  __resetPasswordCode_isset = YES;
}

- (BOOL) resetPasswordCodeIsSet {
  return __resetPasswordCode_isset;
}

- (void) unsetResetPasswordCode {
  [__resetPasswordCode release_stub];
  __resetPasswordCode = nil;
  __resetPasswordCode_isset = NO;
}

- (NSString *) newPassword {
  return [[__newPassword retain_stub] autorelease_stub];
}

- (void) setNewPassword: (NSString *) newPassword {
  [newPassword retain_stub];
  [__newPassword release_stub];
  __newPassword = newPassword;
  __newPassword_isset = YES;
}

- (BOOL) newPasswordIsSet {
  return __newPassword_isset;
}

- (void) unsetNewPassword {
  [__newPassword release_stub];
  __newPassword = nil;
  __newPassword_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCustomerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setResetPasswordCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNewPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"resetPassword_args"];
  if (__customerId_isset) {
    if (__customerId != nil) {
      [outProtocol writeFieldBeginWithName: @"customerId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __customerId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__resetPasswordCode_isset) {
    if (__resetPasswordCode != nil) {
      [outProtocol writeFieldBeginWithName: @"resetPasswordCode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __resetPasswordCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__newPassword_isset) {
    if (__newPassword != nil) {
      [outProtocol writeFieldBeginWithName: @"newPassword" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __newPassword];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"resetPassword_args("];
  [ms appendString: @"customerId:"];
  [ms appendFormat: @"\"%@\"", __customerId];
  [ms appendString: @",resetPasswordCode:"];
  [ms appendFormat: @"\"%@\"", __resetPasswordCode];
  [ms appendString: @",newPassword:"];
  [ms appendFormat: @"\"%@\"", __newPassword];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ResetPassword_result : NSObject <NSCoding> {
  CTokenAccess_t * __success;
  TServiceException_t * __serviceException;
  TUserException_t * __userException;
  TNotFoundException_t * __notFoundException;

  BOOL __success_isset;
  BOOL __serviceException_isset;
  BOOL __userException_isset;
  BOOL __notFoundException_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) CTokenAccess_t * success;
@property (nonatomic, retain, getter=serviceException, setter=setServiceException:) TServiceException_t * serviceException;
@property (nonatomic, retain, getter=userException, setter=setUserException:) TUserException_t * userException;
@property (nonatomic, retain, getter=notFoundException, setter=setNotFoundException:) TNotFoundException_t * notFoundException;
#endif

- (id) init;
- (id) initWithSuccess: (CTokenAccess_t *) success serviceException: (TServiceException_t *) serviceException userException: (TUserException_t *) userException notFoundException: (TNotFoundException_t *) notFoundException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CTokenAccess_t *) success;
- (void) setSuccess: (CTokenAccess_t *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (TServiceException_t *) serviceException;
- (void) setServiceException: (TServiceException_t *) serviceException;
#endif
- (BOOL) serviceExceptionIsSet;

#if !__has_feature(objc_arc)
- (TUserException_t *) userException;
- (void) setUserException: (TUserException_t *) userException;
#endif
- (BOOL) userExceptionIsSet;

#if !__has_feature(objc_arc)
- (TNotFoundException_t *) notFoundException;
- (void) setNotFoundException: (TNotFoundException_t *) notFoundException;
#endif
- (BOOL) notFoundExceptionIsSet;

@end

@implementation ResetPassword_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (CTokenAccess_t *) success serviceException: (TServiceException_t *) serviceException userException: (TUserException_t *) userException notFoundException: (TNotFoundException_t *) notFoundException
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __serviceException = [serviceException retain_stub];
  __serviceException_isset = YES;
  __userException = [userException retain_stub];
  __userException_isset = YES;
  __notFoundException = [notFoundException retain_stub];
  __notFoundException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceException"])
  {
    __serviceException = [[decoder decodeObjectForKey: @"serviceException"] retain_stub];
    __serviceException_isset = YES;
  }
  if ([decoder containsValueForKey: @"userException"])
  {
    __userException = [[decoder decodeObjectForKey: @"userException"] retain_stub];
    __userException_isset = YES;
  }
  if ([decoder containsValueForKey: @"notFoundException"])
  {
    __notFoundException = [[decoder decodeObjectForKey: @"notFoundException"] retain_stub];
    __notFoundException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__serviceException_isset)
  {
    [encoder encodeObject: __serviceException forKey: @"serviceException"];
  }
  if (__userException_isset)
  {
    [encoder encodeObject: __userException forKey: @"userException"];
  }
  if (__notFoundException_isset)
  {
    [encoder encodeObject: __notFoundException forKey: @"notFoundException"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__serviceException release_stub];
  [__userException release_stub];
  [__notFoundException release_stub];
  [super dealloc_stub];
}

- (CTokenAccess_t *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (CTokenAccess_t *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (TServiceException_t *) serviceException {
  return [[__serviceException retain_stub] autorelease_stub];
}

- (void) setServiceException: (TServiceException_t *) serviceException {
  [serviceException retain_stub];
  [__serviceException release_stub];
  __serviceException = serviceException;
  __serviceException_isset = YES;
}

- (BOOL) serviceExceptionIsSet {
  return __serviceException_isset;
}

- (void) unsetServiceException {
  [__serviceException release_stub];
  __serviceException = nil;
  __serviceException_isset = NO;
}

- (TUserException_t *) userException {
  return [[__userException retain_stub] autorelease_stub];
}

- (void) setUserException: (TUserException_t *) userException {
  [userException retain_stub];
  [__userException release_stub];
  __userException = userException;
  __userException_isset = YES;
}

- (BOOL) userExceptionIsSet {
  return __userException_isset;
}

- (void) unsetUserException {
  [__userException release_stub];
  __userException = nil;
  __userException_isset = NO;
}

- (TNotFoundException_t *) notFoundException {
  return [[__notFoundException retain_stub] autorelease_stub];
}

- (void) setNotFoundException: (TNotFoundException_t *) notFoundException {
  [notFoundException retain_stub];
  [__notFoundException release_stub];
  __notFoundException = notFoundException;
  __notFoundException_isset = YES;
}

- (BOOL) notFoundExceptionIsSet {
  return __notFoundException_isset;
}

- (void) unsetNotFoundException {
  [__notFoundException release_stub];
  __notFoundException = nil;
  __notFoundException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          CTokenAccess_t *fieldValue = [[CTokenAccess_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          TServiceException_t *fieldValue = [[TServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setServiceException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TUserException_t *fieldValue = [[TUserException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setUserException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          TNotFoundException_t *fieldValue = [[TNotFoundException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setNotFoundException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResetPassword_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__serviceException_isset) {
    if (__serviceException != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceException" type: TType_STRUCT fieldID: 1];
      [__serviceException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__userException_isset) {
    if (__userException != nil) {
      [outProtocol writeFieldBeginWithName: @"userException" type: TType_STRUCT fieldID: 2];
      [__userException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__notFoundException_isset) {
    if (__notFoundException != nil) {
      [outProtocol writeFieldBeginWithName: @"notFoundException" type: TType_STRUCT fieldID: 3];
      [__notFoundException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResetPassword_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",serviceException:"];
  [ms appendFormat: @"%@", __serviceException];
  [ms appendString: @",userException:"];
  [ms appendFormat: @"%@", __userException];
  [ms appendString: @",notFoundException:"];
  [ms appendFormat: @"%@", __notFoundException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface purchaseByCard_args : NSObject <NSCoding> {
  NSString * __dealOfferId;
  PaymentDetail_t * __paymentDetail;

  BOOL __dealOfferId_isset;
  BOOL __paymentDetail_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=dealOfferId, setter=setDealOfferId:) NSString * dealOfferId;
@property (nonatomic, retain, getter=paymentDetail, setter=setPaymentDetail:) PaymentDetail_t * paymentDetail;
#endif

- (id) init;
- (id) initWithDealOfferId: (NSString *) dealOfferId paymentDetail: (PaymentDetail_t *) paymentDetail;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) dealOfferId;
- (void) setDealOfferId: (NSString *) dealOfferId;
#endif
- (BOOL) dealOfferIdIsSet;

#if !__has_feature(objc_arc)
- (PaymentDetail_t *) paymentDetail;
- (void) setPaymentDetail: (PaymentDetail_t *) paymentDetail;
#endif
- (BOOL) paymentDetailIsSet;

@end

@implementation purchaseByCard_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealOfferId: (NSString *) dealOfferId paymentDetail: (PaymentDetail_t *) paymentDetail
{
  self = [super init];
  __dealOfferId = [dealOfferId retain_stub];
  __dealOfferId_isset = YES;
  __paymentDetail = [paymentDetail retain_stub];
  __paymentDetail_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealOfferId"])
  {
    __dealOfferId = [[decoder decodeObjectForKey: @"dealOfferId"] retain_stub];
    __dealOfferId_isset = YES;
  }
  if ([decoder containsValueForKey: @"paymentDetail"])
  {
    __paymentDetail = [[decoder decodeObjectForKey: @"paymentDetail"] retain_stub];
    __paymentDetail_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealOfferId_isset)
  {
    [encoder encodeObject: __dealOfferId forKey: @"dealOfferId"];
  }
  if (__paymentDetail_isset)
  {
    [encoder encodeObject: __paymentDetail forKey: @"paymentDetail"];
  }
}

- (void) dealloc
{
  [__dealOfferId release_stub];
  [__paymentDetail release_stub];
  [super dealloc_stub];
}

- (NSString *) dealOfferId {
  return [[__dealOfferId retain_stub] autorelease_stub];
}

- (void) setDealOfferId: (NSString *) dealOfferId {
  [dealOfferId retain_stub];
  [__dealOfferId release_stub];
  __dealOfferId = dealOfferId;
  __dealOfferId_isset = YES;
}

- (BOOL) dealOfferIdIsSet {
  return __dealOfferId_isset;
}

- (void) unsetDealOfferId {
  [__dealOfferId release_stub];
  __dealOfferId = nil;
  __dealOfferId_isset = NO;
}

- (PaymentDetail_t *) paymentDetail {
  return [[__paymentDetail retain_stub] autorelease_stub];
}

- (void) setPaymentDetail: (PaymentDetail_t *) paymentDetail {
  [paymentDetail retain_stub];
  [__paymentDetail release_stub];
  __paymentDetail = paymentDetail;
  __paymentDetail_isset = YES;
}

- (BOOL) paymentDetailIsSet {
  return __paymentDetail_isset;
}

- (void) unsetPaymentDetail {
  [__paymentDetail release_stub];
  __paymentDetail = nil;
  __paymentDetail_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealOfferId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          PaymentDetail_t *fieldValue = [[PaymentDetail_t alloc] init];
          [fieldValue read: inProtocol];
          [self setPaymentDetail: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"purchaseByCard_args"];
  if (__dealOfferId_isset) {
    if (__dealOfferId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealOfferId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__paymentDetail_isset) {
    if (__paymentDetail != nil) {
      [outProtocol writeFieldBeginWithName: @"paymentDetail" type: TType_STRUCT fieldID: 2];
      [__paymentDetail write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"purchaseByCard_args("];
  [ms appendString: @"dealOfferId:"];
  [ms appendFormat: @"\"%@\"", __dealOfferId];
  [ms appendString: @",paymentDetail:"];
  [ms appendFormat: @"%@", __paymentDetail];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface PurchaseByCard_result : NSObject <NSCoding> {
  TransactionResult_t * __success;
  TServiceException_t * __serviceException;
  TUserException_t * __userException;
  TNotFoundException_t * __notFoundException;

  BOOL __success_isset;
  BOOL __serviceException_isset;
  BOOL __userException_isset;
  BOOL __notFoundException_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TransactionResult_t * success;
@property (nonatomic, retain, getter=serviceException, setter=setServiceException:) TServiceException_t * serviceException;
@property (nonatomic, retain, getter=userException, setter=setUserException:) TUserException_t * userException;
@property (nonatomic, retain, getter=notFoundException, setter=setNotFoundException:) TNotFoundException_t * notFoundException;
#endif

- (id) init;
- (id) initWithSuccess: (TransactionResult_t *) success serviceException: (TServiceException_t *) serviceException userException: (TUserException_t *) userException notFoundException: (TNotFoundException_t *) notFoundException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (TransactionResult_t *) success;
- (void) setSuccess: (TransactionResult_t *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (TServiceException_t *) serviceException;
- (void) setServiceException: (TServiceException_t *) serviceException;
#endif
- (BOOL) serviceExceptionIsSet;

#if !__has_feature(objc_arc)
- (TUserException_t *) userException;
- (void) setUserException: (TUserException_t *) userException;
#endif
- (BOOL) userExceptionIsSet;

#if !__has_feature(objc_arc)
- (TNotFoundException_t *) notFoundException;
- (void) setNotFoundException: (TNotFoundException_t *) notFoundException;
#endif
- (BOOL) notFoundExceptionIsSet;

@end

@implementation PurchaseByCard_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TransactionResult_t *) success serviceException: (TServiceException_t *) serviceException userException: (TUserException_t *) userException notFoundException: (TNotFoundException_t *) notFoundException
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __serviceException = [serviceException retain_stub];
  __serviceException_isset = YES;
  __userException = [userException retain_stub];
  __userException_isset = YES;
  __notFoundException = [notFoundException retain_stub];
  __notFoundException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceException"])
  {
    __serviceException = [[decoder decodeObjectForKey: @"serviceException"] retain_stub];
    __serviceException_isset = YES;
  }
  if ([decoder containsValueForKey: @"userException"])
  {
    __userException = [[decoder decodeObjectForKey: @"userException"] retain_stub];
    __userException_isset = YES;
  }
  if ([decoder containsValueForKey: @"notFoundException"])
  {
    __notFoundException = [[decoder decodeObjectForKey: @"notFoundException"] retain_stub];
    __notFoundException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__serviceException_isset)
  {
    [encoder encodeObject: __serviceException forKey: @"serviceException"];
  }
  if (__userException_isset)
  {
    [encoder encodeObject: __userException forKey: @"userException"];
  }
  if (__notFoundException_isset)
  {
    [encoder encodeObject: __notFoundException forKey: @"notFoundException"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__serviceException release_stub];
  [__userException release_stub];
  [__notFoundException release_stub];
  [super dealloc_stub];
}

- (TransactionResult_t *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TransactionResult_t *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (TServiceException_t *) serviceException {
  return [[__serviceException retain_stub] autorelease_stub];
}

- (void) setServiceException: (TServiceException_t *) serviceException {
  [serviceException retain_stub];
  [__serviceException release_stub];
  __serviceException = serviceException;
  __serviceException_isset = YES;
}

- (BOOL) serviceExceptionIsSet {
  return __serviceException_isset;
}

- (void) unsetServiceException {
  [__serviceException release_stub];
  __serviceException = nil;
  __serviceException_isset = NO;
}

- (TUserException_t *) userException {
  return [[__userException retain_stub] autorelease_stub];
}

- (void) setUserException: (TUserException_t *) userException {
  [userException retain_stub];
  [__userException release_stub];
  __userException = userException;
  __userException_isset = YES;
}

- (BOOL) userExceptionIsSet {
  return __userException_isset;
}

- (void) unsetUserException {
  [__userException release_stub];
  __userException = nil;
  __userException_isset = NO;
}

- (TNotFoundException_t *) notFoundException {
  return [[__notFoundException retain_stub] autorelease_stub];
}

- (void) setNotFoundException: (TNotFoundException_t *) notFoundException {
  [notFoundException retain_stub];
  [__notFoundException release_stub];
  __notFoundException = notFoundException;
  __notFoundException_isset = YES;
}

- (BOOL) notFoundExceptionIsSet {
  return __notFoundException_isset;
}

- (void) unsetNotFoundException {
  [__notFoundException release_stub];
  __notFoundException = nil;
  __notFoundException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TransactionResult_t *fieldValue = [[TransactionResult_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          TServiceException_t *fieldValue = [[TServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setServiceException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TUserException_t *fieldValue = [[TUserException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setUserException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          TNotFoundException_t *fieldValue = [[TNotFoundException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setNotFoundException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PurchaseByCard_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__serviceException_isset) {
    if (__serviceException != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceException" type: TType_STRUCT fieldID: 1];
      [__serviceException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__userException_isset) {
    if (__userException != nil) {
      [outProtocol writeFieldBeginWithName: @"userException" type: TType_STRUCT fieldID: 2];
      [__userException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__notFoundException_isset) {
    if (__notFoundException != nil) {
      [outProtocol writeFieldBeginWithName: @"notFoundException" type: TType_STRUCT fieldID: 3];
      [__notFoundException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PurchaseByCard_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",serviceException:"];
  [ms appendFormat: @"%@", __serviceException];
  [ms appendString: @",userException:"];
  [ms appendFormat: @"%@", __userException];
  [ms appendString: @",notFoundException:"];
  [ms appendFormat: @"%@", __notFoundException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface purchaseByCode_args : NSObject <NSCoding> {
  NSString * __dealOfferId;
  NSString * __paymentCode;

  BOOL __dealOfferId_isset;
  BOOL __paymentCode_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=dealOfferId, setter=setDealOfferId:) NSString * dealOfferId;
@property (nonatomic, retain, getter=paymentCode, setter=setPaymentCode:) NSString * paymentCode;
#endif

- (id) init;
- (id) initWithDealOfferId: (NSString *) dealOfferId paymentCode: (NSString *) paymentCode;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) dealOfferId;
- (void) setDealOfferId: (NSString *) dealOfferId;
#endif
- (BOOL) dealOfferIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) paymentCode;
- (void) setPaymentCode: (NSString *) paymentCode;
#endif
- (BOOL) paymentCodeIsSet;

@end

@implementation purchaseByCode_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealOfferId: (NSString *) dealOfferId paymentCode: (NSString *) paymentCode
{
  self = [super init];
  __dealOfferId = [dealOfferId retain_stub];
  __dealOfferId_isset = YES;
  __paymentCode = [paymentCode retain_stub];
  __paymentCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealOfferId"])
  {
    __dealOfferId = [[decoder decodeObjectForKey: @"dealOfferId"] retain_stub];
    __dealOfferId_isset = YES;
  }
  if ([decoder containsValueForKey: @"paymentCode"])
  {
    __paymentCode = [[decoder decodeObjectForKey: @"paymentCode"] retain_stub];
    __paymentCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealOfferId_isset)
  {
    [encoder encodeObject: __dealOfferId forKey: @"dealOfferId"];
  }
  if (__paymentCode_isset)
  {
    [encoder encodeObject: __paymentCode forKey: @"paymentCode"];
  }
}

- (void) dealloc
{
  [__dealOfferId release_stub];
  [__paymentCode release_stub];
  [super dealloc_stub];
}

- (NSString *) dealOfferId {
  return [[__dealOfferId retain_stub] autorelease_stub];
}

- (void) setDealOfferId: (NSString *) dealOfferId {
  [dealOfferId retain_stub];
  [__dealOfferId release_stub];
  __dealOfferId = dealOfferId;
  __dealOfferId_isset = YES;
}

- (BOOL) dealOfferIdIsSet {
  return __dealOfferId_isset;
}

- (void) unsetDealOfferId {
  [__dealOfferId release_stub];
  __dealOfferId = nil;
  __dealOfferId_isset = NO;
}

- (NSString *) paymentCode {
  return [[__paymentCode retain_stub] autorelease_stub];
}

- (void) setPaymentCode: (NSString *) paymentCode {
  [paymentCode retain_stub];
  [__paymentCode release_stub];
  __paymentCode = paymentCode;
  __paymentCode_isset = YES;
}

- (BOOL) paymentCodeIsSet {
  return __paymentCode_isset;
}

- (void) unsetPaymentCode {
  [__paymentCode release_stub];
  __paymentCode = nil;
  __paymentCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealOfferId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPaymentCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"purchaseByCode_args"];
  if (__dealOfferId_isset) {
    if (__dealOfferId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealOfferId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__paymentCode_isset) {
    if (__paymentCode != nil) {
      [outProtocol writeFieldBeginWithName: @"paymentCode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __paymentCode];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"purchaseByCode_args("];
  [ms appendString: @"dealOfferId:"];
  [ms appendFormat: @"\"%@\"", __dealOfferId];
  [ms appendString: @",paymentCode:"];
  [ms appendFormat: @"\"%@\"", __paymentCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface PurchaseByCode_result : NSObject <NSCoding> {
  TransactionResult_t * __success;
  TServiceException_t * __serviceException;
  TUserException_t * __userException;
  TNotFoundException_t * __notFoundException;

  BOOL __success_isset;
  BOOL __serviceException_isset;
  BOOL __userException_isset;
  BOOL __notFoundException_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TransactionResult_t * success;
@property (nonatomic, retain, getter=serviceException, setter=setServiceException:) TServiceException_t * serviceException;
@property (nonatomic, retain, getter=userException, setter=setUserException:) TUserException_t * userException;
@property (nonatomic, retain, getter=notFoundException, setter=setNotFoundException:) TNotFoundException_t * notFoundException;
#endif

- (id) init;
- (id) initWithSuccess: (TransactionResult_t *) success serviceException: (TServiceException_t *) serviceException userException: (TUserException_t *) userException notFoundException: (TNotFoundException_t *) notFoundException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (TransactionResult_t *) success;
- (void) setSuccess: (TransactionResult_t *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (TServiceException_t *) serviceException;
- (void) setServiceException: (TServiceException_t *) serviceException;
#endif
- (BOOL) serviceExceptionIsSet;

#if !__has_feature(objc_arc)
- (TUserException_t *) userException;
- (void) setUserException: (TUserException_t *) userException;
#endif
- (BOOL) userExceptionIsSet;

#if !__has_feature(objc_arc)
- (TNotFoundException_t *) notFoundException;
- (void) setNotFoundException: (TNotFoundException_t *) notFoundException;
#endif
- (BOOL) notFoundExceptionIsSet;

@end

@implementation PurchaseByCode_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TransactionResult_t *) success serviceException: (TServiceException_t *) serviceException userException: (TUserException_t *) userException notFoundException: (TNotFoundException_t *) notFoundException
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __serviceException = [serviceException retain_stub];
  __serviceException_isset = YES;
  __userException = [userException retain_stub];
  __userException_isset = YES;
  __notFoundException = [notFoundException retain_stub];
  __notFoundException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceException"])
  {
    __serviceException = [[decoder decodeObjectForKey: @"serviceException"] retain_stub];
    __serviceException_isset = YES;
  }
  if ([decoder containsValueForKey: @"userException"])
  {
    __userException = [[decoder decodeObjectForKey: @"userException"] retain_stub];
    __userException_isset = YES;
  }
  if ([decoder containsValueForKey: @"notFoundException"])
  {
    __notFoundException = [[decoder decodeObjectForKey: @"notFoundException"] retain_stub];
    __notFoundException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__serviceException_isset)
  {
    [encoder encodeObject: __serviceException forKey: @"serviceException"];
  }
  if (__userException_isset)
  {
    [encoder encodeObject: __userException forKey: @"userException"];
  }
  if (__notFoundException_isset)
  {
    [encoder encodeObject: __notFoundException forKey: @"notFoundException"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__serviceException release_stub];
  [__userException release_stub];
  [__notFoundException release_stub];
  [super dealloc_stub];
}

- (TransactionResult_t *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TransactionResult_t *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (TServiceException_t *) serviceException {
  return [[__serviceException retain_stub] autorelease_stub];
}

- (void) setServiceException: (TServiceException_t *) serviceException {
  [serviceException retain_stub];
  [__serviceException release_stub];
  __serviceException = serviceException;
  __serviceException_isset = YES;
}

- (BOOL) serviceExceptionIsSet {
  return __serviceException_isset;
}

- (void) unsetServiceException {
  [__serviceException release_stub];
  __serviceException = nil;
  __serviceException_isset = NO;
}

- (TUserException_t *) userException {
  return [[__userException retain_stub] autorelease_stub];
}

- (void) setUserException: (TUserException_t *) userException {
  [userException retain_stub];
  [__userException release_stub];
  __userException = userException;
  __userException_isset = YES;
}

- (BOOL) userExceptionIsSet {
  return __userException_isset;
}

- (void) unsetUserException {
  [__userException release_stub];
  __userException = nil;
  __userException_isset = NO;
}

- (TNotFoundException_t *) notFoundException {
  return [[__notFoundException retain_stub] autorelease_stub];
}

- (void) setNotFoundException: (TNotFoundException_t *) notFoundException {
  [notFoundException retain_stub];
  [__notFoundException release_stub];
  __notFoundException = notFoundException;
  __notFoundException_isset = YES;
}

- (BOOL) notFoundExceptionIsSet {
  return __notFoundException_isset;
}

- (void) unsetNotFoundException {
  [__notFoundException release_stub];
  __notFoundException = nil;
  __notFoundException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TransactionResult_t *fieldValue = [[TransactionResult_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          TServiceException_t *fieldValue = [[TServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setServiceException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TUserException_t *fieldValue = [[TUserException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setUserException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          TNotFoundException_t *fieldValue = [[TNotFoundException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setNotFoundException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PurchaseByCode_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__serviceException_isset) {
    if (__serviceException != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceException" type: TType_STRUCT fieldID: 1];
      [__serviceException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__userException_isset) {
    if (__userException != nil) {
      [outProtocol writeFieldBeginWithName: @"userException" type: TType_STRUCT fieldID: 2];
      [__userException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__notFoundException_isset) {
    if (__notFoundException != nil) {
      [outProtocol writeFieldBeginWithName: @"notFoundException" type: TType_STRUCT fieldID: 3];
      [__notFoundException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PurchaseByCode_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",serviceException:"];
  [ms appendFormat: @"%@", __serviceException];
  [ms appendString: @",userException:"];
  [ms appendFormat: @"%@", __userException];
  [ms appendString: @",notFoundException:"];
  [ms appendFormat: @"%@", __notFoundException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface loginFacebook_args : NSObject <NSCoding> {
  NSString * __facebookId;
  NSString * __facebookAccessToken;

  BOOL __facebookId_isset;
  BOOL __facebookAccessToken_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=facebookId, setter=setFacebookId:) NSString * facebookId;
@property (nonatomic, retain, getter=facebookAccessToken, setter=setFacebookAccessToken:) NSString * facebookAccessToken;
#endif

- (id) init;
- (id) initWithFacebookId: (NSString *) facebookId facebookAccessToken: (NSString *) facebookAccessToken;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) facebookId;
- (void) setFacebookId: (NSString *) facebookId;
#endif
- (BOOL) facebookIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) facebookAccessToken;
- (void) setFacebookAccessToken: (NSString *) facebookAccessToken;
#endif
- (BOOL) facebookAccessTokenIsSet;

@end

@implementation loginFacebook_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFacebookId: (NSString *) facebookId facebookAccessToken: (NSString *) facebookAccessToken
{
  self = [super init];
  __facebookId = [facebookId retain_stub];
  __facebookId_isset = YES;
  __facebookAccessToken = [facebookAccessToken retain_stub];
  __facebookAccessToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"facebookId"])
  {
    __facebookId = [[decoder decodeObjectForKey: @"facebookId"] retain_stub];
    __facebookId_isset = YES;
  }
  if ([decoder containsValueForKey: @"facebookAccessToken"])
  {
    __facebookAccessToken = [[decoder decodeObjectForKey: @"facebookAccessToken"] retain_stub];
    __facebookAccessToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__facebookId_isset)
  {
    [encoder encodeObject: __facebookId forKey: @"facebookId"];
  }
  if (__facebookAccessToken_isset)
  {
    [encoder encodeObject: __facebookAccessToken forKey: @"facebookAccessToken"];
  }
}

- (void) dealloc
{
  [__facebookId release_stub];
  [__facebookAccessToken release_stub];
  [super dealloc_stub];
}

- (NSString *) facebookId {
  return [[__facebookId retain_stub] autorelease_stub];
}

- (void) setFacebookId: (NSString *) facebookId {
  [facebookId retain_stub];
  [__facebookId release_stub];
  __facebookId = facebookId;
  __facebookId_isset = YES;
}

- (BOOL) facebookIdIsSet {
  return __facebookId_isset;
}

- (void) unsetFacebookId {
  [__facebookId release_stub];
  __facebookId = nil;
  __facebookId_isset = NO;
}

- (NSString *) facebookAccessToken {
  return [[__facebookAccessToken retain_stub] autorelease_stub];
}

- (void) setFacebookAccessToken: (NSString *) facebookAccessToken {
  [facebookAccessToken retain_stub];
  [__facebookAccessToken release_stub];
  __facebookAccessToken = facebookAccessToken;
  __facebookAccessToken_isset = YES;
}

- (BOOL) facebookAccessTokenIsSet {
  return __facebookAccessToken_isset;
}

- (void) unsetFacebookAccessToken {
  [__facebookAccessToken release_stub];
  __facebookAccessToken = nil;
  __facebookAccessToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFacebookId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFacebookAccessToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"loginFacebook_args"];
  if (__facebookId_isset) {
    if (__facebookId != nil) {
      [outProtocol writeFieldBeginWithName: @"facebookId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __facebookId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__facebookAccessToken_isset) {
    if (__facebookAccessToken != nil) {
      [outProtocol writeFieldBeginWithName: @"facebookAccessToken" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __facebookAccessToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"loginFacebook_args("];
  [ms appendString: @"facebookId:"];
  [ms appendFormat: @"\"%@\"", __facebookId];
  [ms appendString: @",facebookAccessToken:"];
  [ms appendFormat: @"\"%@\"", __facebookAccessToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface LoginFacebook_result : NSObject <NSCoding> {
  CTokenAccessResponse_t * __success;
  TServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) CTokenAccessResponse_t * success;
@property (nonatomic, retain, getter=error, setter=setError:) TServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (CTokenAccessResponse_t *) success error: (TServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (CTokenAccessResponse_t *) success;
- (void) setSuccess: (CTokenAccessResponse_t *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (TServiceException_t *) error;
- (void) setError: (TServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation LoginFacebook_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (CTokenAccessResponse_t *) success error: (TServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (CTokenAccessResponse_t *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (CTokenAccessResponse_t *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (TServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (TServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          CTokenAccessResponse_t *fieldValue = [[CTokenAccessResponse_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          TServiceException_t *fieldValue = [[TServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginFacebook_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginFacebook_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getDealOfferGeoSummariesWithin_args : NSObject <NSCoding> {
  Location_t * __location;
  int32_t __maxMiles;
  SearchOptions_t * __searchOptions;
  SearchOptions_t * __fallbackSearchOptions;

  BOOL __location_isset;
  BOOL __maxMiles_isset;
  BOOL __searchOptions_isset;
  BOOL __fallbackSearchOptions_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=location, setter=setLocation:) Location_t * location;
@property (nonatomic, getter=maxMiles, setter=setMaxMiles:) int32_t maxMiles;
@property (nonatomic, retain, getter=searchOptions, setter=setSearchOptions:) SearchOptions_t * searchOptions;
@property (nonatomic, retain, getter=fallbackSearchOptions, setter=setFallbackSearchOptions:) SearchOptions_t * fallbackSearchOptions;
#endif

- (id) init;
- (id) initWithLocation: (Location_t *) location maxMiles: (int32_t) maxMiles searchOptions: (SearchOptions_t *) searchOptions fallbackSearchOptions: (SearchOptions_t *) fallbackSearchOptions;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (Location_t *) location;
- (void) setLocation: (Location_t *) location;
#endif
- (BOOL) locationIsSet;

#if !__has_feature(objc_arc)
- (int32_t) maxMiles;
- (void) setMaxMiles: (int32_t) maxMiles;
#endif
- (BOOL) maxMilesIsSet;

#if !__has_feature(objc_arc)
- (SearchOptions_t *) searchOptions;
- (void) setSearchOptions: (SearchOptions_t *) searchOptions;
#endif
- (BOOL) searchOptionsIsSet;

#if !__has_feature(objc_arc)
- (SearchOptions_t *) fallbackSearchOptions;
- (void) setFallbackSearchOptions: (SearchOptions_t *) fallbackSearchOptions;
#endif
- (BOOL) fallbackSearchOptionsIsSet;

@end

@implementation getDealOfferGeoSummariesWithin_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithLocation: (Location_t *) location maxMiles: (int32_t) maxMiles searchOptions: (SearchOptions_t *) searchOptions fallbackSearchOptions: (SearchOptions_t *) fallbackSearchOptions
{
  self = [super init];
  __location = [location retain_stub];
  __location_isset = YES;
  __maxMiles = maxMiles;
  __maxMiles_isset = YES;
  __searchOptions = [searchOptions retain_stub];
  __searchOptions_isset = YES;
  __fallbackSearchOptions = [fallbackSearchOptions retain_stub];
  __fallbackSearchOptions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain_stub];
    __location_isset = YES;
  }
  if ([decoder containsValueForKey: @"maxMiles"])
  {
    __maxMiles = [decoder decodeInt32ForKey: @"maxMiles"];
    __maxMiles_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchOptions"])
  {
    __searchOptions = [[decoder decodeObjectForKey: @"searchOptions"] retain_stub];
    __searchOptions_isset = YES;
  }
  if ([decoder containsValueForKey: @"fallbackSearchOptions"])
  {
    __fallbackSearchOptions = [[decoder decodeObjectForKey: @"fallbackSearchOptions"] retain_stub];
    __fallbackSearchOptions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
  if (__maxMiles_isset)
  {
    [encoder encodeInt32: __maxMiles forKey: @"maxMiles"];
  }
  if (__searchOptions_isset)
  {
    [encoder encodeObject: __searchOptions forKey: @"searchOptions"];
  }
  if (__fallbackSearchOptions_isset)
  {
    [encoder encodeObject: __fallbackSearchOptions forKey: @"fallbackSearchOptions"];
  }
}

- (void) dealloc
{
  [__location release_stub];
  [__searchOptions release_stub];
  [__fallbackSearchOptions release_stub];
  [super dealloc_stub];
}

- (Location_t *) location {
  return [[__location retain_stub] autorelease_stub];
}

- (void) setLocation: (Location_t *) location {
  [location retain_stub];
  [__location release_stub];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release_stub];
  __location = nil;
  __location_isset = NO;
}

- (int32_t) maxMiles {
  return __maxMiles;
}

- (void) setMaxMiles: (int32_t) maxMiles {
  __maxMiles = maxMiles;
  __maxMiles_isset = YES;
}

- (BOOL) maxMilesIsSet {
  return __maxMiles_isset;
}

- (void) unsetMaxMiles {
  __maxMiles_isset = NO;
}

- (SearchOptions_t *) searchOptions {
  return [[__searchOptions retain_stub] autorelease_stub];
}

- (void) setSearchOptions: (SearchOptions_t *) searchOptions {
  [searchOptions retain_stub];
  [__searchOptions release_stub];
  __searchOptions = searchOptions;
  __searchOptions_isset = YES;
}

- (BOOL) searchOptionsIsSet {
  return __searchOptions_isset;
}

- (void) unsetSearchOptions {
  [__searchOptions release_stub];
  __searchOptions = nil;
  __searchOptions_isset = NO;
}

- (SearchOptions_t *) fallbackSearchOptions {
  return [[__fallbackSearchOptions retain_stub] autorelease_stub];
}

- (void) setFallbackSearchOptions: (SearchOptions_t *) fallbackSearchOptions {
  [fallbackSearchOptions retain_stub];
  [__fallbackSearchOptions release_stub];
  __fallbackSearchOptions = fallbackSearchOptions;
  __fallbackSearchOptions_isset = YES;
}

- (BOOL) fallbackSearchOptionsIsSet {
  return __fallbackSearchOptions_isset;
}

- (void) unsetFallbackSearchOptions {
  [__fallbackSearchOptions release_stub];
  __fallbackSearchOptions = nil;
  __fallbackSearchOptions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Location_t *fieldValue = [[Location_t alloc] init];
          [fieldValue read: inProtocol];
          [self setLocation: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMaxMiles: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          SearchOptions_t *fieldValue = [[SearchOptions_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSearchOptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          SearchOptions_t *fieldValue = [[SearchOptions_t alloc] init];
          [fieldValue read: inProtocol];
          [self setFallbackSearchOptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getDealOfferGeoSummariesWithin_args"];
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 1];
      [__location write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__maxMiles_isset) {
    [outProtocol writeFieldBeginWithName: @"maxMiles" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __maxMiles];
    [outProtocol writeFieldEnd];
  }
  if (__searchOptions_isset) {
    if (__searchOptions != nil) {
      [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 3];
      [__searchOptions write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fallbackSearchOptions_isset) {
    if (__fallbackSearchOptions != nil) {
      [outProtocol writeFieldBeginWithName: @"fallbackSearchOptions" type: TType_STRUCT fieldID: 4];
      [__fallbackSearchOptions write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getDealOfferGeoSummariesWithin_args("];
  [ms appendString: @"location:"];
  [ms appendFormat: @"%@", __location];
  [ms appendString: @",maxMiles:"];
  [ms appendFormat: @"%i", __maxMiles];
  [ms appendString: @",searchOptions:"];
  [ms appendFormat: @"%@", __searchOptions];
  [ms appendString: @",fallbackSearchOptions:"];
  [ms appendFormat: @"%@", __fallbackSearchOptions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetDealOfferGeoSummariesWithin_result : NSObject <NSCoding> {
  DealOfferGeoSummariesResponse_t * __success;
  TServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) DealOfferGeoSummariesResponse_t * success;
@property (nonatomic, retain, getter=error, setter=setError:) TServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (DealOfferGeoSummariesResponse_t *) success error: (TServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (DealOfferGeoSummariesResponse_t *) success;
- (void) setSuccess: (DealOfferGeoSummariesResponse_t *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (TServiceException_t *) error;
- (void) setError: (TServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetDealOfferGeoSummariesWithin_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (DealOfferGeoSummariesResponse_t *) success error: (TServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (DealOfferGeoSummariesResponse_t *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (DealOfferGeoSummariesResponse_t *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (TServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (TServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          DealOfferGeoSummariesResponse_t *fieldValue = [[DealOfferGeoSummariesResponse_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          TServiceException_t *fieldValue = [[TServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDealOfferGeoSummariesWithin_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetDealOfferGeoSummariesWithin_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getMerchantsByDealOfferId_args : NSObject <NSCoding> {
  NSString * __dealOfferId;
  SearchOptions_t * __searchOptions;

  BOOL __dealOfferId_isset;
  BOOL __searchOptions_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=dealOfferId, setter=setDealOfferId:) NSString * dealOfferId;
@property (nonatomic, retain, getter=searchOptions, setter=setSearchOptions:) SearchOptions_t * searchOptions;
#endif

- (id) init;
- (id) initWithDealOfferId: (NSString *) dealOfferId searchOptions: (SearchOptions_t *) searchOptions;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) dealOfferId;
- (void) setDealOfferId: (NSString *) dealOfferId;
#endif
- (BOOL) dealOfferIdIsSet;

#if !__has_feature(objc_arc)
- (SearchOptions_t *) searchOptions;
- (void) setSearchOptions: (SearchOptions_t *) searchOptions;
#endif
- (BOOL) searchOptionsIsSet;

@end

@implementation getMerchantsByDealOfferId_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealOfferId: (NSString *) dealOfferId searchOptions: (SearchOptions_t *) searchOptions
{
  self = [super init];
  __dealOfferId = [dealOfferId retain_stub];
  __dealOfferId_isset = YES;
  __searchOptions = [searchOptions retain_stub];
  __searchOptions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealOfferId"])
  {
    __dealOfferId = [[decoder decodeObjectForKey: @"dealOfferId"] retain_stub];
    __dealOfferId_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchOptions"])
  {
    __searchOptions = [[decoder decodeObjectForKey: @"searchOptions"] retain_stub];
    __searchOptions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealOfferId_isset)
  {
    [encoder encodeObject: __dealOfferId forKey: @"dealOfferId"];
  }
  if (__searchOptions_isset)
  {
    [encoder encodeObject: __searchOptions forKey: @"searchOptions"];
  }
}

- (void) dealloc
{
  [__dealOfferId release_stub];
  [__searchOptions release_stub];
  [super dealloc_stub];
}

- (NSString *) dealOfferId {
  return [[__dealOfferId retain_stub] autorelease_stub];
}

- (void) setDealOfferId: (NSString *) dealOfferId {
  [dealOfferId retain_stub];
  [__dealOfferId release_stub];
  __dealOfferId = dealOfferId;
  __dealOfferId_isset = YES;
}

- (BOOL) dealOfferIdIsSet {
  return __dealOfferId_isset;
}

- (void) unsetDealOfferId {
  [__dealOfferId release_stub];
  __dealOfferId = nil;
  __dealOfferId_isset = NO;
}

- (SearchOptions_t *) searchOptions {
  return [[__searchOptions retain_stub] autorelease_stub];
}

- (void) setSearchOptions: (SearchOptions_t *) searchOptions {
  [searchOptions retain_stub];
  [__searchOptions release_stub];
  __searchOptions = searchOptions;
  __searchOptions_isset = YES;
}

- (BOOL) searchOptionsIsSet {
  return __searchOptions_isset;
}

- (void) unsetSearchOptions {
  [__searchOptions release_stub];
  __searchOptions = nil;
  __searchOptions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealOfferId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          SearchOptions_t *fieldValue = [[SearchOptions_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSearchOptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getMerchantsByDealOfferId_args"];
  if (__dealOfferId_isset) {
    if (__dealOfferId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealOfferId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__searchOptions_isset) {
    if (__searchOptions != nil) {
      [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 2];
      [__searchOptions write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getMerchantsByDealOfferId_args("];
  [ms appendString: @"dealOfferId:"];
  [ms appendFormat: @"\"%@\"", __dealOfferId];
  [ms appendString: @",searchOptions:"];
  [ms appendFormat: @"%@", __searchOptions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMerchantsByDealOfferId_result : NSObject <NSCoding> {
  MerchantsResponse_t * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) MerchantsResponse_t * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (MerchantsResponse_t *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (MerchantsResponse_t *) success;
- (void) setSuccess: (MerchantsResponse_t *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetMerchantsByDealOfferId_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (MerchantsResponse_t *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (MerchantsResponse_t *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (MerchantsResponse_t *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          MerchantsResponse_t *fieldValue = [[MerchantsResponse_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMerchantsByDealOfferId_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMerchantsByDealOfferId_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface validateCode_args : NSObject <NSCoding> {
  NSString * __code;
  NSString * __dealOfferId;

  BOOL __code_isset;
  BOOL __dealOfferId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=code, setter=setCode:) NSString * code;
@property (nonatomic, retain, getter=dealOfferId, setter=setDealOfferId:) NSString * dealOfferId;
#endif

- (id) init;
- (id) initWithCode: (NSString *) code dealOfferId: (NSString *) dealOfferId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) code;
- (void) setCode: (NSString *) code;
#endif
- (BOOL) codeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) dealOfferId;
- (void) setDealOfferId: (NSString *) dealOfferId;
#endif
- (BOOL) dealOfferIdIsSet;

@end

@implementation validateCode_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCode: (NSString *) code dealOfferId: (NSString *) dealOfferId
{
  self = [super init];
  __code = [code retain_stub];
  __code_isset = YES;
  __dealOfferId = [dealOfferId retain_stub];
  __dealOfferId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [[decoder decodeObjectForKey: @"code"] retain_stub];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"dealOfferId"])
  {
    __dealOfferId = [[decoder decodeObjectForKey: @"dealOfferId"] retain_stub];
    __dealOfferId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__code_isset)
  {
    [encoder encodeObject: __code forKey: @"code"];
  }
  if (__dealOfferId_isset)
  {
    [encoder encodeObject: __dealOfferId forKey: @"dealOfferId"];
  }
}

- (void) dealloc
{
  [__code release_stub];
  [__dealOfferId release_stub];
  [super dealloc_stub];
}

- (NSString *) code {
  return [[__code retain_stub] autorelease_stub];
}

- (void) setCode: (NSString *) code {
  [code retain_stub];
  [__code release_stub];
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  [__code release_stub];
  __code = nil;
  __code_isset = NO;
}

- (NSString *) dealOfferId {
  return [[__dealOfferId retain_stub] autorelease_stub];
}

- (void) setDealOfferId: (NSString *) dealOfferId {
  [dealOfferId retain_stub];
  [__dealOfferId release_stub];
  __dealOfferId = dealOfferId;
  __dealOfferId_isset = YES;
}

- (BOOL) dealOfferIdIsSet {
  return __dealOfferId_isset;
}

- (void) unsetDealOfferId {
  [__dealOfferId release_stub];
  __dealOfferId = nil;
  __dealOfferId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealOfferId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"validateCode_args"];
  if (__code_isset) {
    if (__code != nil) {
      [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __code];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dealOfferId_isset) {
    if (__dealOfferId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __dealOfferId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"validateCode_args("];
  [ms appendString: @"code:"];
  [ms appendFormat: @"\"%@\"", __code];
  [ms appendString: @",dealOfferId:"];
  [ms appendFormat: @"\"%@\"", __dealOfferId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ValidateCode_result : NSObject <NSCoding> {
  ValidateCodeResponse_t * __success;
  TServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ValidateCodeResponse_t * success;
@property (nonatomic, retain, getter=error, setter=setError:) TServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (ValidateCodeResponse_t *) success error: (TServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (ValidateCodeResponse_t *) success;
- (void) setSuccess: (ValidateCodeResponse_t *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (TServiceException_t *) error;
- (void) setError: (TServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation ValidateCode_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ValidateCodeResponse_t *) success error: (TServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (ValidateCodeResponse_t *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ValidateCodeResponse_t *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (TServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (TServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ValidateCodeResponse_t *fieldValue = [[ValidateCodeResponse_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          TServiceException_t *fieldValue = [[TServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ValidateCode_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ValidateCode_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface purchaseWithCard_args : NSObject <NSCoding> {
  NSString * __dealOfferId;
  PaymentDetail_t * __paymentDetail;
  NSMutableDictionary * __paymentProperties;

  BOOL __dealOfferId_isset;
  BOOL __paymentDetail_isset;
  BOOL __paymentProperties_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=dealOfferId, setter=setDealOfferId:) NSString * dealOfferId;
@property (nonatomic, retain, getter=paymentDetail, setter=setPaymentDetail:) PaymentDetail_t * paymentDetail;
@property (nonatomic, retain, getter=paymentProperties, setter=setPaymentProperties:) NSMutableDictionary * paymentProperties;
#endif

- (id) init;
- (id) initWithDealOfferId: (NSString *) dealOfferId paymentDetail: (PaymentDetail_t *) paymentDetail paymentProperties: (NSMutableDictionary *) paymentProperties;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) dealOfferId;
- (void) setDealOfferId: (NSString *) dealOfferId;
#endif
- (BOOL) dealOfferIdIsSet;

#if !__has_feature(objc_arc)
- (PaymentDetail_t *) paymentDetail;
- (void) setPaymentDetail: (PaymentDetail_t *) paymentDetail;
#endif
- (BOOL) paymentDetailIsSet;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) paymentProperties;
- (void) setPaymentProperties: (NSMutableDictionary *) paymentProperties;
#endif
- (BOOL) paymentPropertiesIsSet;

@end

@implementation purchaseWithCard_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealOfferId: (NSString *) dealOfferId paymentDetail: (PaymentDetail_t *) paymentDetail paymentProperties: (NSMutableDictionary *) paymentProperties
{
  self = [super init];
  __dealOfferId = [dealOfferId retain_stub];
  __dealOfferId_isset = YES;
  __paymentDetail = [paymentDetail retain_stub];
  __paymentDetail_isset = YES;
  __paymentProperties = [paymentProperties retain_stub];
  __paymentProperties_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealOfferId"])
  {
    __dealOfferId = [[decoder decodeObjectForKey: @"dealOfferId"] retain_stub];
    __dealOfferId_isset = YES;
  }
  if ([decoder containsValueForKey: @"paymentDetail"])
  {
    __paymentDetail = [[decoder decodeObjectForKey: @"paymentDetail"] retain_stub];
    __paymentDetail_isset = YES;
  }
  if ([decoder containsValueForKey: @"paymentProperties"])
  {
    __paymentProperties = [[decoder decodeObjectForKey: @"paymentProperties"] retain_stub];
    __paymentProperties_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealOfferId_isset)
  {
    [encoder encodeObject: __dealOfferId forKey: @"dealOfferId"];
  }
  if (__paymentDetail_isset)
  {
    [encoder encodeObject: __paymentDetail forKey: @"paymentDetail"];
  }
  if (__paymentProperties_isset)
  {
    [encoder encodeObject: __paymentProperties forKey: @"paymentProperties"];
  }
}

- (void) dealloc
{
  [__dealOfferId release_stub];
  [__paymentDetail release_stub];
  [__paymentProperties release_stub];
  [super dealloc_stub];
}

- (NSString *) dealOfferId {
  return [[__dealOfferId retain_stub] autorelease_stub];
}

- (void) setDealOfferId: (NSString *) dealOfferId {
  [dealOfferId retain_stub];
  [__dealOfferId release_stub];
  __dealOfferId = dealOfferId;
  __dealOfferId_isset = YES;
}

- (BOOL) dealOfferIdIsSet {
  return __dealOfferId_isset;
}

- (void) unsetDealOfferId {
  [__dealOfferId release_stub];
  __dealOfferId = nil;
  __dealOfferId_isset = NO;
}

- (PaymentDetail_t *) paymentDetail {
  return [[__paymentDetail retain_stub] autorelease_stub];
}

- (void) setPaymentDetail: (PaymentDetail_t *) paymentDetail {
  [paymentDetail retain_stub];
  [__paymentDetail release_stub];
  __paymentDetail = paymentDetail;
  __paymentDetail_isset = YES;
}

- (BOOL) paymentDetailIsSet {
  return __paymentDetail_isset;
}

- (void) unsetPaymentDetail {
  [__paymentDetail release_stub];
  __paymentDetail = nil;
  __paymentDetail_isset = NO;
}

- (NSMutableDictionary *) paymentProperties {
  return [[__paymentProperties retain_stub] autorelease_stub];
}

- (void) setPaymentProperties: (NSMutableDictionary *) paymentProperties {
  [paymentProperties retain_stub];
  [__paymentProperties release_stub];
  __paymentProperties = paymentProperties;
  __paymentProperties_isset = YES;
}

- (BOOL) paymentPropertiesIsSet {
  return __paymentProperties_isset;
}

- (void) unsetPaymentProperties {
  [__paymentProperties release_stub];
  __paymentProperties = nil;
  __paymentProperties_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealOfferId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          PaymentDetail_t *fieldValue = [[PaymentDetail_t alloc] init];
          [fieldValue read: inProtocol];
          [self setPaymentDetail: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size65;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size65];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size65];
          int _i66;
          for (_i66 = 0; _i66 < _size65; ++_i66)
          {
            NSString * _key67 = [inProtocol readString];
            NSString * _val68 = [inProtocol readString];
            [fieldValue setObject: _val68 forKey: _key67];
          }
          [inProtocol readMapEnd];
          [self setPaymentProperties: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"purchaseWithCard_args"];
  if (__dealOfferId_isset) {
    if (__dealOfferId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealOfferId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__paymentDetail_isset) {
    if (__paymentDetail != nil) {
      [outProtocol writeFieldBeginWithName: @"paymentDetail" type: TType_STRUCT fieldID: 2];
      [__paymentDetail write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__paymentProperties_isset) {
    if (__paymentProperties != nil) {
      [outProtocol writeFieldBeginWithName: @"paymentProperties" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__paymentProperties count]];
        NSEnumerator * _iter69 = [__paymentProperties keyEnumerator];
        id key70;
        while ((key70 = [_iter69 nextObject]))
        {
          [outProtocol writeString: key70];
          [outProtocol writeString: [__paymentProperties objectForKey: key70]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"purchaseWithCard_args("];
  [ms appendString: @"dealOfferId:"];
  [ms appendFormat: @"\"%@\"", __dealOfferId];
  [ms appendString: @",paymentDetail:"];
  [ms appendFormat: @"%@", __paymentDetail];
  [ms appendString: @",paymentProperties:"];
  [ms appendFormat: @"%@", __paymentProperties];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface PurchaseWithCard_result : NSObject <NSCoding> {
  TransactionResult_t * __success;
  TServiceException_t * __serviceException;
  TUserException_t * __userException;
  TNotFoundException_t * __notFoundException;

  BOOL __success_isset;
  BOOL __serviceException_isset;
  BOOL __userException_isset;
  BOOL __notFoundException_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TransactionResult_t * success;
@property (nonatomic, retain, getter=serviceException, setter=setServiceException:) TServiceException_t * serviceException;
@property (nonatomic, retain, getter=userException, setter=setUserException:) TUserException_t * userException;
@property (nonatomic, retain, getter=notFoundException, setter=setNotFoundException:) TNotFoundException_t * notFoundException;
#endif

- (id) init;
- (id) initWithSuccess: (TransactionResult_t *) success serviceException: (TServiceException_t *) serviceException userException: (TUserException_t *) userException notFoundException: (TNotFoundException_t *) notFoundException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (TransactionResult_t *) success;
- (void) setSuccess: (TransactionResult_t *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (TServiceException_t *) serviceException;
- (void) setServiceException: (TServiceException_t *) serviceException;
#endif
- (BOOL) serviceExceptionIsSet;

#if !__has_feature(objc_arc)
- (TUserException_t *) userException;
- (void) setUserException: (TUserException_t *) userException;
#endif
- (BOOL) userExceptionIsSet;

#if !__has_feature(objc_arc)
- (TNotFoundException_t *) notFoundException;
- (void) setNotFoundException: (TNotFoundException_t *) notFoundException;
#endif
- (BOOL) notFoundExceptionIsSet;

@end

@implementation PurchaseWithCard_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TransactionResult_t *) success serviceException: (TServiceException_t *) serviceException userException: (TUserException_t *) userException notFoundException: (TNotFoundException_t *) notFoundException
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __serviceException = [serviceException retain_stub];
  __serviceException_isset = YES;
  __userException = [userException retain_stub];
  __userException_isset = YES;
  __notFoundException = [notFoundException retain_stub];
  __notFoundException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceException"])
  {
    __serviceException = [[decoder decodeObjectForKey: @"serviceException"] retain_stub];
    __serviceException_isset = YES;
  }
  if ([decoder containsValueForKey: @"userException"])
  {
    __userException = [[decoder decodeObjectForKey: @"userException"] retain_stub];
    __userException_isset = YES;
  }
  if ([decoder containsValueForKey: @"notFoundException"])
  {
    __notFoundException = [[decoder decodeObjectForKey: @"notFoundException"] retain_stub];
    __notFoundException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__serviceException_isset)
  {
    [encoder encodeObject: __serviceException forKey: @"serviceException"];
  }
  if (__userException_isset)
  {
    [encoder encodeObject: __userException forKey: @"userException"];
  }
  if (__notFoundException_isset)
  {
    [encoder encodeObject: __notFoundException forKey: @"notFoundException"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__serviceException release_stub];
  [__userException release_stub];
  [__notFoundException release_stub];
  [super dealloc_stub];
}

- (TransactionResult_t *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TransactionResult_t *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (TServiceException_t *) serviceException {
  return [[__serviceException retain_stub] autorelease_stub];
}

- (void) setServiceException: (TServiceException_t *) serviceException {
  [serviceException retain_stub];
  [__serviceException release_stub];
  __serviceException = serviceException;
  __serviceException_isset = YES;
}

- (BOOL) serviceExceptionIsSet {
  return __serviceException_isset;
}

- (void) unsetServiceException {
  [__serviceException release_stub];
  __serviceException = nil;
  __serviceException_isset = NO;
}

- (TUserException_t *) userException {
  return [[__userException retain_stub] autorelease_stub];
}

- (void) setUserException: (TUserException_t *) userException {
  [userException retain_stub];
  [__userException release_stub];
  __userException = userException;
  __userException_isset = YES;
}

- (BOOL) userExceptionIsSet {
  return __userException_isset;
}

- (void) unsetUserException {
  [__userException release_stub];
  __userException = nil;
  __userException_isset = NO;
}

- (TNotFoundException_t *) notFoundException {
  return [[__notFoundException retain_stub] autorelease_stub];
}

- (void) setNotFoundException: (TNotFoundException_t *) notFoundException {
  [notFoundException retain_stub];
  [__notFoundException release_stub];
  __notFoundException = notFoundException;
  __notFoundException_isset = YES;
}

- (BOOL) notFoundExceptionIsSet {
  return __notFoundException_isset;
}

- (void) unsetNotFoundException {
  [__notFoundException release_stub];
  __notFoundException = nil;
  __notFoundException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TransactionResult_t *fieldValue = [[TransactionResult_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          TServiceException_t *fieldValue = [[TServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setServiceException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TUserException_t *fieldValue = [[TUserException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setUserException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          TNotFoundException_t *fieldValue = [[TNotFoundException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setNotFoundException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PurchaseWithCard_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__serviceException_isset) {
    if (__serviceException != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceException" type: TType_STRUCT fieldID: 1];
      [__serviceException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__userException_isset) {
    if (__userException != nil) {
      [outProtocol writeFieldBeginWithName: @"userException" type: TType_STRUCT fieldID: 2];
      [__userException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__notFoundException_isset) {
    if (__notFoundException != nil) {
      [outProtocol writeFieldBeginWithName: @"notFoundException" type: TType_STRUCT fieldID: 3];
      [__notFoundException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PurchaseWithCard_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",serviceException:"];
  [ms appendFormat: @"%@", __serviceException];
  [ms appendString: @",userException:"];
  [ms appendFormat: @"%@", __userException];
  [ms appendString: @",notFoundException:"];
  [ms appendFormat: @"%@", __notFoundException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface purchaseWithCode_args : NSObject <NSCoding> {
  NSString * __dealOfferId;
  NSString * __paymentCode;
  NSMutableDictionary * __paymentProperties;

  BOOL __dealOfferId_isset;
  BOOL __paymentCode_isset;
  BOOL __paymentProperties_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=dealOfferId, setter=setDealOfferId:) NSString * dealOfferId;
@property (nonatomic, retain, getter=paymentCode, setter=setPaymentCode:) NSString * paymentCode;
@property (nonatomic, retain, getter=paymentProperties, setter=setPaymentProperties:) NSMutableDictionary * paymentProperties;
#endif

- (id) init;
- (id) initWithDealOfferId: (NSString *) dealOfferId paymentCode: (NSString *) paymentCode paymentProperties: (NSMutableDictionary *) paymentProperties;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) dealOfferId;
- (void) setDealOfferId: (NSString *) dealOfferId;
#endif
- (BOOL) dealOfferIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) paymentCode;
- (void) setPaymentCode: (NSString *) paymentCode;
#endif
- (BOOL) paymentCodeIsSet;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) paymentProperties;
- (void) setPaymentProperties: (NSMutableDictionary *) paymentProperties;
#endif
- (BOOL) paymentPropertiesIsSet;

@end

@implementation purchaseWithCode_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealOfferId: (NSString *) dealOfferId paymentCode: (NSString *) paymentCode paymentProperties: (NSMutableDictionary *) paymentProperties
{
  self = [super init];
  __dealOfferId = [dealOfferId retain_stub];
  __dealOfferId_isset = YES;
  __paymentCode = [paymentCode retain_stub];
  __paymentCode_isset = YES;
  __paymentProperties = [paymentProperties retain_stub];
  __paymentProperties_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealOfferId"])
  {
    __dealOfferId = [[decoder decodeObjectForKey: @"dealOfferId"] retain_stub];
    __dealOfferId_isset = YES;
  }
  if ([decoder containsValueForKey: @"paymentCode"])
  {
    __paymentCode = [[decoder decodeObjectForKey: @"paymentCode"] retain_stub];
    __paymentCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"paymentProperties"])
  {
    __paymentProperties = [[decoder decodeObjectForKey: @"paymentProperties"] retain_stub];
    __paymentProperties_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealOfferId_isset)
  {
    [encoder encodeObject: __dealOfferId forKey: @"dealOfferId"];
  }
  if (__paymentCode_isset)
  {
    [encoder encodeObject: __paymentCode forKey: @"paymentCode"];
  }
  if (__paymentProperties_isset)
  {
    [encoder encodeObject: __paymentProperties forKey: @"paymentProperties"];
  }
}

- (void) dealloc
{
  [__dealOfferId release_stub];
  [__paymentCode release_stub];
  [__paymentProperties release_stub];
  [super dealloc_stub];
}

- (NSString *) dealOfferId {
  return [[__dealOfferId retain_stub] autorelease_stub];
}

- (void) setDealOfferId: (NSString *) dealOfferId {
  [dealOfferId retain_stub];
  [__dealOfferId release_stub];
  __dealOfferId = dealOfferId;
  __dealOfferId_isset = YES;
}

- (BOOL) dealOfferIdIsSet {
  return __dealOfferId_isset;
}

- (void) unsetDealOfferId {
  [__dealOfferId release_stub];
  __dealOfferId = nil;
  __dealOfferId_isset = NO;
}

- (NSString *) paymentCode {
  return [[__paymentCode retain_stub] autorelease_stub];
}

- (void) setPaymentCode: (NSString *) paymentCode {
  [paymentCode retain_stub];
  [__paymentCode release_stub];
  __paymentCode = paymentCode;
  __paymentCode_isset = YES;
}

- (BOOL) paymentCodeIsSet {
  return __paymentCode_isset;
}

- (void) unsetPaymentCode {
  [__paymentCode release_stub];
  __paymentCode = nil;
  __paymentCode_isset = NO;
}

- (NSMutableDictionary *) paymentProperties {
  return [[__paymentProperties retain_stub] autorelease_stub];
}

- (void) setPaymentProperties: (NSMutableDictionary *) paymentProperties {
  [paymentProperties retain_stub];
  [__paymentProperties release_stub];
  __paymentProperties = paymentProperties;
  __paymentProperties_isset = YES;
}

- (BOOL) paymentPropertiesIsSet {
  return __paymentProperties_isset;
}

- (void) unsetPaymentProperties {
  [__paymentProperties release_stub];
  __paymentProperties = nil;
  __paymentProperties_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealOfferId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPaymentCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size71;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size71];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size71];
          int _i72;
          for (_i72 = 0; _i72 < _size71; ++_i72)
          {
            NSString * _key73 = [inProtocol readString];
            NSString * _val74 = [inProtocol readString];
            [fieldValue setObject: _val74 forKey: _key73];
          }
          [inProtocol readMapEnd];
          [self setPaymentProperties: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"purchaseWithCode_args"];
  if (__dealOfferId_isset) {
    if (__dealOfferId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealOfferId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__paymentCode_isset) {
    if (__paymentCode != nil) {
      [outProtocol writeFieldBeginWithName: @"paymentCode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __paymentCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__paymentProperties_isset) {
    if (__paymentProperties != nil) {
      [outProtocol writeFieldBeginWithName: @"paymentProperties" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__paymentProperties count]];
        NSEnumerator * _iter75 = [__paymentProperties keyEnumerator];
        id key76;
        while ((key76 = [_iter75 nextObject]))
        {
          [outProtocol writeString: key76];
          [outProtocol writeString: [__paymentProperties objectForKey: key76]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"purchaseWithCode_args("];
  [ms appendString: @"dealOfferId:"];
  [ms appendFormat: @"\"%@\"", __dealOfferId];
  [ms appendString: @",paymentCode:"];
  [ms appendFormat: @"\"%@\"", __paymentCode];
  [ms appendString: @",paymentProperties:"];
  [ms appendFormat: @"%@", __paymentProperties];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface PurchaseWithCode_result : NSObject <NSCoding> {
  TransactionResult_t * __success;
  TServiceException_t * __serviceException;
  TUserException_t * __userException;
  TNotFoundException_t * __notFoundException;

  BOOL __success_isset;
  BOOL __serviceException_isset;
  BOOL __userException_isset;
  BOOL __notFoundException_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TransactionResult_t * success;
@property (nonatomic, retain, getter=serviceException, setter=setServiceException:) TServiceException_t * serviceException;
@property (nonatomic, retain, getter=userException, setter=setUserException:) TUserException_t * userException;
@property (nonatomic, retain, getter=notFoundException, setter=setNotFoundException:) TNotFoundException_t * notFoundException;
#endif

- (id) init;
- (id) initWithSuccess: (TransactionResult_t *) success serviceException: (TServiceException_t *) serviceException userException: (TUserException_t *) userException notFoundException: (TNotFoundException_t *) notFoundException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (TransactionResult_t *) success;
- (void) setSuccess: (TransactionResult_t *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (TServiceException_t *) serviceException;
- (void) setServiceException: (TServiceException_t *) serviceException;
#endif
- (BOOL) serviceExceptionIsSet;

#if !__has_feature(objc_arc)
- (TUserException_t *) userException;
- (void) setUserException: (TUserException_t *) userException;
#endif
- (BOOL) userExceptionIsSet;

#if !__has_feature(objc_arc)
- (TNotFoundException_t *) notFoundException;
- (void) setNotFoundException: (TNotFoundException_t *) notFoundException;
#endif
- (BOOL) notFoundExceptionIsSet;

@end

@implementation PurchaseWithCode_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TransactionResult_t *) success serviceException: (TServiceException_t *) serviceException userException: (TUserException_t *) userException notFoundException: (TNotFoundException_t *) notFoundException
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __serviceException = [serviceException retain_stub];
  __serviceException_isset = YES;
  __userException = [userException retain_stub];
  __userException_isset = YES;
  __notFoundException = [notFoundException retain_stub];
  __notFoundException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceException"])
  {
    __serviceException = [[decoder decodeObjectForKey: @"serviceException"] retain_stub];
    __serviceException_isset = YES;
  }
  if ([decoder containsValueForKey: @"userException"])
  {
    __userException = [[decoder decodeObjectForKey: @"userException"] retain_stub];
    __userException_isset = YES;
  }
  if ([decoder containsValueForKey: @"notFoundException"])
  {
    __notFoundException = [[decoder decodeObjectForKey: @"notFoundException"] retain_stub];
    __notFoundException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__serviceException_isset)
  {
    [encoder encodeObject: __serviceException forKey: @"serviceException"];
  }
  if (__userException_isset)
  {
    [encoder encodeObject: __userException forKey: @"userException"];
  }
  if (__notFoundException_isset)
  {
    [encoder encodeObject: __notFoundException forKey: @"notFoundException"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__serviceException release_stub];
  [__userException release_stub];
  [__notFoundException release_stub];
  [super dealloc_stub];
}

- (TransactionResult_t *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TransactionResult_t *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (TServiceException_t *) serviceException {
  return [[__serviceException retain_stub] autorelease_stub];
}

- (void) setServiceException: (TServiceException_t *) serviceException {
  [serviceException retain_stub];
  [__serviceException release_stub];
  __serviceException = serviceException;
  __serviceException_isset = YES;
}

- (BOOL) serviceExceptionIsSet {
  return __serviceException_isset;
}

- (void) unsetServiceException {
  [__serviceException release_stub];
  __serviceException = nil;
  __serviceException_isset = NO;
}

- (TUserException_t *) userException {
  return [[__userException retain_stub] autorelease_stub];
}

- (void) setUserException: (TUserException_t *) userException {
  [userException retain_stub];
  [__userException release_stub];
  __userException = userException;
  __userException_isset = YES;
}

- (BOOL) userExceptionIsSet {
  return __userException_isset;
}

- (void) unsetUserException {
  [__userException release_stub];
  __userException = nil;
  __userException_isset = NO;
}

- (TNotFoundException_t *) notFoundException {
  return [[__notFoundException retain_stub] autorelease_stub];
}

- (void) setNotFoundException: (TNotFoundException_t *) notFoundException {
  [notFoundException retain_stub];
  [__notFoundException release_stub];
  __notFoundException = notFoundException;
  __notFoundException_isset = YES;
}

- (BOOL) notFoundExceptionIsSet {
  return __notFoundException_isset;
}

- (void) unsetNotFoundException {
  [__notFoundException release_stub];
  __notFoundException = nil;
  __notFoundException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TransactionResult_t *fieldValue = [[TransactionResult_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          TServiceException_t *fieldValue = [[TServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setServiceException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TUserException_t *fieldValue = [[TUserException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setUserException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          TNotFoundException_t *fieldValue = [[TNotFoundException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setNotFoundException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PurchaseWithCode_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__serviceException_isset) {
    if (__serviceException != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceException" type: TType_STRUCT fieldID: 1];
      [__serviceException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__userException_isset) {
    if (__userException != nil) {
      [outProtocol writeFieldBeginWithName: @"userException" type: TType_STRUCT fieldID: 2];
      [__userException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__notFoundException_isset) {
    if (__notFoundException != nil) {
      [outProtocol writeFieldBeginWithName: @"notFoundException" type: TType_STRUCT fieldID: 3];
      [__notFoundException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PurchaseWithCode_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",serviceException:"];
  [ms appendFormat: @"%@", __serviceException];
  [ms appendString: @",userException:"];
  [ms appendFormat: @"%@", __userException];
  [ms appendString: @",notFoundException:"];
  [ms appendFormat: @"%@", __notFoundException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface purchaseWithNonce_args : NSObject <NSCoding> {
  NSString * __dealOfferId;
  NSString * __nonce;
  NSMutableDictionary * __paymentProperties;

  BOOL __dealOfferId_isset;
  BOOL __nonce_isset;
  BOOL __paymentProperties_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=dealOfferId, setter=setDealOfferId:) NSString * dealOfferId;
@property (nonatomic, retain, getter=nonce, setter=setNonce:) NSString * nonce;
@property (nonatomic, retain, getter=paymentProperties, setter=setPaymentProperties:) NSMutableDictionary * paymentProperties;
#endif

- (id) init;
- (id) initWithDealOfferId: (NSString *) dealOfferId nonce: (NSString *) nonce paymentProperties: (NSMutableDictionary *) paymentProperties;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) dealOfferId;
- (void) setDealOfferId: (NSString *) dealOfferId;
#endif
- (BOOL) dealOfferIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) nonce;
- (void) setNonce: (NSString *) nonce;
#endif
- (BOOL) nonceIsSet;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) paymentProperties;
- (void) setPaymentProperties: (NSMutableDictionary *) paymentProperties;
#endif
- (BOOL) paymentPropertiesIsSet;

@end

@implementation purchaseWithNonce_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealOfferId: (NSString *) dealOfferId nonce: (NSString *) nonce paymentProperties: (NSMutableDictionary *) paymentProperties
{
  self = [super init];
  __dealOfferId = [dealOfferId retain_stub];
  __dealOfferId_isset = YES;
  __nonce = [nonce retain_stub];
  __nonce_isset = YES;
  __paymentProperties = [paymentProperties retain_stub];
  __paymentProperties_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealOfferId"])
  {
    __dealOfferId = [[decoder decodeObjectForKey: @"dealOfferId"] retain_stub];
    __dealOfferId_isset = YES;
  }
  if ([decoder containsValueForKey: @"nonce"])
  {
    __nonce = [[decoder decodeObjectForKey: @"nonce"] retain_stub];
    __nonce_isset = YES;
  }
  if ([decoder containsValueForKey: @"paymentProperties"])
  {
    __paymentProperties = [[decoder decodeObjectForKey: @"paymentProperties"] retain_stub];
    __paymentProperties_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealOfferId_isset)
  {
    [encoder encodeObject: __dealOfferId forKey: @"dealOfferId"];
  }
  if (__nonce_isset)
  {
    [encoder encodeObject: __nonce forKey: @"nonce"];
  }
  if (__paymentProperties_isset)
  {
    [encoder encodeObject: __paymentProperties forKey: @"paymentProperties"];
  }
}

- (void) dealloc
{
  [__dealOfferId release_stub];
  [__nonce release_stub];
  [__paymentProperties release_stub];
  [super dealloc_stub];
}

- (NSString *) dealOfferId {
  return [[__dealOfferId retain_stub] autorelease_stub];
}

- (void) setDealOfferId: (NSString *) dealOfferId {
  [dealOfferId retain_stub];
  [__dealOfferId release_stub];
  __dealOfferId = dealOfferId;
  __dealOfferId_isset = YES;
}

- (BOOL) dealOfferIdIsSet {
  return __dealOfferId_isset;
}

- (void) unsetDealOfferId {
  [__dealOfferId release_stub];
  __dealOfferId = nil;
  __dealOfferId_isset = NO;
}

- (NSString *) nonce {
  return [[__nonce retain_stub] autorelease_stub];
}

- (void) setNonce: (NSString *) nonce {
  [nonce retain_stub];
  [__nonce release_stub];
  __nonce = nonce;
  __nonce_isset = YES;
}

- (BOOL) nonceIsSet {
  return __nonce_isset;
}

- (void) unsetNonce {
  [__nonce release_stub];
  __nonce = nil;
  __nonce_isset = NO;
}

- (NSMutableDictionary *) paymentProperties {
  return [[__paymentProperties retain_stub] autorelease_stub];
}

- (void) setPaymentProperties: (NSMutableDictionary *) paymentProperties {
  [paymentProperties retain_stub];
  [__paymentProperties release_stub];
  __paymentProperties = paymentProperties;
  __paymentProperties_isset = YES;
}

- (BOOL) paymentPropertiesIsSet {
  return __paymentProperties_isset;
}

- (void) unsetPaymentProperties {
  [__paymentProperties release_stub];
  __paymentProperties = nil;
  __paymentProperties_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealOfferId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNonce: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size77;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size77];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size77];
          int _i78;
          for (_i78 = 0; _i78 < _size77; ++_i78)
          {
            NSString * _key79 = [inProtocol readString];
            NSString * _val80 = [inProtocol readString];
            [fieldValue setObject: _val80 forKey: _key79];
          }
          [inProtocol readMapEnd];
          [self setPaymentProperties: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"purchaseWithNonce_args"];
  if (__dealOfferId_isset) {
    if (__dealOfferId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealOfferId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__nonce_isset) {
    if (__nonce != nil) {
      [outProtocol writeFieldBeginWithName: @"nonce" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __nonce];
      [outProtocol writeFieldEnd];
    }
  }
  if (__paymentProperties_isset) {
    if (__paymentProperties != nil) {
      [outProtocol writeFieldBeginWithName: @"paymentProperties" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__paymentProperties count]];
        NSEnumerator * _iter81 = [__paymentProperties keyEnumerator];
        id key82;
        while ((key82 = [_iter81 nextObject]))
        {
          [outProtocol writeString: key82];
          [outProtocol writeString: [__paymentProperties objectForKey: key82]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"purchaseWithNonce_args("];
  [ms appendString: @"dealOfferId:"];
  [ms appendFormat: @"\"%@\"", __dealOfferId];
  [ms appendString: @",nonce:"];
  [ms appendFormat: @"\"%@\"", __nonce];
  [ms appendString: @",paymentProperties:"];
  [ms appendFormat: @"%@", __paymentProperties];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface PurchaseWithNonce_result : NSObject <NSCoding> {
  TransactionResult_t * __success;
  TServiceException_t * __serviceException;
  TUserException_t * __userException;
  TNotFoundException_t * __notFoundException;

  BOOL __success_isset;
  BOOL __serviceException_isset;
  BOOL __userException_isset;
  BOOL __notFoundException_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TransactionResult_t * success;
@property (nonatomic, retain, getter=serviceException, setter=setServiceException:) TServiceException_t * serviceException;
@property (nonatomic, retain, getter=userException, setter=setUserException:) TUserException_t * userException;
@property (nonatomic, retain, getter=notFoundException, setter=setNotFoundException:) TNotFoundException_t * notFoundException;
#endif

- (id) init;
- (id) initWithSuccess: (TransactionResult_t *) success serviceException: (TServiceException_t *) serviceException userException: (TUserException_t *) userException notFoundException: (TNotFoundException_t *) notFoundException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (TransactionResult_t *) success;
- (void) setSuccess: (TransactionResult_t *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (TServiceException_t *) serviceException;
- (void) setServiceException: (TServiceException_t *) serviceException;
#endif
- (BOOL) serviceExceptionIsSet;

#if !__has_feature(objc_arc)
- (TUserException_t *) userException;
- (void) setUserException: (TUserException_t *) userException;
#endif
- (BOOL) userExceptionIsSet;

#if !__has_feature(objc_arc)
- (TNotFoundException_t *) notFoundException;
- (void) setNotFoundException: (TNotFoundException_t *) notFoundException;
#endif
- (BOOL) notFoundExceptionIsSet;

@end

@implementation PurchaseWithNonce_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TransactionResult_t *) success serviceException: (TServiceException_t *) serviceException userException: (TUserException_t *) userException notFoundException: (TNotFoundException_t *) notFoundException
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __serviceException = [serviceException retain_stub];
  __serviceException_isset = YES;
  __userException = [userException retain_stub];
  __userException_isset = YES;
  __notFoundException = [notFoundException retain_stub];
  __notFoundException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceException"])
  {
    __serviceException = [[decoder decodeObjectForKey: @"serviceException"] retain_stub];
    __serviceException_isset = YES;
  }
  if ([decoder containsValueForKey: @"userException"])
  {
    __userException = [[decoder decodeObjectForKey: @"userException"] retain_stub];
    __userException_isset = YES;
  }
  if ([decoder containsValueForKey: @"notFoundException"])
  {
    __notFoundException = [[decoder decodeObjectForKey: @"notFoundException"] retain_stub];
    __notFoundException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__serviceException_isset)
  {
    [encoder encodeObject: __serviceException forKey: @"serviceException"];
  }
  if (__userException_isset)
  {
    [encoder encodeObject: __userException forKey: @"userException"];
  }
  if (__notFoundException_isset)
  {
    [encoder encodeObject: __notFoundException forKey: @"notFoundException"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__serviceException release_stub];
  [__userException release_stub];
  [__notFoundException release_stub];
  [super dealloc_stub];
}

- (TransactionResult_t *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TransactionResult_t *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (TServiceException_t *) serviceException {
  return [[__serviceException retain_stub] autorelease_stub];
}

- (void) setServiceException: (TServiceException_t *) serviceException {
  [serviceException retain_stub];
  [__serviceException release_stub];
  __serviceException = serviceException;
  __serviceException_isset = YES;
}

- (BOOL) serviceExceptionIsSet {
  return __serviceException_isset;
}

- (void) unsetServiceException {
  [__serviceException release_stub];
  __serviceException = nil;
  __serviceException_isset = NO;
}

- (TUserException_t *) userException {
  return [[__userException retain_stub] autorelease_stub];
}

- (void) setUserException: (TUserException_t *) userException {
  [userException retain_stub];
  [__userException release_stub];
  __userException = userException;
  __userException_isset = YES;
}

- (BOOL) userExceptionIsSet {
  return __userException_isset;
}

- (void) unsetUserException {
  [__userException release_stub];
  __userException = nil;
  __userException_isset = NO;
}

- (TNotFoundException_t *) notFoundException {
  return [[__notFoundException retain_stub] autorelease_stub];
}

- (void) setNotFoundException: (TNotFoundException_t *) notFoundException {
  [notFoundException retain_stub];
  [__notFoundException release_stub];
  __notFoundException = notFoundException;
  __notFoundException_isset = YES;
}

- (BOOL) notFoundExceptionIsSet {
  return __notFoundException_isset;
}

- (void) unsetNotFoundException {
  [__notFoundException release_stub];
  __notFoundException = nil;
  __notFoundException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TransactionResult_t *fieldValue = [[TransactionResult_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          TServiceException_t *fieldValue = [[TServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setServiceException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TUserException_t *fieldValue = [[TUserException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setUserException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          TNotFoundException_t *fieldValue = [[TNotFoundException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setNotFoundException: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PurchaseWithNonce_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__serviceException_isset) {
    if (__serviceException != nil) {
      [outProtocol writeFieldBeginWithName: @"serviceException" type: TType_STRUCT fieldID: 1];
      [__serviceException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__userException_isset) {
    if (__userException != nil) {
      [outProtocol writeFieldBeginWithName: @"userException" type: TType_STRUCT fieldID: 2];
      [__userException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__notFoundException_isset) {
    if (__notFoundException != nil) {
      [outProtocol writeFieldBeginWithName: @"notFoundException" type: TType_STRUCT fieldID: 3];
      [__notFoundException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PurchaseWithNonce_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",serviceException:"];
  [ms appendFormat: @"%@", __serviceException];
  [ms appendString: @",userException:"];
  [ms appendFormat: @"%@", __userException];
  [ms appendString: @",notFoundException:"];
  [ms appendFormat: @"%@", __notFoundException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface generateBraintreeClientToken_args : NSObject <NSCoding> {
  NSString * __dealAcquireId;
  Location_t * __location;

  BOOL __dealAcquireId_isset;
  BOOL __location_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=dealAcquireId, setter=setDealAcquireId:) NSString * dealAcquireId;
@property (nonatomic, retain, getter=location, setter=setLocation:) Location_t * location;
#endif

- (id) init;
- (id) initWithDealAcquireId: (NSString *) dealAcquireId location: (Location_t *) location;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) dealAcquireId;
- (void) setDealAcquireId: (NSString *) dealAcquireId;
#endif
- (BOOL) dealAcquireIdIsSet;

#if !__has_feature(objc_arc)
- (Location_t *) location;
- (void) setLocation: (Location_t *) location;
#endif
- (BOOL) locationIsSet;

@end

@implementation generateBraintreeClientToken_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDealAcquireId: (NSString *) dealAcquireId location: (Location_t *) location
{
  self = [super init];
  __dealAcquireId = [dealAcquireId retain_stub];
  __dealAcquireId_isset = YES;
  __location = [location retain_stub];
  __location_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dealAcquireId"])
  {
    __dealAcquireId = [[decoder decodeObjectForKey: @"dealAcquireId"] retain_stub];
    __dealAcquireId_isset = YES;
  }
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain_stub];
    __location_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dealAcquireId_isset)
  {
    [encoder encodeObject: __dealAcquireId forKey: @"dealAcquireId"];
  }
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
}

- (void) dealloc
{
  [__dealAcquireId release_stub];
  [__location release_stub];
  [super dealloc_stub];
}

- (NSString *) dealAcquireId {
  return [[__dealAcquireId retain_stub] autorelease_stub];
}

- (void) setDealAcquireId: (NSString *) dealAcquireId {
  [dealAcquireId retain_stub];
  [__dealAcquireId release_stub];
  __dealAcquireId = dealAcquireId;
  __dealAcquireId_isset = YES;
}

- (BOOL) dealAcquireIdIsSet {
  return __dealAcquireId_isset;
}

- (void) unsetDealAcquireId {
  [__dealAcquireId release_stub];
  __dealAcquireId = nil;
  __dealAcquireId_isset = NO;
}

- (Location_t *) location {
  return [[__location retain_stub] autorelease_stub];
}

- (void) setLocation: (Location_t *) location {
  [location retain_stub];
  [__location release_stub];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release_stub];
  __location = nil;
  __location_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDealAcquireId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Location_t *fieldValue = [[Location_t alloc] init];
          [fieldValue read: inProtocol];
          [self setLocation: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"generateBraintreeClientToken_args"];
  if (__dealAcquireId_isset) {
    if (__dealAcquireId != nil) {
      [outProtocol writeFieldBeginWithName: @"dealAcquireId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dealAcquireId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 2];
      [__location write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"generateBraintreeClientToken_args("];
  [ms appendString: @"dealAcquireId:"];
  [ms appendFormat: @"\"%@\"", __dealAcquireId];
  [ms appendString: @",location:"];
  [ms appendFormat: @"%@", __location];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GenerateBraintreeClientToken_result : NSObject <NSCoding> {
  NSString * __success;
  ServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=error, setter=setError:) ServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success error: (ServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ServiceException_t *) error;
- (void) setError: (ServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GenerateBraintreeClientToken_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success error: (ServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (ServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ServiceException_t *fieldValue = [[ServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GenerateBraintreeClientToken_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GenerateBraintreeClientToken_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getEmailMessage_args : NSObject <NSCoding> {
  NSString * __templateId;
  NSString * __entityId;

  BOOL __templateId_isset;
  BOOL __entityId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=templateId, setter=setTemplateId:) NSString * templateId;
@property (nonatomic, retain, getter=entityId, setter=setEntityId:) NSString * entityId;
#endif

- (id) init;
- (id) initWithTemplateId: (NSString *) templateId entityId: (NSString *) entityId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) templateId;
- (void) setTemplateId: (NSString *) templateId;
#endif
- (BOOL) templateIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) entityId;
- (void) setEntityId: (NSString *) entityId;
#endif
- (BOOL) entityIdIsSet;

@end

@implementation getEmailMessage_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTemplateId: (NSString *) templateId entityId: (NSString *) entityId
{
  self = [super init];
  __templateId = [templateId retain_stub];
  __templateId_isset = YES;
  __entityId = [entityId retain_stub];
  __entityId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"templateId"])
  {
    __templateId = [[decoder decodeObjectForKey: @"templateId"] retain_stub];
    __templateId_isset = YES;
  }
  if ([decoder containsValueForKey: @"entityId"])
  {
    __entityId = [[decoder decodeObjectForKey: @"entityId"] retain_stub];
    __entityId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__templateId_isset)
  {
    [encoder encodeObject: __templateId forKey: @"templateId"];
  }
  if (__entityId_isset)
  {
    [encoder encodeObject: __entityId forKey: @"entityId"];
  }
}

- (void) dealloc
{
  [__templateId release_stub];
  [__entityId release_stub];
  [super dealloc_stub];
}

- (NSString *) templateId {
  return [[__templateId retain_stub] autorelease_stub];
}

- (void) setTemplateId: (NSString *) templateId {
  [templateId retain_stub];
  [__templateId release_stub];
  __templateId = templateId;
  __templateId_isset = YES;
}

- (BOOL) templateIdIsSet {
  return __templateId_isset;
}

- (void) unsetTemplateId {
  [__templateId release_stub];
  __templateId = nil;
  __templateId_isset = NO;
}

- (NSString *) entityId {
  return [[__entityId retain_stub] autorelease_stub];
}

- (void) setEntityId: (NSString *) entityId {
  [entityId retain_stub];
  [__entityId release_stub];
  __entityId = entityId;
  __entityId_isset = YES;
}

- (BOOL) entityIdIsSet {
  return __entityId_isset;
}

- (void) unsetEntityId {
  [__entityId release_stub];
  __entityId = nil;
  __entityId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTemplateId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEntityId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getEmailMessage_args"];
  if (__templateId_isset) {
    if (__templateId != nil) {
      [outProtocol writeFieldBeginWithName: @"templateId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __templateId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__entityId_isset) {
    if (__entityId != nil) {
      [outProtocol writeFieldBeginWithName: @"entityId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __entityId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getEmailMessage_args("];
  [ms appendString: @"templateId:"];
  [ms appendFormat: @"\"%@\"", __templateId];
  [ms appendString: @",entityId:"];
  [ms appendFormat: @"\"%@\"", __entityId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetEmailMessage_result : NSObject <NSCoding> {
  EmailMessageResponse_t * __success;
  TServiceException_t * __error;

  BOOL __success_isset;
  BOOL __error_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) EmailMessageResponse_t * success;
@property (nonatomic, retain, getter=error, setter=setError:) TServiceException_t * error;
#endif

- (id) init;
- (id) initWithSuccess: (EmailMessageResponse_t *) success error: (TServiceException_t *) error;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (EmailMessageResponse_t *) success;
- (void) setSuccess: (EmailMessageResponse_t *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (TServiceException_t *) error;
- (void) setError: (TServiceException_t *) error;
#endif
- (BOOL) errorIsSet;

@end

@implementation GetEmailMessage_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (EmailMessageResponse_t *) success error: (TServiceException_t *) error
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (EmailMessageResponse_t *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (EmailMessageResponse_t *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (TServiceException_t *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (TServiceException_t *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          EmailMessageResponse_t *fieldValue = [[EmailMessageResponse_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          TServiceException_t *fieldValue = [[TServiceException_t alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetEmailMessage_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 1];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetEmailMessage_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CustomerService_tClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_createAccount: (Customer_t *) customer password: (NSString *) password
{
  [outProtocol writeMessageBeginWithName: @"createAccount" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"createAccount_args"];
  if (customer != nil)  {
    [outProtocol writeFieldBeginWithName: @"customer" type: TType_STRUCT fieldID: 1];
    [customer write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (CTokenAccess_t *) recv_createAccount
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  CreateAccount_result * result = [[[CreateAccount_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"createAccount failed: unknown result"];
}

- (CTokenAccess_t *) createAccount: (Customer_t *) customer password: (NSString *) password
{
  [self send_createAccount : customer password: password];
  return [self recv_createAccount];
}

- (void) send_authenticate: (NSString *) email password: (NSString *) password
{
  [outProtocol writeMessageBeginWithName: @"authenticate" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"authenticate_args"];
  if (email != nil)  {
    [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
    [outProtocol writeString: email];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (CTokenAccess_t *) recv_authenticate
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Authenticate_result * result = [[[Authenticate_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"authenticate failed: unknown result"];
}

- (CTokenAccess_t *) authenticate: (NSString *) email password: (NSString *) password
{
  [self send_authenticate : email password: password];
  return [self recv_authenticate];
}

- (void) send_customerEmailExists: (NSString *) email
{
  [outProtocol writeMessageBeginWithName: @"customerEmailExists" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"customerEmailExists_args"];
  if (email != nil)  {
    [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
    [outProtocol writeString: email];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_customerEmailExists
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  CustomerEmailExists_result * result = [[[CustomerEmailExists_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"customerEmailExists failed: unknown result"];
}

- (BOOL) customerEmailExists: (NSString *) email
{
  [self send_customerEmailExists : email];
  return [self recv_customerEmailExists];
}

- (void) send_addSocialAccount: (SocialAccount_t *) socialAccount
{
  [outProtocol writeMessageBeginWithName: @"addSocialAccount" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"addSocialAccount_args"];
  if (socialAccount != nil)  {
    [outProtocol writeFieldBeginWithName: @"socialAccount" type: TType_STRUCT fieldID: 1];
    [socialAccount write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_addSocialAccount
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  AddSocialAccount_result * result = [[[AddSocialAccount_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errorIsSet]) {
    @throw [result error];
  }
  return;
}

- (void) addSocialAccount: (SocialAccount_t *) socialAccount
{
  [self send_addSocialAccount : socialAccount];
  [self recv_addSocialAccount];
}

- (void) send_removeSocialAccount: (int) socialNetwork
{
  [outProtocol writeMessageBeginWithName: @"removeSocialAccount" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"removeSocialAccount_args"];
  [outProtocol writeFieldBeginWithName: @"socialNetwork" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: socialNetwork];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_removeSocialAccount
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  RemoveSocialAccount_result * result = [[[RemoveSocialAccount_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errorIsSet]) {
    @throw [result error];
  }
  return;
}

- (void) removeSocialAccount: (int) socialNetwork
{
  [self send_removeSocialAccount : socialNetwork];
  [self recv_removeSocialAccount];
}

- (void) send_getMerchantAcquires: (SearchOptions_t *) searchOptions
{
  [outProtocol writeMessageBeginWithName: @"getMerchantAcquires" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMerchantAcquires_args"];
  if (searchOptions != nil)  {
    [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 1];
    [searchOptions write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getMerchantAcquires
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetMerchantAcquires_result * result = [[[GetMerchantAcquires_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMerchantAcquires failed: unknown result"];
}

- (NSMutableArray *) getMerchantAcquires: (SearchOptions_t *) searchOptions
{
  [self send_getMerchantAcquires : searchOptions];
  return [self recv_getMerchantAcquires];
}

- (void) send_getMerchantAcquiresWithLocation: (SearchOptions_t *) searchOptions location: (Location_t *) location
{
  [outProtocol writeMessageBeginWithName: @"getMerchantAcquiresWithLocation" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMerchantAcquiresWithLocation_args"];
  if (searchOptions != nil)  {
    [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 1];
    [searchOptions write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (location != nil)  {
    [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 2];
    [location write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getMerchantAcquiresWithLocation
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetMerchantAcquiresWithLocation_result * result = [[[GetMerchantAcquiresWithLocation_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMerchantAcquiresWithLocation failed: unknown result"];
}

- (NSMutableArray *) getMerchantAcquiresWithLocation: (SearchOptions_t *) searchOptions location: (Location_t *) location
{
  [self send_getMerchantAcquiresWithLocation : searchOptions location: location];
  return [self recv_getMerchantAcquiresWithLocation];
}

- (void) send_getMerchantAcquiresByCategory: (int32_t) categoryId searchOptions: (SearchOptions_t *) searchOptions
{
  [outProtocol writeMessageBeginWithName: @"getMerchantAcquiresByCategory" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMerchantAcquiresByCategory_args"];
  [outProtocol writeFieldBeginWithName: @"categoryId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: categoryId];
  [outProtocol writeFieldEnd];
  if (searchOptions != nil)  {
    [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 2];
    [searchOptions write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getMerchantAcquiresByCategory
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetMerchantAcquiresByCategory_result * result = [[[GetMerchantAcquiresByCategory_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMerchantAcquiresByCategory failed: unknown result"];
}

- (NSMutableArray *) getMerchantAcquiresByCategory: (int32_t) categoryId searchOptions: (SearchOptions_t *) searchOptions
{
  [self send_getMerchantAcquiresByCategory : categoryId searchOptions: searchOptions];
  return [self recv_getMerchantAcquiresByCategory];
}

- (void) send_getDealAcquires: (NSString *) merchantId searchOptions: (SearchOptions_t *) searchOptions
{
  [outProtocol writeMessageBeginWithName: @"getDealAcquires" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getDealAcquires_args"];
  if (merchantId != nil)  {
    [outProtocol writeFieldBeginWithName: @"merchantId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: merchantId];
    [outProtocol writeFieldEnd];
  }
  if (searchOptions != nil)  {
    [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 2];
    [searchOptions write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getDealAcquires
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetDealAcquires_result * result = [[[GetDealAcquires_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getDealAcquires failed: unknown result"];
}

- (NSMutableArray *) getDealAcquires: (NSString *) merchantId searchOptions: (SearchOptions_t *) searchOptions
{
  [self send_getDealAcquires : merchantId searchOptions: searchOptions];
  return [self recv_getDealAcquires];
}

- (void) send_redeem: (NSString *) dealAcquireId location: (Location_t *) location
{
  [outProtocol writeMessageBeginWithName: @"redeem" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"redeem_args"];
  if (dealAcquireId != nil)  {
    [outProtocol writeFieldBeginWithName: @"dealAcquireId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: dealAcquireId];
    [outProtocol writeFieldEnd];
  }
  if (location != nil)  {
    [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 2];
    [location write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_redeem
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Redeem_result * result = [[[Redeem_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"redeem failed: unknown result"];
}

- (NSString *) redeem: (NSString *) dealAcquireId location: (Location_t *) location
{
  [self send_redeem : dealAcquireId location: location];
  return [self recv_redeem];
}

- (void) send_getDealOffers
{
  [outProtocol writeMessageBeginWithName: @"getDealOffers" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getDealOffers_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getDealOffers
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetDealOffers_result * result = [[[GetDealOffers_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getDealOffers failed: unknown result"];
}

- (NSMutableArray *) getDealOffers
{
  [self send_getDealOffers];
  return [self recv_getDealOffers];
}

- (void) send_activateCode: (NSString *) dealOfferid code: (NSString *) code
{
  [outProtocol writeMessageBeginWithName: @"activateCode" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"activateCode_args"];
  if (dealOfferid != nil)  {
    [outProtocol writeFieldBeginWithName: @"dealOfferid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: dealOfferid];
    [outProtocol writeFieldEnd];
  }
  if (code != nil)  {
    [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 2];
    [outProtocol writeString: code];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_activateCode
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ActivateCode_result * result = [[[ActivateCode_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errorIsSet]) {
    @throw [result error];
  }
  return;
}

- (void) activateCode: (NSString *) dealOfferid code: (NSString *) code
{
  [self send_activateCode : dealOfferid code: code];
  [self recv_activateCode];
}

- (void) send_getDealOffer: (NSString *) dealOfferId
{
  [outProtocol writeMessageBeginWithName: @"getDealOffer" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getDealOffer_args"];
  if (dealOfferId != nil)  {
    [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: dealOfferId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (DealOffer_t *) recv_getDealOffer
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetDealOffer_result * result = [[[GetDealOffer_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getDealOffer failed: unknown result"];
}

- (DealOffer_t *) getDealOffer: (NSString *) dealOfferId
{
  [self send_getDealOffer : dealOfferId];
  return [self recv_getDealOffer];
}

- (void) send_getDealsByDealOfferId: (NSString *) dealOfferId searchOptions: (SearchOptions_t *) searchOptions
{
  [outProtocol writeMessageBeginWithName: @"getDealsByDealOfferId" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getDealsByDealOfferId_args"];
  if (dealOfferId != nil)  {
    [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: dealOfferId];
    [outProtocol writeFieldEnd];
  }
  if (searchOptions != nil)  {
    [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 2];
    [searchOptions write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getDealsByDealOfferId
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetDealsByDealOfferId_result * result = [[[GetDealsByDealOfferId_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getDealsByDealOfferId failed: unknown result"];
}

- (NSMutableArray *) getDealsByDealOfferId: (NSString *) dealOfferId searchOptions: (SearchOptions_t *) searchOptions
{
  [self send_getDealsByDealOfferId : dealOfferId searchOptions: searchOptions];
  return [self recv_getDealsByDealOfferId];
}

- (void) send_purchaseDealOffer: (NSString *) dealOfferId
{
  [outProtocol writeMessageBeginWithName: @"purchaseDealOffer" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"purchaseDealOffer_args"];
  if (dealOfferId != nil)  {
    [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: dealOfferId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_purchaseDealOffer
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  PurchaseDealOffer_result * result = [[[PurchaseDealOffer_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errorIsSet]) {
    @throw [result error];
  }
  return;
}

- (void) purchaseDealOffer: (NSString *) dealOfferId
{
  [self send_purchaseDealOffer : dealOfferId];
  [self recv_purchaseDealOffer];
}

- (void) send_getMerchantsWithin: (Location_t *) location maxMiles: (int32_t) maxMiles searchOptions: (SearchOptions_t *) searchOptions
{
  [outProtocol writeMessageBeginWithName: @"getMerchantsWithin" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMerchantsWithin_args"];
  if (location != nil)  {
    [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 1];
    [location write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"maxMiles" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: maxMiles];
  [outProtocol writeFieldEnd];
  if (searchOptions != nil)  {
    [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 3];
    [searchOptions write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getMerchantsWithin
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetMerchantsWithin_result * result = [[[GetMerchantsWithin_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMerchantsWithin failed: unknown result"];
}

- (NSMutableArray *) getMerchantsWithin: (Location_t *) location maxMiles: (int32_t) maxMiles searchOptions: (SearchOptions_t *) searchOptions
{
  [self send_getMerchantsWithin : location maxMiles: maxMiles searchOptions: searchOptions];
  return [self recv_getMerchantsWithin];
}

- (void) send_addFavoriteMerchant: (NSString *) merchantId
{
  [outProtocol writeMessageBeginWithName: @"addFavoriteMerchant" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"addFavoriteMerchant_args"];
  if (merchantId != nil)  {
    [outProtocol writeFieldBeginWithName: @"merchantId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: merchantId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_addFavoriteMerchant
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  AddFavoriteMerchant_result * result = [[[AddFavoriteMerchant_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errorIsSet]) {
    @throw [result error];
  }
  return;
}

- (void) addFavoriteMerchant: (NSString *) merchantId
{
  [self send_addFavoriteMerchant : merchantId];
  [self recv_addFavoriteMerchant];
}

- (void) send_removeFavoriteMerchant: (NSString *) merchantId
{
  [outProtocol writeMessageBeginWithName: @"removeFavoriteMerchant" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"removeFavoriteMerchant_args"];
  if (merchantId != nil)  {
    [outProtocol writeFieldBeginWithName: @"merchantId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: merchantId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_removeFavoriteMerchant
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  RemoveFavoriteMerchant_result * result = [[[RemoveFavoriteMerchant_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errorIsSet]) {
    @throw [result error];
  }
  return;
}

- (void) removeFavoriteMerchant: (NSString *) merchantId
{
  [self send_removeFavoriteMerchant : merchantId];
  [self recv_removeFavoriteMerchant];
}

- (void) send_getFavoriteMerchants: (SearchOptions_t *) searchOptions
{
  [outProtocol writeMessageBeginWithName: @"getFavoriteMerchants" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getFavoriteMerchants_args"];
  if (searchOptions != nil)  {
    [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 1];
    [searchOptions write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getFavoriteMerchants
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetFavoriteMerchants_result * result = [[[GetFavoriteMerchants_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getFavoriteMerchants failed: unknown result"];
}

- (NSMutableArray *) getFavoriteMerchants: (SearchOptions_t *) searchOptions
{
  [self send_getFavoriteMerchants : searchOptions];
  return [self recv_getFavoriteMerchants];
}

- (void) send_getCategories
{
  [outProtocol writeMessageBeginWithName: @"getCategories" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getCategories_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getCategories
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetCategories_result * result = [[[GetCategories_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getCategories failed: unknown result"];
}

- (NSMutableArray *) getCategories
{
  [self send_getCategories];
  return [self recv_getCategories];
}

- (void) send_giftToFacebook: (NSString *) dealAcquireId facebookId: (NSString *) facebookId receipientName: (NSString *) receipientName
{
  [outProtocol writeMessageBeginWithName: @"giftToFacebook" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"giftToFacebook_args"];
  if (dealAcquireId != nil)  {
    [outProtocol writeFieldBeginWithName: @"dealAcquireId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: dealAcquireId];
    [outProtocol writeFieldEnd];
  }
  if (facebookId != nil)  {
    [outProtocol writeFieldBeginWithName: @"facebookId" type: TType_STRING fieldID: 2];
    [outProtocol writeString: facebookId];
    [outProtocol writeFieldEnd];
  }
  if (receipientName != nil)  {
    [outProtocol writeFieldBeginWithName: @"receipientName" type: TType_STRING fieldID: 3];
    [outProtocol writeString: receipientName];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_giftToFacebook
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GiftToFacebook_result * result = [[[GiftToFacebook_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"giftToFacebook failed: unknown result"];
}

- (NSString *) giftToFacebook: (NSString *) dealAcquireId facebookId: (NSString *) facebookId receipientName: (NSString *) receipientName
{
  [self send_giftToFacebook : dealAcquireId facebookId: facebookId receipientName: receipientName];
  return [self recv_giftToFacebook];
}

- (void) send_giftToEmail: (NSString *) dealAcquireId email: (NSString *) email receipientName: (NSString *) receipientName
{
  [outProtocol writeMessageBeginWithName: @"giftToEmail" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"giftToEmail_args"];
  if (dealAcquireId != nil)  {
    [outProtocol writeFieldBeginWithName: @"dealAcquireId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: dealAcquireId];
    [outProtocol writeFieldEnd];
  }
  if (email != nil)  {
    [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 2];
    [outProtocol writeString: email];
    [outProtocol writeFieldEnd];
  }
  if (receipientName != nil)  {
    [outProtocol writeFieldBeginWithName: @"receipientName" type: TType_STRING fieldID: 3];
    [outProtocol writeString: receipientName];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_giftToEmail
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GiftToEmail_result * result = [[[GiftToEmail_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"giftToEmail failed: unknown result"];
}

- (NSString *) giftToEmail: (NSString *) dealAcquireId email: (NSString *) email receipientName: (NSString *) receipientName
{
  [self send_giftToEmail : dealAcquireId email: email receipientName: receipientName];
  return [self recv_giftToEmail];
}

- (void) send_getGift: (NSString *) giftId
{
  [outProtocol writeMessageBeginWithName: @"getGift" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getGift_args"];
  if (giftId != nil)  {
    [outProtocol writeFieldBeginWithName: @"giftId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: giftId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Gift_t *) recv_getGift
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetGift_result * result = [[[GetGift_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getGift failed: unknown result"];
}

- (Gift_t *) getGift: (NSString *) giftId
{
  [self send_getGift : giftId];
  return [self recv_getGift];
}

- (void) send_acceptGift: (NSString *) giftId
{
  [outProtocol writeMessageBeginWithName: @"acceptGift" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"acceptGift_args"];
  if (giftId != nil)  {
    [outProtocol writeFieldBeginWithName: @"giftId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: giftId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (DealAcquire_t *) recv_acceptGift
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  AcceptGift_result * result = [[[AcceptGift_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"acceptGift failed: unknown result"];
}

- (DealAcquire_t *) acceptGift: (NSString *) giftId
{
  [self send_acceptGift : giftId];
  return [self recv_acceptGift];
}

- (void) send_rejectGift: (NSString *) giftId
{
  [outProtocol writeMessageBeginWithName: @"rejectGift" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"rejectGift_args"];
  if (giftId != nil)  {
    [outProtocol writeFieldBeginWithName: @"giftId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: giftId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_rejectGift
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  RejectGift_result * result = [[[RejectGift_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errorIsSet]) {
    @throw [result error];
  }
  return;
}

- (void) rejectGift: (NSString *) giftId
{
  [self send_rejectGift : giftId];
  [self recv_rejectGift];
}

- (void) send_getActivities: (SearchOptions_t *) searchOptions
{
  [outProtocol writeMessageBeginWithName: @"getActivities" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getActivities_args"];
  if (searchOptions != nil)  {
    [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 1];
    [searchOptions write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getActivities
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetActivities_result * result = [[[GetActivities_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getActivities failed: unknown result"];
}

- (NSMutableArray *) getActivities: (SearchOptions_t *) searchOptions
{
  [self send_getActivities : searchOptions];
  return [self recv_getActivities];
}

- (void) send_getMessages: (SearchOptions_t *) searchOptions location: (Location_t *) location
{
  [outProtocol writeMessageBeginWithName: @"getMessages" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMessages_args"];
  if (searchOptions != nil)  {
    [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 1];
    [searchOptions write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (location != nil)  {
    [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 2];
    [location write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getMessages
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetMessages_result * result = [[[GetMessages_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMessages failed: unknown result"];
}

- (NSMutableArray *) getMessages: (SearchOptions_t *) searchOptions location: (Location_t *) location
{
  [self send_getMessages : searchOptions location: location];
  return [self recv_getMessages];
}

- (void) send_activityAction: (NSString *) activityId
{
  [outProtocol writeMessageBeginWithName: @"activityAction" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"activityAction_args"];
  if (activityId != nil)  {
    [outProtocol writeFieldBeginWithName: @"activityId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: activityId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_activityAction
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ActivityAction_result * result = [[[ActivityAction_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errorIsSet]) {
    @throw [result error];
  }
  return;
}

- (void) activityAction: (NSString *) activityId
{
  [self send_activityAction : activityId];
  [self recv_activityAction];
}

- (void) send_sendResetPasswordEmail: (NSString *) email
{
  [outProtocol writeMessageBeginWithName: @"sendResetPasswordEmail" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"sendResetPasswordEmail_args"];
  if (email != nil)  {
    [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
    [outProtocol writeString: email];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_sendResetPasswordEmail
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SendResetPasswordEmail_result * result = [[[SendResetPasswordEmail_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result serviceExceptionIsSet]) {
    @throw [result serviceException];
  }
  if ([result userExceptionIsSet]) {
    @throw [result userException];
  }
  if ([result notFoundExceptionIsSet]) {
    @throw [result notFoundException];
  }
  return;
}

- (void) sendResetPasswordEmail: (NSString *) email
{
  [self send_sendResetPasswordEmail : email];
  [self recv_sendResetPasswordEmail];
}

- (void) send_resetPassword: (NSString *) customerId resetPasswordCode: (NSString *) resetPasswordCode newPassword: (NSString *) newPassword
{
  [outProtocol writeMessageBeginWithName: @"resetPassword" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"resetPassword_args"];
  if (customerId != nil)  {
    [outProtocol writeFieldBeginWithName: @"customerId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: customerId];
    [outProtocol writeFieldEnd];
  }
  if (resetPasswordCode != nil)  {
    [outProtocol writeFieldBeginWithName: @"resetPasswordCode" type: TType_STRING fieldID: 2];
    [outProtocol writeString: resetPasswordCode];
    [outProtocol writeFieldEnd];
  }
  if (newPassword != nil)  {
    [outProtocol writeFieldBeginWithName: @"newPassword" type: TType_STRING fieldID: 3];
    [outProtocol writeString: newPassword];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (CTokenAccess_t *) recv_resetPassword
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ResetPassword_result * result = [[[ResetPassword_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result serviceExceptionIsSet]) {
    @throw [result serviceException];
  }
  if ([result userExceptionIsSet]) {
    @throw [result userException];
  }
  if ([result notFoundExceptionIsSet]) {
    @throw [result notFoundException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"resetPassword failed: unknown result"];
}

- (CTokenAccess_t *) resetPassword: (NSString *) customerId resetPasswordCode: (NSString *) resetPasswordCode newPassword: (NSString *) newPassword
{
  [self send_resetPassword : customerId resetPasswordCode: resetPasswordCode newPassword: newPassword];
  return [self recv_resetPassword];
}

- (void) send_purchaseByCard: (NSString *) dealOfferId paymentDetail: (PaymentDetail_t *) paymentDetail
{
  [outProtocol writeMessageBeginWithName: @"purchaseByCard" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"purchaseByCard_args"];
  if (dealOfferId != nil)  {
    [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: dealOfferId];
    [outProtocol writeFieldEnd];
  }
  if (paymentDetail != nil)  {
    [outProtocol writeFieldBeginWithName: @"paymentDetail" type: TType_STRUCT fieldID: 2];
    [paymentDetail write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (TransactionResult_t *) recv_purchaseByCard
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  PurchaseByCard_result * result = [[[PurchaseByCard_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result serviceExceptionIsSet]) {
    @throw [result serviceException];
  }
  if ([result userExceptionIsSet]) {
    @throw [result userException];
  }
  if ([result notFoundExceptionIsSet]) {
    @throw [result notFoundException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"purchaseByCard failed: unknown result"];
}

- (TransactionResult_t *) purchaseByCard: (NSString *) dealOfferId paymentDetail: (PaymentDetail_t *) paymentDetail
{
  [self send_purchaseByCard : dealOfferId paymentDetail: paymentDetail];
  return [self recv_purchaseByCard];
}

- (void) send_purchaseByCode: (NSString *) dealOfferId paymentCode: (NSString *) paymentCode
{
  [outProtocol writeMessageBeginWithName: @"purchaseByCode" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"purchaseByCode_args"];
  if (dealOfferId != nil)  {
    [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: dealOfferId];
    [outProtocol writeFieldEnd];
  }
  if (paymentCode != nil)  {
    [outProtocol writeFieldBeginWithName: @"paymentCode" type: TType_STRING fieldID: 2];
    [outProtocol writeString: paymentCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (TransactionResult_t *) recv_purchaseByCode
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  PurchaseByCode_result * result = [[[PurchaseByCode_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result serviceExceptionIsSet]) {
    @throw [result serviceException];
  }
  if ([result userExceptionIsSet]) {
    @throw [result userException];
  }
  if ([result notFoundExceptionIsSet]) {
    @throw [result notFoundException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"purchaseByCode failed: unknown result"];
}

- (TransactionResult_t *) purchaseByCode: (NSString *) dealOfferId paymentCode: (NSString *) paymentCode
{
  [self send_purchaseByCode : dealOfferId paymentCode: paymentCode];
  return [self recv_purchaseByCode];
}

- (void) send_loginFacebook: (NSString *) facebookId facebookAccessToken: (NSString *) facebookAccessToken
{
  [outProtocol writeMessageBeginWithName: @"loginFacebook" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"loginFacebook_args"];
  if (facebookId != nil)  {
    [outProtocol writeFieldBeginWithName: @"facebookId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: facebookId];
    [outProtocol writeFieldEnd];
  }
  if (facebookAccessToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"facebookAccessToken" type: TType_STRING fieldID: 2];
    [outProtocol writeString: facebookAccessToken];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (CTokenAccessResponse_t *) recv_loginFacebook
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  LoginFacebook_result * result = [[[LoginFacebook_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"loginFacebook failed: unknown result"];
}

- (CTokenAccessResponse_t *) loginFacebook: (NSString *) facebookId facebookAccessToken: (NSString *) facebookAccessToken
{
  [self send_loginFacebook : facebookId facebookAccessToken: facebookAccessToken];
  return [self recv_loginFacebook];
}

- (void) send_getDealOfferGeoSummariesWithin: (Location_t *) location maxMiles: (int32_t) maxMiles searchOptions: (SearchOptions_t *) searchOptions fallbackSearchOptions: (SearchOptions_t *) fallbackSearchOptions
{
  [outProtocol writeMessageBeginWithName: @"getDealOfferGeoSummariesWithin" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getDealOfferGeoSummariesWithin_args"];
  if (location != nil)  {
    [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 1];
    [location write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"maxMiles" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: maxMiles];
  [outProtocol writeFieldEnd];
  if (searchOptions != nil)  {
    [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 3];
    [searchOptions write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (fallbackSearchOptions != nil)  {
    [outProtocol writeFieldBeginWithName: @"fallbackSearchOptions" type: TType_STRUCT fieldID: 4];
    [fallbackSearchOptions write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (DealOfferGeoSummariesResponse_t *) recv_getDealOfferGeoSummariesWithin
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetDealOfferGeoSummariesWithin_result * result = [[[GetDealOfferGeoSummariesWithin_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getDealOfferGeoSummariesWithin failed: unknown result"];
}

- (DealOfferGeoSummariesResponse_t *) getDealOfferGeoSummariesWithin: (Location_t *) location maxMiles: (int32_t) maxMiles searchOptions: (SearchOptions_t *) searchOptions fallbackSearchOptions: (SearchOptions_t *) fallbackSearchOptions
{
  [self send_getDealOfferGeoSummariesWithin : location maxMiles: maxMiles searchOptions: searchOptions fallbackSearchOptions: fallbackSearchOptions];
  return [self recv_getDealOfferGeoSummariesWithin];
}

- (void) send_getMerchantsByDealOfferId: (NSString *) dealOfferId searchOptions: (SearchOptions_t *) searchOptions
{
  [outProtocol writeMessageBeginWithName: @"getMerchantsByDealOfferId" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getMerchantsByDealOfferId_args"];
  if (dealOfferId != nil)  {
    [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: dealOfferId];
    [outProtocol writeFieldEnd];
  }
  if (searchOptions != nil)  {
    [outProtocol writeFieldBeginWithName: @"searchOptions" type: TType_STRUCT fieldID: 2];
    [searchOptions write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (MerchantsResponse_t *) recv_getMerchantsByDealOfferId
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetMerchantsByDealOfferId_result * result = [[[GetMerchantsByDealOfferId_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getMerchantsByDealOfferId failed: unknown result"];
}

- (MerchantsResponse_t *) getMerchantsByDealOfferId: (NSString *) dealOfferId searchOptions: (SearchOptions_t *) searchOptions
{
  [self send_getMerchantsByDealOfferId : dealOfferId searchOptions: searchOptions];
  return [self recv_getMerchantsByDealOfferId];
}

- (void) send_validateCode: (NSString *) code dealOfferId: (NSString *) dealOfferId
{
  [outProtocol writeMessageBeginWithName: @"validateCode" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"validateCode_args"];
  if (code != nil)  {
    [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 1];
    [outProtocol writeString: code];
    [outProtocol writeFieldEnd];
  }
  if (dealOfferId != nil)  {
    [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 2];
    [outProtocol writeString: dealOfferId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ValidateCodeResponse_t *) recv_validateCode
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ValidateCode_result * result = [[[ValidateCode_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"validateCode failed: unknown result"];
}

- (ValidateCodeResponse_t *) validateCode: (NSString *) code dealOfferId: (NSString *) dealOfferId
{
  [self send_validateCode : code dealOfferId: dealOfferId];
  return [self recv_validateCode];
}

- (void) send_purchaseWithCard: (NSString *) dealOfferId paymentDetail: (PaymentDetail_t *) paymentDetail paymentProperties: (NSMutableDictionary *) paymentProperties
{
  [outProtocol writeMessageBeginWithName: @"purchaseWithCard" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"purchaseWithCard_args"];
  if (dealOfferId != nil)  {
    [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: dealOfferId];
    [outProtocol writeFieldEnd];
  }
  if (paymentDetail != nil)  {
    [outProtocol writeFieldBeginWithName: @"paymentDetail" type: TType_STRUCT fieldID: 2];
    [paymentDetail write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (paymentProperties != nil)  {
    [outProtocol writeFieldBeginWithName: @"paymentProperties" type: TType_MAP fieldID: 3];
    {
      [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [paymentProperties count]];
      NSEnumerator * _iter83 = [paymentProperties keyEnumerator];
      id key84;
      while ((key84 = [_iter83 nextObject]))
      {
        [outProtocol writeString: key84];
        [outProtocol writeString: [paymentProperties objectForKey: key84]];
      }
      [outProtocol writeMapEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (TransactionResult_t *) recv_purchaseWithCard
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  PurchaseWithCard_result * result = [[[PurchaseWithCard_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result serviceExceptionIsSet]) {
    @throw [result serviceException];
  }
  if ([result userExceptionIsSet]) {
    @throw [result userException];
  }
  if ([result notFoundExceptionIsSet]) {
    @throw [result notFoundException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"purchaseWithCard failed: unknown result"];
}

- (TransactionResult_t *) purchaseWithCard: (NSString *) dealOfferId paymentDetail: (PaymentDetail_t *) paymentDetail paymentProperties: (NSMutableDictionary *) paymentProperties
{
  [self send_purchaseWithCard : dealOfferId paymentDetail: paymentDetail paymentProperties: paymentProperties];
  return [self recv_purchaseWithCard];
}

- (void) send_purchaseWithCode: (NSString *) dealOfferId paymentCode: (NSString *) paymentCode paymentProperties: (NSMutableDictionary *) paymentProperties
{
  [outProtocol writeMessageBeginWithName: @"purchaseWithCode" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"purchaseWithCode_args"];
  if (dealOfferId != nil)  {
    [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: dealOfferId];
    [outProtocol writeFieldEnd];
  }
  if (paymentCode != nil)  {
    [outProtocol writeFieldBeginWithName: @"paymentCode" type: TType_STRING fieldID: 2];
    [outProtocol writeString: paymentCode];
    [outProtocol writeFieldEnd];
  }
  if (paymentProperties != nil)  {
    [outProtocol writeFieldBeginWithName: @"paymentProperties" type: TType_MAP fieldID: 3];
    {
      [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [paymentProperties count]];
      NSEnumerator * _iter85 = [paymentProperties keyEnumerator];
      id key86;
      while ((key86 = [_iter85 nextObject]))
      {
        [outProtocol writeString: key86];
        [outProtocol writeString: [paymentProperties objectForKey: key86]];
      }
      [outProtocol writeMapEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (TransactionResult_t *) recv_purchaseWithCode
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  PurchaseWithCode_result * result = [[[PurchaseWithCode_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result serviceExceptionIsSet]) {
    @throw [result serviceException];
  }
  if ([result userExceptionIsSet]) {
    @throw [result userException];
  }
  if ([result notFoundExceptionIsSet]) {
    @throw [result notFoundException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"purchaseWithCode failed: unknown result"];
}

- (TransactionResult_t *) purchaseWithCode: (NSString *) dealOfferId paymentCode: (NSString *) paymentCode paymentProperties: (NSMutableDictionary *) paymentProperties
{
  [self send_purchaseWithCode : dealOfferId paymentCode: paymentCode paymentProperties: paymentProperties];
  return [self recv_purchaseWithCode];
}

- (void) send_purchaseWithNonce: (NSString *) dealOfferId nonce: (NSString *) nonce paymentProperties: (NSMutableDictionary *) paymentProperties
{
  [outProtocol writeMessageBeginWithName: @"purchaseWithNonce" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"purchaseWithNonce_args"];
  if (dealOfferId != nil)  {
    [outProtocol writeFieldBeginWithName: @"dealOfferId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: dealOfferId];
    [outProtocol writeFieldEnd];
  }
  if (nonce != nil)  {
    [outProtocol writeFieldBeginWithName: @"nonce" type: TType_STRING fieldID: 2];
    [outProtocol writeString: nonce];
    [outProtocol writeFieldEnd];
  }
  if (paymentProperties != nil)  {
    [outProtocol writeFieldBeginWithName: @"paymentProperties" type: TType_MAP fieldID: 3];
    {
      [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [paymentProperties count]];
      NSEnumerator * _iter87 = [paymentProperties keyEnumerator];
      id key88;
      while ((key88 = [_iter87 nextObject]))
      {
        [outProtocol writeString: key88];
        [outProtocol writeString: [paymentProperties objectForKey: key88]];
      }
      [outProtocol writeMapEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (TransactionResult_t *) recv_purchaseWithNonce
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  PurchaseWithNonce_result * result = [[[PurchaseWithNonce_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result serviceExceptionIsSet]) {
    @throw [result serviceException];
  }
  if ([result userExceptionIsSet]) {
    @throw [result userException];
  }
  if ([result notFoundExceptionIsSet]) {
    @throw [result notFoundException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"purchaseWithNonce failed: unknown result"];
}

- (TransactionResult_t *) purchaseWithNonce: (NSString *) dealOfferId nonce: (NSString *) nonce paymentProperties: (NSMutableDictionary *) paymentProperties
{
  [self send_purchaseWithNonce : dealOfferId nonce: nonce paymentProperties: paymentProperties];
  return [self recv_purchaseWithNonce];
}

- (void) send_generateBraintreeClientToken: (NSString *) dealAcquireId location: (Location_t *) location
{
  [outProtocol writeMessageBeginWithName: @"generateBraintreeClientToken" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"generateBraintreeClientToken_args"];
  if (dealAcquireId != nil)  {
    [outProtocol writeFieldBeginWithName: @"dealAcquireId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: dealAcquireId];
    [outProtocol writeFieldEnd];
  }
  if (location != nil)  {
    [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 2];
    [location write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_generateBraintreeClientToken
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GenerateBraintreeClientToken_result * result = [[[GenerateBraintreeClientToken_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"generateBraintreeClientToken failed: unknown result"];
}

- (NSString *) generateBraintreeClientToken: (NSString *) dealAcquireId location: (Location_t *) location
{
  [self send_generateBraintreeClientToken : dealAcquireId location: location];
  return [self recv_generateBraintreeClientToken];
}

- (void) send_getEmailMessage: (NSString *) templateId entityId: (NSString *) entityId
{
  [outProtocol writeMessageBeginWithName: @"getEmailMessage" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getEmailMessage_args"];
  if (templateId != nil)  {
    [outProtocol writeFieldBeginWithName: @"templateId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: templateId];
    [outProtocol writeFieldEnd];
  }
  if (entityId != nil)  {
    [outProtocol writeFieldBeginWithName: @"entityId" type: TType_STRING fieldID: 2];
    [outProtocol writeString: entityId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (EmailMessageResponse_t *) recv_getEmailMessage
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetEmailMessage_result * result = [[[GetEmailMessage_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errorIsSet]) {
    @throw [result error];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getEmailMessage failed: unknown result"];
}

- (EmailMessageResponse_t *) getEmailMessage: (NSString *) templateId entityId: (NSString *) entityId
{
  [self send_getEmailMessage : templateId entityId: entityId];
  return [self recv_getEmailMessage];
}

@end

@implementation CustomerService_tProcessor

- (id) initWithCustomerService_t: (id <CustomerService_t>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_createAccount_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"createAccount"];
  }
  {
    SEL s = @selector(process_authenticate_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"authenticate"];
  }
  {
    SEL s = @selector(process_customerEmailExists_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"customerEmailExists"];
  }
  {
    SEL s = @selector(process_addSocialAccount_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"addSocialAccount"];
  }
  {
    SEL s = @selector(process_removeSocialAccount_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"removeSocialAccount"];
  }
  {
    SEL s = @selector(process_getMerchantAcquires_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getMerchantAcquires"];
  }
  {
    SEL s = @selector(process_getMerchantAcquiresWithLocation_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getMerchantAcquiresWithLocation"];
  }
  {
    SEL s = @selector(process_getMerchantAcquiresByCategory_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getMerchantAcquiresByCategory"];
  }
  {
    SEL s = @selector(process_getDealAcquires_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getDealAcquires"];
  }
  {
    SEL s = @selector(process_redeem_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"redeem"];
  }
  {
    SEL s = @selector(process_getDealOffers_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getDealOffers"];
  }
  {
    SEL s = @selector(process_activateCode_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"activateCode"];
  }
  {
    SEL s = @selector(process_getDealOffer_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getDealOffer"];
  }
  {
    SEL s = @selector(process_getDealsByDealOfferId_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getDealsByDealOfferId"];
  }
  {
    SEL s = @selector(process_purchaseDealOffer_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"purchaseDealOffer"];
  }
  {
    SEL s = @selector(process_getMerchantsWithin_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getMerchantsWithin"];
  }
  {
    SEL s = @selector(process_addFavoriteMerchant_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"addFavoriteMerchant"];
  }
  {
    SEL s = @selector(process_removeFavoriteMerchant_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"removeFavoriteMerchant"];
  }
  {
    SEL s = @selector(process_getFavoriteMerchants_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getFavoriteMerchants"];
  }
  {
    SEL s = @selector(process_getCategories_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getCategories"];
  }
  {
    SEL s = @selector(process_giftToFacebook_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"giftToFacebook"];
  }
  {
    SEL s = @selector(process_giftToEmail_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"giftToEmail"];
  }
  {
    SEL s = @selector(process_getGift_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getGift"];
  }
  {
    SEL s = @selector(process_acceptGift_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"acceptGift"];
  }
  {
    SEL s = @selector(process_rejectGift_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"rejectGift"];
  }
  {
    SEL s = @selector(process_getActivities_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getActivities"];
  }
  {
    SEL s = @selector(process_getMessages_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getMessages"];
  }
  {
    SEL s = @selector(process_activityAction_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"activityAction"];
  }
  {
    SEL s = @selector(process_sendResetPasswordEmail_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"sendResetPasswordEmail"];
  }
  {
    SEL s = @selector(process_resetPassword_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"resetPassword"];
  }
  {
    SEL s = @selector(process_purchaseByCard_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"purchaseByCard"];
  }
  {
    SEL s = @selector(process_purchaseByCode_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"purchaseByCode"];
  }
  {
    SEL s = @selector(process_loginFacebook_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"loginFacebook"];
  }
  {
    SEL s = @selector(process_getDealOfferGeoSummariesWithin_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getDealOfferGeoSummariesWithin"];
  }
  {
    SEL s = @selector(process_getMerchantsByDealOfferId_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getMerchantsByDealOfferId"];
  }
  {
    SEL s = @selector(process_validateCode_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"validateCode"];
  }
  {
    SEL s = @selector(process_purchaseWithCard_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"purchaseWithCard"];
  }
  {
    SEL s = @selector(process_purchaseWithCode_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"purchaseWithCode"];
  }
  {
    SEL s = @selector(process_purchaseWithNonce_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"purchaseWithNonce"];
  }
  {
    SEL s = @selector(process_generateBraintreeClientToken_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"generateBraintreeClientToken"];
  }
  {
    SEL s = @selector(process_getEmailMessage_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getEmailMessage"];
  }
  return self;
}

- (id<CustomerService_t>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_createAccount_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  createAccount_args * args = [[createAccount_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  CreateAccount_result * result = [[CreateAccount_result alloc] init];
  [result setSuccess: [mService createAccount: [args customer] password: [args password]]];
  [outProtocol writeMessageBeginWithName: @"createAccount"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_authenticate_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  authenticate_args * args = [[authenticate_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Authenticate_result * result = [[Authenticate_result alloc] init];
  [result setSuccess: [mService authenticate: [args email] password: [args password]]];
  [outProtocol writeMessageBeginWithName: @"authenticate"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_customerEmailExists_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  customerEmailExists_args * args = [[customerEmailExists_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  CustomerEmailExists_result * result = [[CustomerEmailExists_result alloc] init];
  [result setSuccess: [mService customerEmailExists: [args email]]];
  [outProtocol writeMessageBeginWithName: @"customerEmailExists"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_addSocialAccount_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  addSocialAccount_args * args = [[addSocialAccount_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  AddSocialAccount_result * result = [[AddSocialAccount_result alloc] init];
  [mService addSocialAccount: [args socialAccount]];
  [outProtocol writeMessageBeginWithName: @"addSocialAccount"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_removeSocialAccount_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  removeSocialAccount_args * args = [[removeSocialAccount_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  RemoveSocialAccount_result * result = [[RemoveSocialAccount_result alloc] init];
  [mService removeSocialAccount: [args socialNetwork]];
  [outProtocol writeMessageBeginWithName: @"removeSocialAccount"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getMerchantAcquires_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getMerchantAcquires_args * args = [[getMerchantAcquires_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetMerchantAcquires_result * result = [[GetMerchantAcquires_result alloc] init];
  [result setSuccess: [mService getMerchantAcquires: [args searchOptions]]];
  [outProtocol writeMessageBeginWithName: @"getMerchantAcquires"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getMerchantAcquiresWithLocation_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getMerchantAcquiresWithLocation_args * args = [[getMerchantAcquiresWithLocation_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetMerchantAcquiresWithLocation_result * result = [[GetMerchantAcquiresWithLocation_result alloc] init];
  [result setSuccess: [mService getMerchantAcquiresWithLocation: [args searchOptions] location: [args location]]];
  [outProtocol writeMessageBeginWithName: @"getMerchantAcquiresWithLocation"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getMerchantAcquiresByCategory_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getMerchantAcquiresByCategory_args * args = [[getMerchantAcquiresByCategory_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetMerchantAcquiresByCategory_result * result = [[GetMerchantAcquiresByCategory_result alloc] init];
  [result setSuccess: [mService getMerchantAcquiresByCategory: [args categoryId] searchOptions: [args searchOptions]]];
  [outProtocol writeMessageBeginWithName: @"getMerchantAcquiresByCategory"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getDealAcquires_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getDealAcquires_args * args = [[getDealAcquires_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetDealAcquires_result * result = [[GetDealAcquires_result alloc] init];
  [result setSuccess: [mService getDealAcquires: [args merchantId] searchOptions: [args searchOptions]]];
  [outProtocol writeMessageBeginWithName: @"getDealAcquires"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_redeem_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  redeem_args * args = [[redeem_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Redeem_result * result = [[Redeem_result alloc] init];
  [result setSuccess: [mService redeem: [args dealAcquireId] location: [args location]]];
  [outProtocol writeMessageBeginWithName: @"redeem"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getDealOffers_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getDealOffers_args * args = [[getDealOffers_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetDealOffers_result * result = [[GetDealOffers_result alloc] init];
  [result setSuccess: [mService getDealOffers]];
  [outProtocol writeMessageBeginWithName: @"getDealOffers"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_activateCode_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  activateCode_args * args = [[activateCode_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ActivateCode_result * result = [[ActivateCode_result alloc] init];
  [mService activateCode: [args dealOfferid] code: [args code]];
  [outProtocol writeMessageBeginWithName: @"activateCode"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getDealOffer_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getDealOffer_args * args = [[getDealOffer_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetDealOffer_result * result = [[GetDealOffer_result alloc] init];
  [result setSuccess: [mService getDealOffer: [args dealOfferId]]];
  [outProtocol writeMessageBeginWithName: @"getDealOffer"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getDealsByDealOfferId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getDealsByDealOfferId_args * args = [[getDealsByDealOfferId_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetDealsByDealOfferId_result * result = [[GetDealsByDealOfferId_result alloc] init];
  [result setSuccess: [mService getDealsByDealOfferId: [args dealOfferId] searchOptions: [args searchOptions]]];
  [outProtocol writeMessageBeginWithName: @"getDealsByDealOfferId"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_purchaseDealOffer_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  purchaseDealOffer_args * args = [[purchaseDealOffer_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  PurchaseDealOffer_result * result = [[PurchaseDealOffer_result alloc] init];
  [mService purchaseDealOffer: [args dealOfferId]];
  [outProtocol writeMessageBeginWithName: @"purchaseDealOffer"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getMerchantsWithin_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getMerchantsWithin_args * args = [[getMerchantsWithin_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetMerchantsWithin_result * result = [[GetMerchantsWithin_result alloc] init];
  [result setSuccess: [mService getMerchantsWithin: [args location] maxMiles: [args maxMiles] searchOptions: [args searchOptions]]];
  [outProtocol writeMessageBeginWithName: @"getMerchantsWithin"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_addFavoriteMerchant_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  addFavoriteMerchant_args * args = [[addFavoriteMerchant_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  AddFavoriteMerchant_result * result = [[AddFavoriteMerchant_result alloc] init];
  [mService addFavoriteMerchant: [args merchantId]];
  [outProtocol writeMessageBeginWithName: @"addFavoriteMerchant"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_removeFavoriteMerchant_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  removeFavoriteMerchant_args * args = [[removeFavoriteMerchant_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  RemoveFavoriteMerchant_result * result = [[RemoveFavoriteMerchant_result alloc] init];
  [mService removeFavoriteMerchant: [args merchantId]];
  [outProtocol writeMessageBeginWithName: @"removeFavoriteMerchant"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getFavoriteMerchants_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getFavoriteMerchants_args * args = [[getFavoriteMerchants_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetFavoriteMerchants_result * result = [[GetFavoriteMerchants_result alloc] init];
  [result setSuccess: [mService getFavoriteMerchants: [args searchOptions]]];
  [outProtocol writeMessageBeginWithName: @"getFavoriteMerchants"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getCategories_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getCategories_args * args = [[getCategories_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetCategories_result * result = [[GetCategories_result alloc] init];
  [result setSuccess: [mService getCategories]];
  [outProtocol writeMessageBeginWithName: @"getCategories"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_giftToFacebook_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  giftToFacebook_args * args = [[giftToFacebook_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GiftToFacebook_result * result = [[GiftToFacebook_result alloc] init];
  [result setSuccess: [mService giftToFacebook: [args dealAcquireId] facebookId: [args facebookId] receipientName: [args receipientName]]];
  [outProtocol writeMessageBeginWithName: @"giftToFacebook"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_giftToEmail_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  giftToEmail_args * args = [[giftToEmail_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GiftToEmail_result * result = [[GiftToEmail_result alloc] init];
  [result setSuccess: [mService giftToEmail: [args dealAcquireId] email: [args email] receipientName: [args receipientName]]];
  [outProtocol writeMessageBeginWithName: @"giftToEmail"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getGift_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getGift_args * args = [[getGift_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetGift_result * result = [[GetGift_result alloc] init];
  [result setSuccess: [mService getGift: [args giftId]]];
  [outProtocol writeMessageBeginWithName: @"getGift"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_acceptGift_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  acceptGift_args * args = [[acceptGift_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  AcceptGift_result * result = [[AcceptGift_result alloc] init];
  [result setSuccess: [mService acceptGift: [args giftId]]];
  [outProtocol writeMessageBeginWithName: @"acceptGift"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_rejectGift_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  rejectGift_args * args = [[rejectGift_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  RejectGift_result * result = [[RejectGift_result alloc] init];
  [mService rejectGift: [args giftId]];
  [outProtocol writeMessageBeginWithName: @"rejectGift"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getActivities_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getActivities_args * args = [[getActivities_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetActivities_result * result = [[GetActivities_result alloc] init];
  [result setSuccess: [mService getActivities: [args searchOptions]]];
  [outProtocol writeMessageBeginWithName: @"getActivities"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getMessages_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getMessages_args * args = [[getMessages_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetMessages_result * result = [[GetMessages_result alloc] init];
  [result setSuccess: [mService getMessages: [args searchOptions] location: [args location]]];
  [outProtocol writeMessageBeginWithName: @"getMessages"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_activityAction_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  activityAction_args * args = [[activityAction_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ActivityAction_result * result = [[ActivityAction_result alloc] init];
  [mService activityAction: [args activityId]];
  [outProtocol writeMessageBeginWithName: @"activityAction"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_sendResetPasswordEmail_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  sendResetPasswordEmail_args * args = [[sendResetPasswordEmail_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  SendResetPasswordEmail_result * result = [[SendResetPasswordEmail_result alloc] init];
  [mService sendResetPasswordEmail: [args email]];
  [outProtocol writeMessageBeginWithName: @"sendResetPasswordEmail"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_resetPassword_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  resetPassword_args * args = [[resetPassword_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ResetPassword_result * result = [[ResetPassword_result alloc] init];
  [result setSuccess: [mService resetPassword: [args customerId] resetPasswordCode: [args resetPasswordCode] newPassword: [args newPassword]]];
  [outProtocol writeMessageBeginWithName: @"resetPassword"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_purchaseByCard_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  purchaseByCard_args * args = [[purchaseByCard_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  PurchaseByCard_result * result = [[PurchaseByCard_result alloc] init];
  [result setSuccess: [mService purchaseByCard: [args dealOfferId] paymentDetail: [args paymentDetail]]];
  [outProtocol writeMessageBeginWithName: @"purchaseByCard"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_purchaseByCode_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  purchaseByCode_args * args = [[purchaseByCode_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  PurchaseByCode_result * result = [[PurchaseByCode_result alloc] init];
  [result setSuccess: [mService purchaseByCode: [args dealOfferId] paymentCode: [args paymentCode]]];
  [outProtocol writeMessageBeginWithName: @"purchaseByCode"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_loginFacebook_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  loginFacebook_args * args = [[loginFacebook_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  LoginFacebook_result * result = [[LoginFacebook_result alloc] init];
  [result setSuccess: [mService loginFacebook: [args facebookId] facebookAccessToken: [args facebookAccessToken]]];
  [outProtocol writeMessageBeginWithName: @"loginFacebook"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getDealOfferGeoSummariesWithin_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getDealOfferGeoSummariesWithin_args * args = [[getDealOfferGeoSummariesWithin_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetDealOfferGeoSummariesWithin_result * result = [[GetDealOfferGeoSummariesWithin_result alloc] init];
  [result setSuccess: [mService getDealOfferGeoSummariesWithin: [args location] maxMiles: [args maxMiles] searchOptions: [args searchOptions] fallbackSearchOptions: [args fallbackSearchOptions]]];
  [outProtocol writeMessageBeginWithName: @"getDealOfferGeoSummariesWithin"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getMerchantsByDealOfferId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getMerchantsByDealOfferId_args * args = [[getMerchantsByDealOfferId_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetMerchantsByDealOfferId_result * result = [[GetMerchantsByDealOfferId_result alloc] init];
  [result setSuccess: [mService getMerchantsByDealOfferId: [args dealOfferId] searchOptions: [args searchOptions]]];
  [outProtocol writeMessageBeginWithName: @"getMerchantsByDealOfferId"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_validateCode_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  validateCode_args * args = [[validateCode_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ValidateCode_result * result = [[ValidateCode_result alloc] init];
  [result setSuccess: [mService validateCode: [args code] dealOfferId: [args dealOfferId]]];
  [outProtocol writeMessageBeginWithName: @"validateCode"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_purchaseWithCard_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  purchaseWithCard_args * args = [[purchaseWithCard_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  PurchaseWithCard_result * result = [[PurchaseWithCard_result alloc] init];
  [result setSuccess: [mService purchaseWithCard: [args dealOfferId] paymentDetail: [args paymentDetail] paymentProperties: [args paymentProperties]]];
  [outProtocol writeMessageBeginWithName: @"purchaseWithCard"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_purchaseWithCode_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  purchaseWithCode_args * args = [[purchaseWithCode_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  PurchaseWithCode_result * result = [[PurchaseWithCode_result alloc] init];
  [result setSuccess: [mService purchaseWithCode: [args dealOfferId] paymentCode: [args paymentCode] paymentProperties: [args paymentProperties]]];
  [outProtocol writeMessageBeginWithName: @"purchaseWithCode"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_purchaseWithNonce_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  purchaseWithNonce_args * args = [[purchaseWithNonce_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  PurchaseWithNonce_result * result = [[PurchaseWithNonce_result alloc] init];
  [result setSuccess: [mService purchaseWithNonce: [args dealOfferId] nonce: [args nonce] paymentProperties: [args paymentProperties]]];
  [outProtocol writeMessageBeginWithName: @"purchaseWithNonce"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_generateBraintreeClientToken_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  generateBraintreeClientToken_args * args = [[generateBraintreeClientToken_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GenerateBraintreeClientToken_result * result = [[GenerateBraintreeClientToken_result alloc] init];
  [result setSuccess: [mService generateBraintreeClientToken: [args dealAcquireId] location: [args location]]];
  [outProtocol writeMessageBeginWithName: @"generateBraintreeClientToken"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getEmailMessage_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getEmailMessage_args * args = [[getEmailMessage_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetEmailMessage_result * result = [[GetEmailMessage_result alloc] init];
  [result setSuccess: [mService getEmailMessage: [args templateId] entityId: [args entityId]]];
  [outProtocol writeMessageBeginWithName: @"getEmailMessage"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

